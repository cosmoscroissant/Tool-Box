=== ORGANIZED CODE ===
total functions included: 249

=== FUNCTIONS IN EXECUTION ORDER ===

// function name: rt0_amd64_darwin

// _rt0_amd64_darwin
// attributes: thunk
void __golang __noreturn rt0_amd64_darwin(
        int a1,
        int a2,
        int a3,
        int a4,
        int a5,
        int a6,
        int a7,
        int a8,
        int a9,
        char a10)
{
  rt0_amd64(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

==================================================

// function name: internal_abi_NoEscape

//-------------------------------------------------------------------------
// Function declarations

__int64 __golang internal_abi_NoEscape(_QWORD, _QWORD, _QWORD); // weak
string __golang internal_abi_Kind_String(abi_Kind);
signed __int64 __golang internal_abi__ptr_Type_Len(_ptr_abi_Type);
retval_1001120 __golang internal_abi__ptr_Type_ExportedMethods(__int64 a1);
signed __int64 __golang internal_abi__ptr_Type_NumMethod(_ptr_abi_Type);
bool __golang internal_abi_Name_IsBlank(abi_Name);
string __golang internal_abi_Name_Name(abi_Name);
string __golang internal_abi_Name_Tag(abi_Name);
// __int64 __fastcall internal_abi_NewName(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
string __golang internal_abi__ptr_Kind_String(_ptr_abi_Kind);
signed __int64 __golang internal_abi__ptr_FuncType_Len(_ptr_abi_FuncType);
bool __golang type__eq_internal_abi_UncommonType(__int64 a1, __int64 a2);
bool __golang type__eq_internal_abi_RegArgs(const __m128i *a1, const __m128i *a2);
bool __golang type__eq_internal_abi_ITab(__int64 a1, __int64 a2);
// retval_1001A40 __golang internal_cpu_Initialize(_QWORD, _QWORD); weak
void internal_cpu_doinit();
retval_1002880 __gostk internal_cpu_cpuid(unsigned int a1);
retval_10028A0 __golang internal_cpu_xgetbv(unsigned int a1);
retval_10028C0 __gostk internal_cpu_getGOAMD64level();
bool __golang type__eq_internal_cpu_option(__int64 a1, __int64 a2);
bool __golang type__eq__7_internal_cpu_option(__int64 a1, __int64 a2);
// __int64 __golang internal_runtime_sys_OnesCount64(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
__int64 type__eq_internal_runtime_sys_NotInHeap(); // weak
retval_1002CC0 __golang internal_runtime_atomic__ptr_Int32_Store(volatile __int32 *a1, __int32 a2);
retval_1002CE0 __golang internal_runtime_atomic__ptr_Uint64_Store(volatile __int64 *a1, __int64 a2);
bool __golang type__eq_internal_runtime_atomic_Int64(_QWORD *a1, _QWORD *a2);
bool __golang type__eq_internal_runtime_atomic_Uint64(_QWORD *a1, _QWORD *a2);
__int64 __golang cmpbody(__int64 a1, signed __int64 a2, __int64 a3, const __m128i *_RDI, const __m128i *_RSI);
__int64 __golang runtime_cmpstring(const __m128i *a1, signed __int64 a2, const __m128i *a3);
bool __golang memeqbody(__int64 a1, unsigned __int64 a2, __int64 a3, const __m128i *_RDI, const __m128i *_RSI);
bool __golang runtime_memequal(const __m128i *a1, const __m128i *a2, unsigned __int64 a3);
bool __golang runtime_memequal_varlen(const __m128i *a1, const __m128i *a2, __int64 a3);
const __m128i *__golang indexbytebody(const __m128i *result, __int64 a2, __int64 a3, __int64 a4, const __m128i *a5, _QWORD *a6);
const __m128i *__golang internal_bytealg_IndexByte(const __m128i *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, const __m128i *a10, __int64 a11, __int64 a12, char a13, int a14, __int64 a15);
const __m128i *__golang internal_bytealg_IndexByteString(const __m128i *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, const __m128i *a10, __int64 a11, char a12, int a13, __int64 a14);
_QWORD *__golang internal_runtime_maps_NewMap(__int64 a1, unsigned __int64 a2, _QWORD *a3, unsigned __int64 a4);
void __golang internal_runtime_maps__ptr_Map_installTableSplit(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
retval_1003800 __golang internal_runtime_maps__ptr_Map_getWithKey(__int64 a1, __int64 a2, __int64 a3);
retval_1003920 __golang internal_runtime_maps__ptr_Map_getWithKeySmall(__int64 a1, __int64 a2, char a3, __int64 a4);
char *__golang internal_runtime_maps__ptr_Map_putSlotSmall(_QWORD *a1, __int64 a2, char a3, __int64 a4);
void __golang internal_runtime_maps__ptr_Map_growToSmall(__int64 a1, __int64 a2);
void __golang internal_runtime_maps__ptr_Map_growToTable(__int64 a1, __int64 a2);
__int64 __golang internal_runtime_maps__ptr_Map_putSlotSmallFast32(_QWORD *a1, __int64 a2, char a3, int a4);
__int64 __golang internal_runtime_maps__ptr_Map_putSlotSmallFast64(_QWORD *a1, __int64 a2, char a3, unsigned __int64 a4);
__int64 __golang internal_runtime_maps__ptr_Map_putSlotSmallFastPtr(_QWORD *a1, __int64 a2, char a3, __int64 a4);
char *__golang internal_runtime_maps__ptr_Map_getWithoutKeySmallFastStr(__int64 a1, __int64 a2, const __m128i *a3, __int64 a4);
__int64 __golang internal_runtime_maps__ptr_Map_putSlotSmallFastStr(_QWORD *a1, __int64 a2, char a3, const __m128i *a4, unsigned __int64 a5);
maps_table *__golang internal_runtime_maps_newTable(__int64 a1, unsigned __int64 a2, signed __int64 a3, uint8_0 a4);
__int64 __golang internal_runtime_maps__ptr_table_reset(__int64 a1, __int64 a2, unsigned __int16 a3);
retval_1004A20 __golang internal_runtime_maps__ptr_table_getWithKey(__int64 a1, __int64 a2, unsigned __int64 a3, __int64 a4);
unsigned __int64 *__golang internal_runtime_maps__ptr_table_uncheckedPutSlot(__int64 a1, __int64 a2, unsigned __int64 a3, unsigned __int64 a4, __int64 a5);
void __golang internal_runtime_maps__ptr_Iter_Init(_QWORD *a1, __int64 a2, _QWORD *a3);
retval_1004F20 __golang internal_runtime_maps__ptr_Iter_grownKeyElem(__int64 *a1, __int64 a2, __int64 a3);
void __golang internal_runtime_maps__ptr_Iter_Next(__int64 *a1);
void __golang internal_runtime_maps__ptr_table_rehash(__int64 a1, __int64 a2, __int64 a3);
void __golang internal_runtime_maps__ptr_table_split(__int64 a1, __int64 a2, __int64 a3);
void __golang internal_runtime_maps__ptr_table_grow(__int64 a1, __int64 a2, __int64 a3, unsigned __int16 a4);
__int64 *__golang runtime_mapaccess1_fast32(__int64 a1, __int64 a2, int a3);
retval_1005D00 __golang runtime_mapaccess2_fast32(__int64 a1, __int64 a2, int a3);
__int64 __golang runtime_mapassign_fast32(__int64 a1, __int64 a2, int a3);
__int64 *__golang runtime_mapaccess1_fast64(__int64 a1, __int64 a2, __int64 a3);
retval_1006480 __golang runtime_mapaccess2_fast64(__int64 a1, __int64 a2, __int64 a3);
__int64 __golang runtime_mapassign_fast64(__int64 a1, __int64 a2, unsigned __int64 a3);
__int64 __golang runtime_mapassign_fast64ptr(__int64 a1, __int64 a2, __int64 a3);
__int64 *__golang runtime_mapaccess1_faststr(__int64 a1, __int64 a2, const __m128i *a3, __int64 a4);
retval_1007020 __golang runtime_mapaccess2_faststr(__int64 a1, __int64 a2, const __m128i *a3, __int64 a4);
__int64 __golang runtime_mapassign_faststr(__int64 a1, __int64 a2, const __m128i *a3, unsigned __int64 a4);
retval_1007800 __golang runtime_mapaccess2(__int64 a1, __int64 a2, _QWORD *a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, __int64 a11, __int64 a12);
char *__golang runtime_mapassign(__int64 a1, __int64 a2, __int64 a3);
bool __golang type__eq_internal_runtime_maps_Map(const __m128i *a1, const __m128i *a2);
__int64 __golang type__eq_internal_runtime_maps_table(__int64 a1, __int64 a2);
bool __golang type__eq_internal_godebugs_Info(__int64 a1, __int64 a2);
__int64 __golang internal_runtime_exithook_Run(__int64 a1);
volatile __int64 *__golang internal_runtime_exithook_Run_deferwrap2(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, char a10);
// __int64 __golang internal_runtime_exithook_Run_deferwrap1(int, int, int, int, int, int, int, int, int, char); weak
__int64 __golang internal_runtime_exithook_Run_func1(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, char a10);
// __int64 __golang internal_chacha8rand__ptr_State_Init(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64, __int64, __int64, __int64); weak
// void __golang internal_chacha8rand__ptr_State_Refill(_ptr_chacha8rand_State);
__int64 __golang internal_chacha8rand_block(unsigned int *a1, __m128i *a2, __int32 a3);
bool __golang type__eq_internal_chacha8rand_State(const __m128i *a1, const __m128i *a2);
retval_100AD40 (__golang *runtime_init())(unsigned __int64 a1, __m128i *a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, _QWORD *a9);
// __int64 runtime_strhashFallback(void); weak
// __int64 __golang runtime_f32hash(_QWORD, _QWORD); weak
// __int64 __golang runtime_f64hash(_QWORD, _QWORD); weak
// __int64 __golang runtime_c64hash(_QWORD, _QWORD); weak
// __int64 __golang runtime_c128hash(_QWORD, _QWORD); weak
// __int64 __golang runtime_interhash(_QWORD, _QWORD); weak
retval_1009260 __golang runtime_mapKeyError2(__int64 a1, _QWORD *a2);
__int64 runtime_memequal0(); // weak
bool __golang runtime_memequal8(_BYTE *a1, _BYTE *a2);
bool __golang runtime_memequal16(_WORD *a1, _WORD *a2);
bool __golang runtime_memequal32(_DWORD *a1, _DWORD *a2);
bool __golang runtime_memequal64(_QWORD *a1, _QWORD *a2);
// __int64 __golang runtime_efaceeq(_QWORD, _QWORD, _QWORD); weak
// __int64 __golang runtime_ifaceeq(_QWORD, _QWORD, _QWORD); weak
// retval_10098C0 __golang runtime_alginit(); weak
void __golang runtime__ptr_mspan_setUserArenaChunkToFault(_ptr_runtime_mspan);
// __int64 __golang runtime__ptr_mspan_setUserArenaChunkToFault_func1(); weak
__int64 __golang runtime_callbackUpdateSystemStack(__int64 result, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
runtime_hchan *__golang runtime_makechan(__int64 a1, signed __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// retval_1009EA0 __golang runtime_chansend1(_QWORD, _QWORD); weak
__int64 __golang runtime_chansend(unsigned __int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, _QWORD *a9);
void __golang runtime_chansend_func1(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
unsigned __int64 __golang runtime_send(__int64 a1, retval_106D280 *a2, __int64 a3, void (**a4)(void), __int64 a5);
// __int64 __golang runtime_send_goready_func1(); weak
__int64 __golang runtime_timerchandrain(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime_sendDirect(_QWORD); weak
char __golang runtime_recvDirect(__int64 *a1, __int64 a2, __m128i *a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 (*__golang runtime_closechan(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9))(void);
// __int64 __golang runtime_closechan_goready_func1(); weak
bool __golang runtime_empty(_QWORD *a1);
// __int64 __golang runtime_chanrecv1(_QWORD, _QWORD); weak
retval_100AD40 __golang runtime_chanrecv(unsigned __int64 a1, __m128i *a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, _QWORD *a9);
void __golang runtime_chanrecv_func1(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
unsigned __int64 __golang runtime_recv(_QWORD *a1, retval_106D280 *a2, __m128i *a3, void (**a4)(void), __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime_recv_goready_func1(); weak
__int64 __golang runtime_chanparkcommit(__int64 a1, volatile signed __int64 *a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// retval_100B6E0 __golang runtime_selectnbsend(_QWORD, _QWORD); weak
__int64 __golang runtime_chanlen(_QWORD *a1);
__int64 runtime_init_1(); // weak
__int64 __golang runtime__ptr_cpuProfile_add(__int64 *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, double a6, __int64 a7, __int64 a8, __int64 a9, int a10);
// __int64 __golang runtime__ptr_cpuProfile_addNonGo(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
void __golang runtime__ptr_cpuProfile_addExtra(__int64 a1, __int64 a2, double a3, __int64 a4, int a5, int a6, int a7, int a8, int a9, int a10);
__int64 __golang runtime_GOMAXPROCS(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
runtime_Pinner *runtime_debugPinnerV1();
retval_100BD80 __golang runtime_debugCallCheck(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang runtime_debugCallCheck_func1(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, unsigned int *a6, unsigned int *a7, unsigned __int64 a8, __int64 a9);
void __golang __noreturn runtime_debugCallWrap(__int64 (*a1)(void), __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
runtime_guintptr __golang runtime_debugCallWrap_func1(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang __noreturn runtime_debugCallWrap1(); // weak
__int64 __golang runtime_debugCallWrap2(void (*a1)(void));
// __int64 __golang runtime_debugCallWrap2_func1(int, int, int, int, int, int, int, int, int, char); weak
// retval_100C500 __golang runtime_gogetenv(_QWORD, _QWORD); weak
string __golang runtime_plainError_Error(runtime_plainError);
// string __golang runtime_boundsError_Error(runtime_boundsError);
__int64 __golang runtime_printpanicval(RTYPE *a1, _QWORD *a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_printanycustomtype(__int64 a1, _QWORD *a2);
__int64 __golang runtime_printindented(const __m128i *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// void __golang __noreturn runtime_panicwrap(_QWORD); weak
// __int64 __golang runtime_checkfds(_QWORD); weak
__int64 __golang runtime_memhashFallback(unsigned __int64 *a1, __int64 a2, unsigned __int64 a3);
__int64 __golang runtime_memhash32Fallback(unsigned int *a1, __int64 a2);
__int64 __golang runtime_memhash64Fallback(_QWORD *a1, unsigned __int64 a2);
volatile signed __int64 *__golang runtime__ptr_timeHistogram_record(volatile signed __int64 *result, signed __int64 a2);
_QWORD *runtime_timeHistogramMetricsBuckets();
// retval_100E8C0 __golang runtime__ptr_itabTableType_find(_QWORD, _QWORD, _QWORD); weak
__int64 __golang runtime_itabAdd(__int64 a1, double a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 *a10);
// __int64 __golang runtime__ptr_itabTableType_add(_QWORD, _QWORD); weak
retval_100EB00 __golang runtime_itabInit(abi_Name **a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, int a8, int a9);
// retval_100EF20 __golang runtime_itabsinit(); weak
// void __golang __noreturn runtime_panicdottypeE(_QWORD, _QWORD, _QWORD); weak
__int64 *__golang runtime_convT(__int64 (**a1)(void), __int64 a2, double a3, __int64 a4, void (__golang *a5)(), __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 *a10);
__m128i *__golang runtime_convTnoptr(__int64 (**a1)(void), const __m128i *a2, double a3, __int64 a4, void (__golang *a5)(), __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 *a10);
__int64 __golang runtime_typeAssert(volatile signed __int64 *a1, abi_Type *a2, double a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 *a10);
__int64 *__golang runtime_buildTypeAssertCache(_QWORD *a1, __int64 a2, __int64 a3, void (__golang *a4)(), __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 *a9, double a10);
retval_100F660 __golang runtime_interfaceSwitch(__int64 a1, abi_Type *a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, double a10);
__int64 *__golang runtime_buildInterfaceSwitchCache(_QWORD *a1, __int64 a2, __int64 a3, void (__golang *a4)(), __int64 a5, _QWORD *a6, __int64 a7, __int64 a8, __int64 *a9, double a10);
// __int64 __golang runtime__ptr_lfstack_push(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
__int64 __golang runtime_lfnodeValidate(__int64 a1);
// __int64 __golang runtime_notewakeup(_QWORD); weak
signed __int64 __golang runtime_notesleep(volatile signed __int64 *a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_notetsleep_internal(volatile signed __int64 *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime_notetsleep(_QWORD, _QWORD); weak
// __int64 __golang runtime_notetsleepg(_QWORD, _QWORD); weak
__int64 __golang runtime_lockVerifyMSize(__int64 a1, __int64 a2, __int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
// retval_1010320 __golang runtime_lock(_QWORD); weak
volatile signed __int8 *__golang runtime_lock2(volatile signed __int8 *result, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime_unlock(_QWORD); weak
void __golang runtime_unlock2(volatile signed __int64 *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_unlock2Wake(volatile signed __int64 *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_mallocinit(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_1010DE0 __golang runtime__ptr_mheap_sysAlloc(_QWORD *a1, __int64 a2, _QWORD *a3, __int64 r3, __int64 r4, __int64 r5);
retval_1011540 __golang runtime_sysReserveAligned(__int64 a1, __int64 a2, __int64 a3);
void __golang runtime__ptr_mheap_enableMetadataHugePages(__int64 a1);
__int64 __golang runtime__ptr_mcache_nextFree(__int64 a1, __int64 a2);
retval_1011900 __golang runtime_mallocgcTiny(unsigned __int64 a1);
retval_1011BE0 __golang runtime_mallocgcSmallNoscan(unsigned __int64 a1, __int64 a2, unsigned int a3, int a4, double a5, __int64 a6, int a7, int a8, int a9, int a10);
retval_1011F00 __golang runtime_mallocgcSmallScanNoHeader(__int64 (*a1)(void), __int64 a2, char a3, int a4, double a5, __int64 a6, __int64 a7, int a8, int a9, int a10);
retval_1012260 __golang runtime_mallocgcSmallScanHeader(__int64 a1, __int64 a2, char a3, double a4, __int64 a5, __int64 a6, int a7, int a8, int a9, int a10);
retval_10125E0 __golang runtime_mallocgcLarge(unsigned __int64 a1, __int64 a2, char a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_preMallocgcDebug(__int64 (*a1)(void), __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_postMallocgcDebug(__int64 result, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang runtime_deductAssistCredit(__int64 a1, unsigned __int64 a2, __int64 a3, void (__golang *a4)(), __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 *a9);
__int64 __golang runtime_memclrNoHeapPointersChunked(__int64 result, _OWORD *a2, double a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10);
// void *__golang runtime_newobject(const RTYPE *); idb
unsigned __int64 __golang runtime_profilealloc(unsigned __int64 a1, __int64 (*a2)(void), __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_fastexprand(__int64 a1);
__int64 __golang runtime_persistentalloc(__int64 (*a1)(void), __int64 (*a2)(void), __int64 (*a3)(void), __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime_persistentalloc_func1(); weak
retval_1012E80 __golang runtime_persistentalloc1(unsigned __int64 a1, unsigned __int64 a2, __int64 *r2, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 r8);
// retval_1013140 __golang runtime__ptr_linearAlloc_alloc(_QWORD, _QWORD, _QWORD, _QWORD); weak
// __int64 __golang runtime_wbZero(_QWORD); weak
// __int64 __golang runtime_wbMove(_QWORD, _QWORD, _QWORD); weak
// __int64 __golang runtime_reflectcallmove(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// __int64 __golang runtime_typedmemclr(_QWORD, _QWORD); weak
retval_1013420 __golang runtime__ptr_mspan_typePointersOf(__int64 a1, __int64 *a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_10134C0 __golang runtime__ptr_mspan_typePointersOfUnchecked(__int64 a1, __int64 *a2, __int64 (*a3)(void), __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_1013580 __golang runtime__ptr_mspan_typePointersOfType(__int64 a1, __int64 a2, __int64 (*a3)(void), __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_1013600 __golang runtime_typePointers_next(__int64 (*a1)(void), __int64 a2, unsigned __int64 a3, __int64 a4, unsigned __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_1013760 __golang runtime_typePointers_fastForward(__int64 (*a1)(void), __int64 a2, __int64 (*a3)(void), __int64 a4, unsigned __int64 a5, unsigned __int64 a6, __int64 a7, __int64 a8, __int64 a9);
unsigned __int64 __golang runtime_bulkBarrierPreWrite(unsigned __int64 result, __int64 a2, unsigned __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, _QWORD *a9);
__int64 (*__golang runtime_bulkBarrierPreWriteSrcOnly(__int64 (*result)(void), __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9))(void);
void __golang runtime__ptr_mspan_initHeapBits(_ptr_runtime_mspan);
// __int64 runtime__ptr_mspan_heapBits(void); weak
__int64 __golang runtime__ptr_mspan_heapBitsSmallForAddr(_QWORD *a1, __int64 a2);
__int64 __golang runtime__ptr_mspan_writeHeapBitsSmall(__int64 a1, __int64 a2, __int64 (*a3)(void), __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime__ptr_mspan_refillAllocCache(_QWORD, _QWORD); weak
// __int64 __golang runtime__ptr_mspan_nextFreeIndex(_QWORD); weak
void __golang __noreturn runtime_badPointer(__int64 a1, __int64 a2, unsigned __int64 a3, __int64 a4);
__int64 __golang runtime_bulkBarrierBitmap(__int64 result, __int64 a2, unsigned __int64 a3, unsigned __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, _QWORD *a9);
void __golang runtime_typeBitsBulkBarrier(__int64 a1, __int64 a2, __int64 (*a3)(void), __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
unsigned __int64 __golang runtime_progToPointerMask(char *a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
unsigned __int64 __golang runtime_runGCProg(char *a1, _BYTE *a2);
__int64 *__golang runtime_allocmcache(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang runtime_allocmcache_func1(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 *__golang runtime__ptr_mcache_refill(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
_ptr_runtime_mspan __golang runtime__ptr_mcache_allocLarge(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang runtime__ptr_mcache_releaseAll(_ptr_runtime_mcache);
void __golang runtime__ptr_mcache_prepareForSweep(_ptr_runtime_mcache);
runtime_mspan *__golang runtime__ptr_mcentral_cacheSpan(_BYTE *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime__ptr_mcentral_uncacheSpan(_QWORD); weak
runtime_mspan *__golang runtime__ptr_mcentral_grow(_BYTE *a1, __int64 a2);
// retval_1016040 __golang runtime_sysAlloc(_QWORD, _QWORD); weak
// __int64 __golang runtime_sysFree(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
// __int64 __golang runtime_sysFault(_QWORD); weak
// __int64 __golang runtime_sysReserve(_QWORD); weak
// __int64 __golang runtime_sysMap(_QWORD, _QWORD, _QWORD); weak
// __int64 __golang runtime_initMetrics(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
// retval_1017C00 __golang runtime_queuefinalizer(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
// retval_1017E60 __golang runtime_createfing(); weak
void __golang __noreturn runtime_runfinq(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
MODULEDATA120 *__golang runtime_SetFinalizer(MODULEDATA120 *result, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime_SetFinalizer_func2(); weak
// __int64 __golang runtime_SetFinalizer_func1(); weak
void __golang runtime__ptr_fixalloc_init(unsigned __int64 *a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
_OWORD *__golang runtime__ptr_fixalloc_alloc(__int64 a1, double a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10);
// retval_1018E80 __golang runtime_gcinit(_QWORD); weak
// retval_1018F00 __golang runtime_gcenable(); weak
void __golang __noreturn runtime_gcenable_gowrap2(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, char a10);
void __golang __noreturn runtime_gcenable_gowrap1(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, char a10);
bool __golang runtime_pollFractionalWorkerExit(__int64 a1);
// retval_1019140 __golang runtime_gcTrigger_test(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
__int64 __golang runtime_gcStart(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, _QWORD *a9);
__int64 __golang runtime_gcStart_func4(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, char *a7, char *a8, __int64 a9);
__int64 __golang runtime_gcStart_func2(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang runtime_gcStart_func1();
__int64 runtime_gcMarkDone(void); // weak
__int64 __golang runtime_gcMarkDone_func4(); // weak
__int64 __golang runtime_gcMarkDone_func3(__int64 a1, __int64 a2, __int64 a3, int a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_gcMarkDone_func2(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime_gcMarkDone_forEachP_func5(); weak
__int64 __golang runtime_gcMarkTermination(unsigned __int8 a1, __int64 (*a2)(void), __int64 a3, __int64 a4);
// __int64 __golang runtime_gcMarkTermination_forEachP_func6(); weak
__int64 __golang runtime_gcMarkTermination_func3(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, char *a7, char *a8, __int64 a9);
// __int64 __golang runtime_gcMarkTermination_func2(); weak
// __int64 __golang runtime_gcMarkTermination_func1(); weak
void __golang runtime_gcBgMarkStartWorkers(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang __noreturn runtime_gcBgMarkStartWorkers_gowrap1(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, char a10);
void __golang __noreturn runtime_gcBgMarkWorker(__int64 a1);
signed __int64 __golang runtime_gcBgMarkWorker_func2(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_gcMark(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, _QWORD *a9);
__int64 __golang runtime_gcSweep(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang runtime_clearpools(__int64 a1, int r1, __int64 a3, __int64 r3, volatile __int64 *r4, __int64 r5, __int64 r6, __int64 r7, __int64 r8);
retval_101C120 __golang runtime_fmtNSAsMS(_BYTE *a1, unsigned __int64 a2, __int64 a3, unsigned __int64 a4);
__int64 __golang runtime__ptr_gcCPULimiterState_startGCTransition(__int64 a1, char a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime__ptr_gcCPULimiterState_finishGCTransition(__int64 result, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime__ptr_gcCPULimiterState_update(volatile signed __int32 *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime__ptr_gcCPULimiterState_updateLocked(__int64 result, __int64 a2);
// __int64 __golang runtime__ptr_gcCPULimiterState_accumulate(_QWORD, _QWORD, _QWORD); weak
__int64 __golang runtime__ptr_gcCPULimiterState_resetCapacity(volatile signed __int32 *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_101C8C0 __golang runtime__ptr_limiterEvent_consume(volatile signed __int64 *a1, __int64 a2);
// __int64 __golang runtime__ptr_limiterEvent_stop(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64); weak
__int64 runtime_gcMarkRootPrepare(void); // weak
__int64 __golang runtime_gcMarkRootCheck(__int64 a1);
// __int64 __golang runtime_gcMarkRootCheck_func1(); weak
unsigned __int64 __golang runtime_markroot(__int64 (*a1)(void), __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
signed __int64 __golang runtime_markroot_func1(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime_markrootBlock(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
__int64 __golang runtime_markrootSpans(__int64 result, __int64 a2, __int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
void __golang runtime_gcAssistAlloc(__int64 a1, unsigned __int64 r1, __int64 a3, void (__golang *a4)(), __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 *a9);
// __int64 __golang runtime_gcAssistAlloc_func2(); weak
void __golang runtime_gcAssistAlloc_func1();
void __golang runtime_gcAssistAlloc1(__int64 a1, int64 a2);
// __int64 __golang runtime_gcWakeAllAssists(_QWORD); weak
// __int64 runtime_gcParkAssist(void); weak
void __golang runtime_gcFlushBgCredit(unsigned __int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
unsigned __int64 __golang runtime_scanstack(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, unsigned int *a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, __int64 a11);
// __int64 __golang runtime_scanframeworker(_QWORD, _QWORD, _QWORD); weak
// retval_101EFE0 __golang runtime_gcDrain(_QWORD, _QWORD); weak
int64 __golang runtime_gcDrainN(runtime_gcWork *a1, int64 a2, __int64 heapScanWork, __int64 a4, __int64 a5, unsigned __int64 nobj, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime_scanblock(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
__int64 __golang runtime_scanobject(char *a1, _QWORD *a2, __int64 (*a3)(void), __int64 a4, int a5, unsigned __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime_scanConservative(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
__int64 __golang runtime_shade(__int64 a1);
// __int64 __fastcall runtime_greyobject(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
unsigned __int64 __golang runtime_gcDumpObject(__int64 a1, __int64 a2, unsigned __int64 a3, __int64 a4);
__int64 __golang runtime_gcmarknewobject(__int64 result, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_gcMarkTinyAllocs(_QWORD); // weak
__int64 __golang runtime__ptr_gcControllerState_startCycle(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, int a8, int a9);
__int64 __golang runtime__ptr_gcControllerState_revise(__int64 a1);
// __int64 __golang runtime__ptr_gcControllerState_endCycle(_QWORD, _QWORD, _QWORD, _QWORD); weak
__int64 __golang runtime__ptr_gcControllerState_enlistWorker(__int64 result, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_1021140 __golang runtime__ptr_gcControllerState_findRunnableGCWorker(__int64 a1, _QWORD *a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime__ptr_gcControllerState_resetLive(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 *__golang runtime__ptr_gcControllerState_update(__int64 *result, unsigned __int64 a2, unsigned __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// retval_1021780 __golang runtime__ptr_gcControllerState_heapGoalInternal(_QWORD, _QWORD, _QWORD); weak
// retval_10218C0 __golang runtime__ptr_gcControllerState_trigger(_QWORD); weak
// __int64 __golang runtime__ptr_gcControllerState_commit(_QWORD, _QWORD); weak
__int64 __golang runtime__ptr_gcControllerState_addIdleMarkWorker(__int64 a1);
signed __int64 __golang runtime__ptr_gcControllerState_removeIdleMarkWorker(__int64 a1);
// __int64 __golang runtime__ptr_gcControllerState_setMaxIdleMarkWorkers(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
__int64 __golang runtime_gcControllerCommit(__int64 a1, __int64 a2);
// __int64 __golang runtime_gcPaceScavenger(_QWORD, _QWORD, _QWORD); weak
void __golang runtime__ptr_scavengerState_init(_ptr_runtime_scavengerState);
void __golang runtime__ptr_scavengerState_park(_ptr_runtime_scavengerState);
void __golang runtime__ptr_scavengerState_wake(_ptr_runtime_scavengerState);
void __golang runtime__ptr_scavengerState_sleep(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, double a10);
void __golang runtime__ptr_scavengerState_controllerFailed(_ptr_runtime_scavengerState);
// void __golang __noreturn runtime_bgscavenge(_QWORD); weak
unsigned __int64 __golang runtime__ptr_pageAlloc_scavenge(__int64 (*a1)(void), __int64 (*a2)(void), __int64 (**a3)(void), unsigned int a4);
// __int64 __golang runtime__ptr_pageAlloc_scavenge_func1(); weak
__int64 __golang runtime__ptr_pageAlloc_scavengeOne(__int64 a1, unsigned __int64 a2, __int64 a3, unsigned __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// retval_10232C0 __golang runtime__ptr_pallocData_findScavengeCandidate(_QWORD, _QWORD, _QWORD, _QWORD); weak
// __int64 __golang runtime__ptr_scavengeIndex_init(_QWORD, _QWORD, _QWORD); weak
// __int64 __golang runtime__ptr_scavengeIndex_grow(_QWORD, _QWORD, _QWORD, _QWORD); weak
// retval_1023780 __golang runtime__ptr_scavengeIndex_find(_QWORD, _QWORD); weak
// __int64 __golang runtime__ptr_scavengeIndex_alloc(_QWORD, _QWORD, _QWORD); weak
// __int64 __golang runtime__ptr_scavengeIndex_free(_QWORD, _QWORD, _QWORD, _QWORD); weak
// retval_1023C00 __golang runtime__ptr_scavengeIndex_nextGen(_QWORD); weak
// retval_1023C40 __golang runtime__ptr_scavengeIndex_setEmpty(_QWORD, _QWORD, _QWORD, _QWORD); weak
retval_1023EE0 __golang runtime__ptr_piController_next(double *a1, double a2, double a3, double a4);
// __int64 __golang runtime__ptr_stackScanState_putPtr(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// __int64 __golang runtime__ptr_stackScanState_getPtr(_QWORD); weak
// __int64 __golang runtime_binarySearchTree(_QWORD, _QWORD, _QWORD); weak
__int64 __golang runtime__ptr_mheap_nextSpanForSweep(__int64 a1, __int64 a2, __int64 a3, int a4, __int64 a5, int a6, int a7, int a8, int a9);
// __int64 __golang runtime__ptr_activeSweep_end(_QWORD, _QWORD, _QWORD); weak
__int64 __golang runtime_finishsweep_m(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5);
// void __golang __noreturn runtime_bgsweep(_QWORD); weak
// retval_1024A60 __golang runtime__ptr_sweepLocker_tryAcquire(_QWORD, _QWORD); weak
// __int64 __golang runtime_sweepone(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
// void __golang runtime__ptr_mspan_ensureSwept(_ptr_runtime_mspan);
__int64 __golang runtime__ptr_sweepLocked_sweep(runtime_mspan **a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime__ptr_sweepLocked_sweep__ptr_mheap_freeSpan_func3(); // weak
__int64 __golang runtime__ptr_sweepLocked_sweep__ptr_mheap_freeSpan_func2(); // weak
// __int64 __golang runtime__ptr_sweepLocked_sweep_func1(); weak
void __golang runtime__ptr_mspan_reportZombies(_ptr_runtime_mspan);
__int64 __golang runtime_deductSweepCredit(__int64 result, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_gcPaceSweeper(__int64 result);
// void __golang runtime__ptr_gcWork_init(_ptr_runtime_gcWork);
// __int64 __golang runtime__ptr_gcWork_put(_QWORD, _QWORD); weak
retval_1026760 __golang runtime__ptr_gcWork_putBatch(runtime_gcWork *a1, const __m128i *a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, _ptr_runtime_gcWork a10);
// uintptr __golang runtime__ptr_gcWork_tryGet(_ptr_runtime_gcWork);
// void __golang runtime__ptr_gcWork_dispose(_ptr_runtime_gcWork);
// void __golang runtime__ptr_gcWork_balance(_ptr_runtime_gcWork);
signed __int64 *__golang runtime_getempty(__int64 a1, __int64 a2, signed __int64 *a3, __int64 a4, __int64 *a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime_getempty_func1(); weak
__int64 __golang runtime_putempty(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_putfull(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
signed __int64 *__golang runtime_trygetfull(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
signed __int64 *__golang runtime_handoff(__int64 a1, __int64 a2, signed __int64 *a3, __int64 a4, __int64 *a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// retval_1027000 __golang runtime_prepareFreeWorkbufs(); weak
bool __golang runtime_freeSomeWbufs(char a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime_freeSomeWbufs_func1(); weak
__int64 __golang runtime_recordspan(_QWORD *a1, __int64 a2, __int64 a3, int a4, __int64 a5, int a6, int r0, __int64 r7, __int64 r8);
// __int64 __golang runtime_spanOfHeap(_QWORD); weak
__int64 __golang runtime__ptr_mheap_init(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime__ptr_mheap_reclaim(__int64 result, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, unsigned __int64 a9);
// __int64 __golang runtime__ptr_mheap_reclaimChunk(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
// __int64 __golang runtime__ptr_mheap_alloc(_QWORD, _QWORD); weak
// retval_1027F60 __golang runtime__ptr_mheap_allocManual(_QWORD, _QWORD, _QWORD); weak
__int64 __golang runtime__ptr_mheap_setSpans(__int64 result, unsigned __int64 a2, unsigned __int64 a3, __int64 a4, __int64 a5, int a6, int a7, int a8, __int64 a9);
_OWORD *__golang runtime__ptr_mheap_allocMSpanLocked(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, double a10);
__int64 __golang runtime__ptr_mheap_allocSpan(volatile signed __int8 *a1, unsigned __int64 r1, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime__ptr_mheap_initSpan(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
retval_1028C00 __golang runtime__ptr_mheap_grow(_QWORD *a1, __int64 a2);
void __golang runtime__ptr_mheap_freeManual(volatile signed __int8 *a1, __int64 a2, __int64 a3, __int64 a4, __int64 r0, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime__ptr_mheap_freeSpanLocked(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
_BYTE *__golang runtime__ptr_mspan_init(__int64 a1, __int64 a2, __int64 a3);
_QWORD *__golang runtime__ptr_mSpanList_remove(_QWORD *result, _QWORD *a2);
__int64 *__golang runtime__ptr_mSpanList_insert(__int64 *result, __int64 *a2);
__int64 __golang runtime_addspecial(__int64 a1, __int64 a2, unsigned __int8 a3);
__int64 __golang runtime_addfinalizer(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// retval_1029D80 __golang runtime_gcWakeAllStrongFromWeak(_QWORD); weak
__int64 __golang runtime_setprofilebucket(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang runtime_freeSpecial(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime_newMarkBits(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
// __int64 runtime_nextMarkBitArenaEpoch(void); weak
__int64 __golang runtime__ptr_pageAlloc_init(__int64 a1, __int64 a2, __int64 (*a3)(void), __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 (**a9)(void));
__int64 __golang runtime__ptr_pageAlloc_grow(__int64 *a1, __int64 a2, unsigned __int64 a3, __int64 a4, __int64 a5, unsigned __int64 a6, unsigned __int64 a7, unsigned __int64 a8, int a9);
// retval_102AA00 __golang runtime__ptr_pageAlloc_enableChunkHugePages(_QWORD); weak
__int64 __golang runtime__ptr_pageAlloc_update(_QWORD *a1, __int64 a2, __int64 a3, char a4, unsigned __int8 a5);
__int64 __golang runtime__ptr_pageAlloc_allocRange(_QWORD *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, int a9);
// __int64 __golang runtime__ptr_pageAlloc_findMappedAddr(_QWORD, _QWORD); weak
retval_102B5C0 __golang runtime__ptr_pageAlloc_find(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, unsigned __int64 a6, int a7, int a8, int a9);
// __int64 __golang runtime__ptr_pageAlloc_find_func1(int, int, int, int, int, int, int, int, int, __int64); weak
retval_102C2C0 __golang runtime__ptr_pageAlloc_alloc(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, int a7, int a8, int a9);
__int64 __golang runtime__ptr_pageAlloc_free(_QWORD *a1, __int64 a2, __int64 a3, int a4, double a5, __int64 a6, __int64 a7, int a8, int a9, int a10);
// __int64 __golang runtime_mergeSummaries(_QWORD, _QWORD, _QWORD); weak
__int64 __golang runtime__ptr_pageAlloc_sysInit(__int64 result);
__int64 __golang runtime__ptr_pageAlloc_sysGrow(__int64 *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, unsigned __int64 a6, unsigned __int64 a7, unsigned __int64 a8, int a9);
__int64 __golang runtime__ptr_scavengeIndex_sysGrow(_QWORD *a1, __int64 a2, __int64 a3, __int64 a4);
__int64 __golang runtime__ptr_scavengeIndex_sysInit(__int64 *a1);
retval_102D540 __golang runtime__ptr_pageCache_alloc(_QWORD *a1, __int64 a2);
// __int64 runtime__ptr_pageCache_allocN(void); weak
__int64 *__golang runtime__ptr_pageCache_flush(__int64 *result, _QWORD *a2, __int64 a3, int a4);
retval_102D960 __golang runtime__ptr_pageAlloc_allocToCache(_QWORD *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, int a7, int a8, int a9);
// __int64 __golang runtime__ptr_pageBits_setRange(_QWORD, _QWORD, _QWORD); weak
__int64 __golang runtime__ptr_pageBits_clearRange(__int64 result, unsigned __int64 a2, unsigned __int64 a3, int a4, int a5, int a6, int a7, int a8, int a9, double a10);
// __int64 __golang runtime__ptr_pageBits_popcntRange(_QWORD, _QWORD); weak
// __int64 __golang runtime__ptr_pallocBits_summarize(_QWORD); weak
// retval_102E300 __golang runtime__ptr_pallocBits_find(_QWORD, _QWORD, _QWORD, _QWORD); weak
retval_102E4A0 __golang runtime__ptr_pallocBits_findLargeN(__int64 a1, unsigned __int64 a2, unsigned __int64 a3);
// __int64 __golang runtime__ptr_pallocData_allocRange(_QWORD, _QWORD, _QWORD); weak
retval_102E6E0 __golang runtime__ptr_bucket_stk(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// retval_102E740 __golang runtime__ptr_bucket_mp(); weak
// __int64 __golang runtime_stkbucket(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
void __golang runtime_mProf_Flush(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// retval_102ECE0 __golang runtime_mProf_FlushLocked(_QWORD); weak
unsigned __int64 __golang runtime_mProf_Malloc(unsigned __int64 result, __int64 (*a2)(void), __int64 a3, int a4, __int64 a5, __int64 a6, int a7, int a8, int a9);
// __int64 __golang runtime_mProf_Malloc_func1(); weak
// retval_102EFC0 __golang runtime_mProf_Free(_QWORD, _QWORD); weak
_BOOL8 __golang runtime_blocksampled(__int64 a1, __int64 a2);
__int64 __golang runtime_saveblockevent(__int64 result, __int64 a2, __int64 a3, __int64 a4, int a5, __int64 a6, int a7, unsigned __int64 a8, __int64 a9);
int64 __golang runtime_fpTracebackPartialExpand(__int64 a1, _QWORD *a2, __int64 a3, signed __int64 a4, __int64 a5, __int64 a6, __int64 a7, unsigned __int64 a8, __int64 a9);
__int64 __golang runtime__ptr_lockTimer_begin(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8);
// __int64 __golang runtime__ptr_lockTimer_end(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
unsigned __int64 __golang runtime__ptr_mLockProfile_recordLock(unsigned __int64 result, __int64 a2, __int64 a3);
void __golang runtime__ptr_mLockProfile_recordUnlock(runtime_mLockProfile *a1, __int64 a2);
void __golang runtime__ptr_mLockProfile_captureStack(_ptr_runtime_mLockProfile);
signed __int64 __golang runtime__ptr_mLockProfile_captureStack_func1(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, unsigned __int64 a8, __int64 a9);
void __golang runtime__ptr_mLockProfile_store(_ptr_runtime_mLockProfile);
// __int64 __golang runtime_saveBlockEventStack(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
void __golang runtime_tryRecordGoroutineProfileWB(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, unsigned __int64 a8, __int64 a9);
void __golang runtime_tryRecordGoroutineProfile(__int64 a1, __int64 (*a2)(void), __int64 a3, __int64 a4, void (**a5)(void), __int64 a6, __int64 a7, unsigned __int64 a8, __int64 a9);
void __golang runtime_doRecordGoroutineProfile(__int64 a1, __int64 (*a2)(void), __int64 a3, __int64 a4, __int64 a5, unsigned int *a6, unsigned int *a7, unsigned __int64 a8, __int64 a9);
char __golang runtime_doRecordGoroutineProfile_func1(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
char __golang runtime_saveg(__int64 a1, _QWORD *a2, unsigned __int64 *a3, __m128i **a4, const __m128i *a5, signed __int64 a6, unsigned int *a7, unsigned __int64 a8, __int64 a9);
// retval_1030560 __golang runtime_makeAddrRange(_QWORD, _QWORD); weak
retval_10305E0 __golang runtime_addrRange_subtract(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 (*__golang runtime__ptr_addrRanges_init(__int64 *a1, __int64 (*a2)(void), __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9))(void);
int64 __golang runtime__ptr_addrRanges_findSucc(__int64 *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, unsigned __int64 a6, unsigned __int64 a7, unsigned __int64 a8, int a9);
// __int64 __golang runtime__ptr_addrRanges_add(_QWORD, _QWORD, _QWORD); weak
char __golang runtime__ptr_addrRanges_cloneInto(const __m128i **a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
volatile __int64 *__golang runtime__ptr_spanSet_push(__int64 a1, __int64 a2);
// __int64 __golang runtime__ptr_spanSet_pop(_QWORD); weak
// __int64 __golang runtime__ptr_spanSet_reset(_QWORD); weak
// retval_1031340 __golang runtime__ptr_spanSetBlockAlloc_alloc(_QWORD); weak
// __int64 __golang runtime__ptr_atomicHeadTailIndex_incTail(_QWORD); weak
// __int64 __golang runtime__ptr_sysMemStat_add(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
__int64 __golang runtime__ptr_consistentHeapStats_acquire(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang runtime__ptr_consistentHeapStats_release(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime__ptr_cpuStats_accumulate(_QWORD, _QWORD, _QWORD); weak
// void __golang runtime__ptr_wbBuf_reset(_ptr_runtime_wbBuf);
unsigned __int64 __golang runtime_wbBufFlush(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang runtime_wbBufFlush1(__int64 a1, __int64 a2, __int64 a3, int a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang runtime__ptr_pollDesc_publishInfo(_ptr_runtime_pollDesc);
// __int64 __golang runtime__ptr_pollDesc_setEventErr(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
// __int64 runtime_netpollGenericInit(void); weak
void __golang runtime__ptr_pollCache_free(__int64 a1, runtime_pollDesc *a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_netpollready(signed __int64 *a1, __int64 a2, int a3);
bool __golang runtime_netpollblockcommit(signed __int64 a1, volatile signed __int64 *a2);
unsigned __int64 __golang runtime_netpollgoready(__int64 (*a1)(void), __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime_netpollgoready_goready_func1(); weak
// __int64 __golang runtime_netpollblock(_QWORD, _QWORD, _QWORD); weak
__int64 *__golang runtime__ptr_pollCache_alloc(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 runtime_netpollinit(); // weak
__int64 __golang runtime_netpollopen(__int64 a1, __int64 a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9);
retval_1032340 __golang runtime_netpoll(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, int a6, char *a7, char *a8, int a9);
__int64 __golang runtime_addWakeupEvent(char a1, int a2, __int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
__int64 __golang runtime_wakeNetpoll(char a1, int a2, __int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
__int64 __golang runtime_semacreate(__int64 result, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9);
// __int64 __golang runtime_semasleep(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
__int64 __golang runtime_semawakeup(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 runtime_osinit(void); weak
__int64 __golang runtime_newosproc(retval_104817A (__golang *a1)(), int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9);
// __int64 __golang runtime_newosproc_func1(); weak
// __int64 __golang runtime_minit(_QWORD); weak
__int64 __golang runtime_setsig(char a1, __int64 (__golang *a2)(__int64 result, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, unsigned int *a7, _QWORD *a8, __int64 a9), __int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
__int64 __golang runtime_setsigstack(char a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9);
void __golang runtime_sysargs(int a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime_panicCheck1(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// retval_1033440 __golang runtime_panicCheck2(_QWORD, _QWORD); weak
void __golang __noreturn runtime_goPanicIndex(int64 a1, signed __int64 a2, __int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
void __golang __noreturn runtime_goPanicIndexU(int64 a1, signed __int64 a2, __int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
void __golang __noreturn runtime_goPanicSliceAlen(int64 a1, signed __int64 a2, __int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
void __golang __noreturn runtime_goPanicSliceAlenU(int64 a1, signed __int64 a2, __int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
void __golang __noreturn runtime_goPanicSliceAcap(int64 a1, signed __int64 a2, __int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
void __golang __noreturn runtime_goPanicSliceAcapU(int64 a1, signed __int64 a2, __int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
void __golang __noreturn runtime_goPanicSliceB(int64 a1, signed __int64 a2, __int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
void __golang __noreturn runtime_goPanicSliceBU(int64 a1, signed __int64 a2, __int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
void __golang __noreturn runtime_goPanicSlice3Alen(int64 a1, signed __int64 a2, __int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
void __golang __noreturn runtime_goPanicSlice3C(int64 a1, signed __int64 a2, __int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
// void __golang __noreturn runtime_panicshift(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
// void __golang __noreturn runtime_panicdivide(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
void __golang runtime_deferconvert(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_deferprocStack(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, char a10);
void __golang runtime_popDefer(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 *a9);
// __int64 __golang runtime_deferreturn(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// retval_10341E0 __golang runtime_printpanics(_QWORD, _QWORD, _QWORD); weak
retval_1034480 __golang runtime__ptr__panic_nextDefer(runtime__panic *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 *a9);
bool __golang runtime__ptr__panic_nextFrame(_ptr_runtime__panic);
// __int64 __golang runtime__ptr__panic_nextFrame_func1(); weak
__int64 __golang runtime__ptr__panic_initOpenCodedDefers(__int64 a1, unsigned int *a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime_gorecover(_QWORD); weak
__int64 __golang runtime_throw_func1(); // weak
void __golang runtime_fatal(__int64 (*a1)(void), __int64 (*a2)(void));
__int64 __golang runtime_fatal_func1(); // weak
__int64 __golang runtime_fatalthrow(int a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, char a10);
// __int64 __golang runtime_fatalthrow_func1(); weak
__int64 __golang runtime_fatalpanic(__int64 (*a1)(void), __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, char a10);
__int64 __golang runtime_fatalpanic_func1(); // weak
// __int64 __golang runtime_startpanic_m(_QWORD); weak
__int64 __golang runtime_dopanic_m(_QWORD *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 runtime_canpanic(void); // weak
// __int64 __golang runtime_shouldPushSigpanic(_QWORD, _QWORD, _QWORD); weak
// __int64 __golang runtime_isAbortPC(_QWORD); weak
void __golang runtime__ptr_Pinner_Pin(unsigned __int64 *a1, __int64 a2, __int64 a3);
void __golang runtime__ptr_Pinner_Unpin(_ptr_runtime_Pinner);
void __golang runtime__ptr_pinner_unpin(_ptr_runtime_pinner);
// __int64 __golang runtime_pinnerGetPtr(_QWORD); weak
__int64 __golang runtime_setPinned(__int64 a1, char a2);
__int64 __golang runtime_setPinned_func2(__int64 a1, __int64 a2, __int64 a3, unsigned __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime_setPinned_func1(); weak
// void __golang runtime__ptr_mspan_refreshPinnerBits(_ptr_runtime_mspan);
__int64 __golang runtime__ptr_mspan_incPinCounter(__int64 result, unsigned __int64 a2, __int64 a3, __int64 a4, unsigned __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime__ptr_mspan_decPinCounter(__int64 a1, unsigned __int64 a2, __int64 a3, unsigned __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_suspendG(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_1036A00 __golang runtime_resumeG(__int64 a1, char a2, char a3);
void __golang __noreturn runtime_asyncPreempt2(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_1036CE0 __golang runtime_isAsyncSafePoint(unsigned __int64 *a1, char *a2, unsigned __int64 a3, __int64 a4, __int64 a5, unsigned int *a6, unsigned int *a7, unsigned __int64 a8, __int64 a9);
int64 __golang runtime_recordForPanic(__int64 a1, signed __int64 a2, __int64 a3);
// __int64 __golang runtime_printlock(_QWORD); weak
// __int64 __golang runtime_printunlock(_QWORD); weak
void __golang runtime_gwrite(const __m128i *a1, signed __int64 a2, __int64 a3);
// __int64 __golang runtime_printsp(_QWORD); weak
// __int64 __golang runtime_printnl(_QWORD); weak
// __int64 __golang runtime_printbool(_QWORD); weak
void __golang runtime_printfloat(double a1);
// __int64 __golang runtime_printcomplex(_QWORD, double, double); weak
// __int64 __golang runtime_printuint(_QWORD); weak
// __int64 __golang runtime_printint(_QWORD); weak
// __int64 __golang runtime_printhex(_QWORD); weak
__int64 __golang runtime_printpointer(__int64 a1);
__int64 __golang runtime_printuintptr(__int64 a1);
// __int64 __golang runtime_printstring(_QWORD, _QWORD); weak
// __int64 __golang runtime_printslice(_QWORD, _QWORD, _QWORD); weak
__int64 __golang runtime_hexdumpWords(__int64 a1, unsigned __int64 a2, __int64 (__golang **a3)(char **));
__int64 __golang runtime_main(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime_main_func2(); weak
__int64 (__golang **runtime_init_6())();
void __golang runtime_goschedIfBusy(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_acquireSudog(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, _QWORD *a9);
__int64 __golang runtime_releaseSudog(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 *a9);
// void __golang __noreturn runtime_badmcall(_QWORD); weak
// void __golang __noreturn runtime_badmcall2(_QWORD); weak
// void __noreturn runtime_badreflectcall(void); weak
void __golang __noreturn runtime_badmorestackg0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, int a6, int a7, int a8, int a9);
void __golang __noreturn runtime_badmorestackg0_func1(); // weak
__int64 runtime_badmorestackgsignal(void); // weak
void __golang __noreturn runtime_switchToCrashStack(__int64 (__fastcall **a1)(__int64, __int64, _QWORD), __int64 a2, __int64 a3, __int64 a4, __int64 a5, int a6, int a7, int a8, int a9);
void __golang runtime_allgadd(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang runtime_forEachG(void (__golang **a1)(_QWORD), int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime_forEachGRace(_QWORD); weak
retval_1039000 __golang runtime_getGodebugEarly(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang runtime_schedinit();
// retval_10395E0 __golang runtime_mReserveID(_QWORD, _QWORD, _QWORD); weak
void __golang runtime_mcommoninit(_QWORD *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_ready(__int64 a1, __int64 a2, char a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_casfrom_Gscanstatus(__int64 a1, unsigned __int32 a2, unsigned __int32 a3);
bool __golang runtime_castogscanstatus(__int64 a1, unsigned __int32 a2, unsigned __int32 a3);
signed __int64 __golang runtime_casgstatus(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang runtime_casgstatus_func3(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang __noreturn runtime_casgstatus_func1(); // weak
signed __int64 __golang runtime_casGToWaitingForSuspendG(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_casGToPreemptScan(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_casGFromPreempted(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_103A800 __golang runtime_stopTheWorld(unsigned __int8 a1);
__int64 __golang runtime_stopTheWorld_func1(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_startTheWorld(unsigned __int8 a1, __int64 (*a2)(void), __int64 (*a3)(void), __int64 (*a4)(void), __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_startTheWorld_func1(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, char *a7, char *a8, __int64 a9);
retval_103AAA0 __golang runtime_stopTheWorldGC(unsigned __int8 a1);
__int64 __golang runtime_startTheWorldGC(unsigned __int8 a1, __int64 (*a2)(void), __int64 (*a3)(void), __int64 (*a4)(void), __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_103AB60 __golang runtime_stopTheWorldWithSema(unsigned __int8 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_startTheWorldWithSema(__int64 a1, char a2, __int64 r1_low, __int64 a4, __int64 a5, __int64 a6, char *a7, char *a8, __int64 a9);
// __int64 runtime_mstart0(void); weak
__int64 __golang runtime_mexit(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang runtime_forEachPInternal(void (__golang **a1)(__int64), int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang runtime_runSafePointFn();
runtime_m *__golang runtime_allocm(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime_allocm_func1(); weak
__int64 __golang runtime_needm(unsigned __int8 a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9);
__int64 __golang runtime_oneNewExtraM(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_dropm(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// retval_103C6A0 __golang runtime_getExtraM(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
// __int64 __golang runtime_addExtraM(_QWORD, _QWORD, _QWORD); weak
// __int64 __golang runtime_newm(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
__int64 __golang runtime_newm1(retval_104817A (__golang *a1)(), __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// retval_103CA00 __golang runtime_startTemplateThread(_QWORD); weak
// __int64 __golang runtime_stopm(_QWORD); weak
__int64 __golang runtime_startm(__int64 r0, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang runtime_handoffp(retval_1053980 *a1, int a2, _BOOL8 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_stoplockedm(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_startlockedm(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_gcstopm(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_execute(__int64 a1, char a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, unsigned __int64 a8, __int64 *a9);
_QWORD *__golang runtime_findRunnable(__int64 a1, int *a2, __int64 a3, __int64 r3, int *r4, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_pollWork(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, int a6, char *a7, char *a8, int a9);
retval_103EBE0 __golang runtime_stealWork(__int64 a1);
__int64 __golang runtime_checkRunqsNoP(__int64 a1, __int64 a2, __int64 a3, __int64 a4, unsigned __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_checkTimersNoP(__int64 a1, __int64 a2, __int64 a3, __int64 a4, unsigned __int64 a5, __int64 a6, __int64 a7);
// retval_103F1C0 __golang runtime_checkIdleGCNoP(); weak
__int64 __golang runtime_wakeNetPoller(__int64 result, int a2, __int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
// __int64 runtime_resetspinning(void); weak
__int64 *__golang runtime_injectglist(__int64 *result, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_schedule(__int64 a1, int *a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_park_m(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_goschedImpl(__int64 a1, char a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_goschedguarded_m(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_preemptPark(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, unsigned int *a6, unsigned int *a7, unsigned __int64 a8, __int64 a9);
__int64 __golang runtime_goyield_m(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang __noreturn runtime_goexit1(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang runtime_gdestroy(_QWORD *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_save(__int64 result, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
unsigned __int64 __golang runtime_reentersyscall(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_reentersyscall_func3(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang __noreturn runtime_reentersyscall_func2(); // weak
void __golang __noreturn runtime_reentersyscall_func1(); // weak
void __golang runtime_entersyscall_gcwait(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang __noreturn runtime_entersyscallblock_func3(); // weak
void __golang __noreturn runtime_entersyscallblock_func2(); // weak
void __golang __noreturn runtime_entersyscallblock_func1(); // weak
void __golang runtime_entersyscallblock_handoff(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime_exitsyscall_func2(); weak
// __int64 __golang runtime_exitsyscall_func1(); weak
__int64 __golang runtime_exitsyscallfast(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime_exitsyscallfast_func1(); weak
retval_1041760 __golang runtime_exitsyscallfast_reacquired(__int64 (*a1)(void), __int64 (*a2)(void), __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_exitsyscallfast_reacquired_func1(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7);
__int64 __golang runtime_exitsyscall0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 (*__golang runtime_malg(int a1))(void);
// __int64 __golang runtime_malg_func1(); weak
unsigned __int64 __golang runtime_newproc(__int64 (*a1)(void), __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
signed __int64 __golang runtime_newproc_func1(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_newproc1(_QWORD *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 runtime_saveAncestors(void); weak
void __golang runtime_gfput(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
_QWORD *__golang runtime_gfget(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime_gfget_func2(); weak
// __int64 __golang runtime_gfget_func1(); weak
void __golang runtime_gfpurge(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime_unlockOSThread(_QWORD); weak
// __int64 __golang runtime__System(); weak
// __int64 __golang runtime__ExternalCode(); weak
// __int64 __golang runtime__LostExternalCode(); weak
// __int64 __golang runtime__GC(); weak
// __int64 __golang runtime__LostSIGPROFDuringAtomic64(); weak
// __int64 __golang runtime__LostContendedRuntimeLock(); weak
__int64 __golang runtime_sigprof(__int64 result, _QWORD *a2, __int64 a3, unsigned __int64 *a4, __int64 a5, int a6, __int64 a7, _QWORD *a8, __int64 a9);
volatile signed __int32 *__golang runtime__ptr_p_init(__int64 a1, int a2);
void __golang runtime__ptr_p_destroy(_ptr_runtime_p);
// __int64 __golang runtime__ptr_p_destroy_freemcache_func2(); weak
void __golang runtime__ptr_p_destroy_func1(__int64 a1, _QWORD *a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_procresize(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_acquirep(__int64 a1);
// retval_1044080 __golang runtime_wirep(_QWORD); weak
void __golang __noreturn runtime_wirep_func2(); // weak
__int64 __golang runtime_releasep(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_releasepNoTrace(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// retval_1044420 __golang runtime_incidlelocked(_QWORD); weak
// retval_1044480 __golang runtime_checkdead(_QWORD); weak
__int64 __golang runtime_retake(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime_preemptall(_QWORD, _QWORD, _QWORD); weak
__int64 __golang runtime_preemptone(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang runtime_schedtrace(__int64 a1);
// __int64 __golang runtime_schedEnableUser(_QWORD); weak
// retval_1045BA0 __golang runtime_globrunqget(_QWORD, _QWORD); weak
__int64 __golang runtime_pidleput(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_1045EC0 __golang runtime_pidleget(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, int a8, int a9);
// retval_1046040 __golang runtime_pidlegetSpinning(_QWORD); weak
signed __int64 __golang runtime_runqput(signed __int64 result, signed __int64 a2, char a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_runqputslow(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang runtime_runqputbatch(__int64 a1, __int64 *a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_1046460 __golang runtime_runqdrain(__int64 a1);
__int64 __golang runtime_runqgrab(__int64 a1, __int64 a2, int a3, char a4, __int64 a5, __int64 a6, int a7, __int64 a8, int a9);
__int64 __golang runtime_runqsteal(__int64 a1, __int64 a2, char a3, __int64 a4, __int64 a5, __int64 a6, int a7, __int64 a8, int a9);
unsigned int *__golang runtime_doInit1(unsigned int *result, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime__ptr_profBuf_canWriteRecord(_QWORD, _QWORD); weak
// __int64 __golang runtime__ptr_profBuf_canWriteTwoRecords(_QWORD, _QWORD, _QWORD); weak
void __golang runtime__ptr_profBuf_write(_QWORD *a1, _QWORD *a2, __int64 a3, const __m128i *a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, double a10);
// retval_1047460 __golang runtime__ptr_profBuf_close(_QWORD, _QWORD); weak
// __int64 __golang runtime__ptr_profBuf_wakeupExtra(_QWORD); weak
retval_1047520 __golang runtime__ptr_profBuf_read(volatile __int64 *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, double a8);
void __golang runtime_randinit(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_readTimeRandom(__int64 a1, __int64 a2, __int64 a3);
// __int64 runtime_bootstrapRand(void); weak
// __int64 runtime_bootstrapRandReseed(void); weak
__int64 __golang runtime_mrandinit(__int64 a1);
int __golang runtime_retryOnEAGAIN(retval_104817A (__golang **a1)());
// __int64 __golang runtime__ptr_ticksType_init(_QWORD); weak
__int64 __golang runtime__ptr_godebugInc_IncNonDefault(__int64 result);
// __int64 __golang runtime_godebugNotify(_QWORD, _QWORD); weak
__int64 __golang runtime_writeErrData(__int64 a1, unsigned int a2);
// __int64 __golang runtime_args(_QWORD, _QWORD); weak
__int64 runtime_goargs(void); // weak
__int64 __golang runtime_goenvs_unix(_QWORD); // weak
// __int64 runtime_testAtomic64(void); weak
void __golang __noreturn runtime_check(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_parsedebugvars(_QWORD); // weak
char ***__golang runtime_reparsedebugvars(__int64 a1, __int64 a2);
// __int64 __golang runtime_parsegodebug(_QWORD, _QWORD, _QWORD); weak
string __golang runtime_waitReason_String(runtime_waitReason);
retval_1049480 __golang runtime_getcallerfp(); // weak
unsigned __int64 __golang runtime__ptr_rwmutex_rlock(unsigned __int64 result, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang runtime__ptr_rwmutex_rlock_func1(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime__ptr_rwmutex_runlock(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime_secure(_QWORD); weak
unsigned __int64 __golang runtime_readyWithTime(retval_106D280 *a1, __int64 (*a2)(void), __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime_readyWithTime_goready_func1(); weak
// retval_1049920 __golang runtime_semacquire1(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
// __int64 __golang runtime_semrelease1(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
void __golang runtime__ptr_semaRoot_queue(__int64 a1, unsigned __int64 a2, __int64 a3, char a4);
// __int64 __golang runtime__ptr_semaRoot_rotateLeft(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
// __int64 __golang runtime__ptr_semaRoot_rotateRight(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
__int64 __golang runtime_dumpregs(__int64 a1);
void (__noreturn *__golang runtime__ptr_sigctxt_preparePanic(__int64 a1, int a2, __int64 a3))();
// retval_104B080 __golang runtime__ptr_sigctxt_fixsigcode(_QWORD); weak
__int64 __golang runtime_doSigPreempt(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, unsigned int *a6, unsigned int *a7, unsigned __int64 a8, __int64 a9);
__int64 __golang runtime_preemptM(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang runtime_sigtrampgo(unsigned int a1, __int64 a2, __int64 a3);
// __int64 __golang runtime_sigprofNonGo(_QWORD, _QWORD, _QWORD); weak
__int64 __golang runtime_sigprofNonGoPC(__int64 result, __int64 a2, __int64 a3, __int64 a4, int a5, int a6, int a7, int a8, int a9);
retval_104B8A0 __golang runtime_adjustSignalStack(int a1, __int64 a2, __int64 a3, int a4, __int64 a5, int a6, int a7, int a8, int a9);
void __golang runtime_adjustSignalStack2(unsigned int a1, __int64 a2, __int64 a3, char a4);
__int64 __golang runtime_sighandler(__int64 result, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, unsigned int *a7, _QWORD *a8, __int64 a9);
__int64 __golang runtime_fatalsignal(__int64 a1, _QWORD *a2, __int64 a3, __int64 a4);
// retval_104C580 __golang runtime_dieFromSignal(_QWORD); weak
__int64 __golang runtime_raisebadsignal(__int64 result, __int64 a2, __int64 a3, int a4, __int64 *a5, int a6, int a7, int a8, int a9);
// void __golang __noreturn runtime_sigNotOnStack(_QWORD, _QWORD, _QWORD); weak
__int64 __golang runtime_badsignal(__int64 a1, __int64 a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9);
// __int64 runtime_sigfwdgo(void); weak
// retval_104CBA0 __golang runtime_sigblock(_QWORD); weak
__int64 __golang runtime_unblocksig(int a1, int a2, __int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
__int64 __golang runtime_minitSignalStack(__int64 a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9);
__int64 __golang runtime_minitSignalMask(__int64 a1, __int64 *a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9);
__int64 __golang runtime_unminitSignals(__int64 a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9);
// __int64 runtime_signalstack(void); weak
// __int64 __golang runtime_sigsend(_QWORD); weak
// void __noreturn runtime_panicmakeslicelen(void); weak
__int64 (*__golang runtime_makeslicecopy(unsigned __int64 *a1, signed __int64 a2, unsigned __int64 a3, const __m128i *a4))(void);
// __int64 __golang runtime_stackpoolalloc(_QWORD); weak
// __int64 __golang runtime_stackpoolfree(_QWORD, _QWORD); weak
void __golang runtime_stackcacherefill(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime_stackcacherelease(_QWORD, _QWORD, _QWORD); weak
__int64 __golang runtime_stackcache_clear(__int64 result, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_104D920 __golang runtime_stackalloc(unsigned int a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 r7, __int64 r8, unsigned int a10);
void __golang runtime_stackfree(unsigned __int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
unsigned __int64 __golang runtime_adjustpointers(unsigned __int64 result, int *a2, unsigned __int64 *a3, __int64 a4, __int64 a5);
unsigned int **__golang runtime_adjustframe(unsigned int **result, unsigned __int64 *a2);
__int64 __golang runtime_syncadjustsudogs(__int64 a1, __int64 a2, unsigned __int64 *a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime_copystack(_QWORD, _QWORD); weak
__int64 __golang runtime_newstack(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, unsigned int *a6, unsigned int *a7, unsigned __int64 a8, __int64 a9);
__int64 runtime_nilfunc(); // weak
// __int64 __golang runtime_gostartcallfn(_QWORD, _QWORD); weak
__int64 __golang runtime_shrinkstack(__int64 result, __int64 a2, __int64 a3, __int64 a4, __int64 a5, unsigned int *a6, unsigned int *a7, unsigned __int64 a8, __int64 a9);
// retval_104FAE0 __golang runtime_gcComputeStartingStackSize(_QWORD); weak
retval_104FC00 __golang runtime__ptr_stkframe_argMapInternal(_QWORD *a1);
retval_104FEE0 __golang runtime__ptr_stkframe_getStackMap(unsigned int **a1);
__int64 __golang runtime_stkobjinit(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_1050660 __golang runtime_concatstrings(__int64 a1, __int64 a2, unsigned __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// retval_1050860 __golang runtime_concatstring2(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
// retval_1050900 __golang runtime_concatstring3(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
// retval_10509C0 __golang runtime_concatstring4(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
// __int64 __golang runtime_concatstring5(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64, __int64); weak
// retval_1050BE0 __golang runtime_slicebytetostring(_QWORD, _QWORD, _QWORD); weak
// retval_1050CE0 __golang runtime_rawstringtmp(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
// retval_1050DA0 __golang runtime_stringtoslicebyte(_QWORD, _QWORD, _QWORD); weak
// retval_1050E60 __golang runtime_intstring(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
__int64 *__golang runtime_rawbyteslice(unsigned __int64 a1, __int64 a2, double a3, __int64 a4, void (__golang *a5)(), char *a6, __int64 a7, __int64 a8, __int64 a9, __int64 *a10);
// retval_10510A0 __golang runtime_atoi64(_QWORD, _QWORD); weak
retval_1051180 __golang runtime_parseByteCount(__int64 a1, __int64 a2);
__int64 __golang runtime_findnull(const __m128i *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 runtime_badsystemstack(void); // weak
bool __golang runtime__ptr_Frames_Next(void ***a1, __int64 *a2, __int64 a3, __int64 a4, __int64 a5, unsigned int *a6, unsigned int *r6, unsigned __int64 r7, __int64 *r8, __int128 a10, __int64 a11, __int64 a12, __int64 a13, __int64 a14, __int64 r2_low, __int64 a16, __int64 a17, unsigned int *a18, _QWORD *a19);
retval_1051CA0 __golang runtime_expandCgoFrames(__int64 a1);
// __int64 runtime_modulesinit(void); weak
// __int64 __golang runtime__ptr_moduledata_textAddr(_QWORD, _QWORD); weak
// retval_1052260 __golang runtime__ptr_moduledata_funcName(_QWORD, _QWORD); weak
uintptr __golang runtime__ptr_Func_Entry(_ptr_runtime_Func);
retval_1052360 __golang runtime_pcvalue(unsigned int *a1, _QWORD *a2, unsigned int a3, unsigned __int64 a4, char a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, __int64 a11, unsigned int a12, __int64 a13, char a14);
// retval_1052A40 __golang runtime_funcpkgpath(_QWORD, _QWORD); weak
// __int64 __golang runtime_funcfile(_QWORD); weak
__int64 __golang runtime_funcMaxSPDelta(unsigned int *a1, _QWORD *a2, __int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
__int64 __golang runtime_pcdatavalue(unsigned int *a1, _QWORD *a2, unsigned int a3, unsigned __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_pcdatavalue1(unsigned int *a1, _QWORD *a2, unsigned int a3, unsigned __int64 a4, char a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_1052E40 __golang runtime_pcdatavalue2(unsigned int *a1, _QWORD *a2, unsigned int a3, unsigned __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// retval_1052EC0 __golang runtime_step(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
retval_1053060 __golang runtime__ptr_inlineUnwinder_next(unsigned int **a1, __int64 a2, int a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8);
void __golang runtime__ptr_synctestGroup_changegstatus(__int64 a1, __int64 a2, int a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime__ptr_synctestGroup_changegstatus_goready_func1(); weak
void __golang runtime__ptr_synctestGroup_incActive(_ptr_runtime_synctestGroup);
void __golang runtime__ptr_synctestGroup_decActive(_ptr_runtime_synctestGroup);
// __int64 __golang runtime__ptr_synctestGroup_decActive_goready_func1(); weak
// __int64 __golang runtime_pthread_attr_init(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64); weak
// __int64 __golang runtime_pthread_attr_getstacksize(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64, __int64); weak
// __int64 __golang runtime_pthread_attr_setdetachstate(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64, __int64); weak
// __int64 __golang runtime_raise(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, char); weak
// __int64 __golang runtime_pthread_kill(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, char); weak
// retval_1053760 __golang runtime_mmap(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
// __int64 __golang runtime_munmap(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64); weak
// __int64 __golang runtime_madvise(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64); weak
// __int64 __golang runtime_usleep(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, char); weak
// __int64 __golang runtime_usleep_no_g(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, char); weak
// retval_1053980 __golang runtime_nanotime1(_QWORD); weak
// __int64 __golang runtime_sigaction(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, char); weak
// __int64 __golang runtime_sigprocmask(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, char); weak
// __int64 __golang runtime_sigaltstack(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64); weak
// __int64 __golang runtime_raiseproc(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, char); weak
// retval_1053BA0 __golang runtime_kqueue(); weak
// __int64 __golang runtime_kevent(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, char, __int64, __int64, __int64, __int64, __int64); weak
// __int64 __golang runtime_pthread_mutex_init(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64, __int64); weak
// __int64 __golang runtime_pthread_mutex_lock(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64); weak
// __int64 __golang runtime_pthread_mutex_unlock(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64); weak
// __int64 __golang runtime_pthread_cond_init(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64, __int64); weak
// __int64 __golang runtime_pthread_cond_signal(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64); weak
// __int64 __golang runtime_arc4random_buf(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64); weak
__int64 __golang runtime_libcCall(__int64 (__fastcall *a1)(__int64), __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, char a10);
bool __golang runtime__ptr_timer_updateHeap(_ptr_runtime_timer);
_QWORD *__golang runtime__ptr_timers_addHeap(_QWORD *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 *a9);
void __golang runtime__ptr_timer_maybeRunAsync(_ptr_runtime_timer);
volatile signed __int8 *__golang runtime__ptr_timer_maybeRunAsync_func1(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
bool __golang runtime__ptr_timer_stop(_ptr_runtime_timer);
void __golang runtime__ptr_timers_deleteMin(_ptr_runtime_timers);
__int64 __golang runtime__ptr_timer_modify(_ptr_runtime_timer a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang runtime__ptr_timer_maybeAdd(_ptr_runtime_timer);
void __golang runtime__ptr_timers_cleanHead(_ptr_runtime_timers);
retval_1054DC0 __golang runtime__ptr_timers_take(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 *a9);
runtime_timers *__golang runtime__ptr_timers_adjust(runtime_timers *result, int64 a2, char a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_10551E0 __golang runtime__ptr_timers_check(_ptr_runtime_timers a1, int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
int64 __golang runtime__ptr_timers_run(_ptr_runtime_timers, int64);
volatile signed __int8 *__golang runtime__ptr_timer_unlockAndRun(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_timeSleepUntil(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime__ptr_timers_siftUp(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
_QWORD *__golang runtime__ptr_timers_siftDown(_QWORD *result, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, _QWORD *a9);
void __golang runtime__ptr_timers_initHeap(_ptr_runtime_timers);
void __golang runtime__ptr_timer_maybeRunChan(_ptr_runtime_timer);
volatile signed __int8 *__golang runtime__ptr_timer_maybeRunChan_func1(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang runtime_blockTimerChan(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang runtime_unblockTimerChan(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang runtime_traceAdvance_func6(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime_traceAdvance_forEachP_func7(); weak
void __golang runtime_traceAdvance_func4(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang runtime_traceAdvance_func3(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, _QWORD *a9);
void __golang runtime_traceAdvance_func1(__int64 (*a1)(void), __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
signed __int64 __golang runtime_traceAdvance_func1_1(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 (*__golang runtime_traceRegisterLabelsAndReasons(__int64 (*result)(void)))(void);
// __int64 __golang runtime_traceReader(_QWORD, _QWORD, _QWORD); weak
void __golang runtime__ptr_traceAdvancerState_stop(__int64 *a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang runtime__ptr_wakeableSleep_wake(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang runtime__ptr_wakeableSleep_close(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_SpanAlloc(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_SpanFree(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_HeapObjectAlloc(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_HeapObjectFree(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_GoroutineStackAlloc(__int64 a1, unsigned __int64 a2, __int64 a3, unsigned __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_GoroutineStackFree(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
_BYTE *__golang runtime__ptr_unwinder_initAt(_BYTE *a1, __int64 a2, _QWORD *a3, __int64 a4, unsigned __int64 *a5, unsigned int *a6, unsigned int *a7, unsigned __int64 a8, __int64 a9);
_BYTE *__golang runtime__ptr_unwinder_resolveInternal(_BYTE *result, __int64 a2, char a3, __int64 a4, __int64 a5);
// __int64 __golang runtime__ptr_unwinder_next(_QWORD); weak
__int64 __golang runtime__ptr_unwinder_finishInternal(__int64 result);
unsigned int *__golang runtime__ptr_unwinder_symPC(unsigned int **a1);
__int64 __golang runtime__ptr_unwinder_cgoCallers(_QWORD *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8);
signed __int64 __golang runtime_tracebackPCs(unsigned int **a1, __int64 a2, __int64 a3, unsigned __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8);
__int64 __golang runtime_printArgs(__int64 result, _QWORD *a2, __int64 a3, unsigned __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_1058380 __golang runtime_funcNamePiecesForPrint(const __m128i *a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime_printFuncName(_QWORD, _QWORD); weak
__int64 __golang runtime_printcreatedby(_QWORD *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, unsigned int *a6, unsigned int *a7, unsigned __int64 a8, __int64 a9);
// __int64 __fastcall runtime_printcreatedby1(_QWORD, _QWORD, _QWORD, _QWORD); weak
__int64 __golang runtime_tracebacktrap(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
// __int64 __golang runtime_traceback1(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
retval_1058C20 __golang runtime_traceback1_func1(unsigned __int8 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, unsigned int *a7, unsigned __int64 a8, __int64 a9);
retval_1058DC0 __golang runtime_traceback2(__int64 a1, unsigned __int8 a2, __int64 a3, __int64 a4);
// __int64 __golang runtime_traceback2_func1(); weak
signed __int64 __golang runtime_callers_func1(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, unsigned __int64 a8, __int64 a9);
signed __int64 __golang runtime_gcallers(unsigned __int64 *a1, __int64 a2, __int64 a3, unsigned __int64 a4, __int64 a5, __int64 a6, unsigned int *a7, unsigned __int64 a8, __int64 a9);
// __int64 __golang runtime_showframe(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
__int64 __golang runtime_showfuncinfo(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_isExportedRuntime(_QWORD *a1, __int64 a2, __int64 a3, int a4, __int64 a5, int a6, int a7, int a8, int a9);
__int64 __golang runtime_goroutineheader(_QWORD *a1);
__int64 __golang runtime_tracebackothers(_QWORD *a1);
__int64 __golang runtime_tracebackothers_func1(__int64 result, __int64 a2, __int64 a3, __int64 a4, __int64 a5, unsigned int *a6, unsigned int *a7, unsigned __int64 a8, __int64 a9);
__int64 __golang runtime_tracebackHexdump(unsigned __int64 a1, unsigned __int64 a2, __int64 a3, __int64 (__golang *a4)(char **));
// __int64 __golang runtime_tracebackHexdump_func1(); weak
bool __golang runtime_isSystemGoroutine(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, unsigned int *a6, unsigned int *a7, unsigned __int64 a8, __int64 a9);
// __int64 __golang runtime_printOneCgoTraceback(_QWORD, _QWORD, _QWORD); weak
// __int64 __golang runtime_callCgoSymbolizer(_QWORD); weak
// __int64 __golang runtime_cgoContextPCs(_QWORD); weak
retval_105AD60 __golang runtime_traceWriter_event(__int64 a1, __int64 a2, __int64 a3, __int64 a4, char a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceWriter_ensure(__int64 result, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_105AFE0 __golang runtime_traceWriter_flush(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang runtime_traceWriter_flush_func1(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_105B0C0 __golang runtime_traceWriter_refill(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime_traceWriter_refill_func1(); weak
__int64 __golang runtime__ptr_traceBuf_varintAt(__int64 result, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
char __golang runtime_traceBufFlush(_QWORD *a1, char a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang runtime_traceStopReadCPU(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceReadCPU(__int64 a1, double a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8);
__int64 (*__golang runtime_traceCPUFlush(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9))(void);
void __golang runtime_traceCPUFlush_func1(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
signed __int64 __golang runtime_traceCPUSample(signed __int64 result, __int64 a2, int *a3, __int64 a4, __int64 a5, __int64 a6);
retval_105C160 __golang runtime_traceLocker_eventWriter(__int64 a1, unsigned __int64 a2, unsigned __int8 a3, unsigned __int8 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceEventWriter_event(__int64 a1, __int64 a2, char a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_startPC(__int64 a1, __int64 a2, void *a3, __int64 a4, __int64 a5, unsigned int *a6, unsigned int *a7, unsigned __int64 a8, __int64 a9);
retval_105C620 __golang runtime__ptr_traceMap_put(volatile signed __int64 *a1, const __m128i *a2, unsigned __int64 a3);
_QWORD *__golang runtime__ptr_traceMap_newTraceMapNode(__int64 a1, const __m128i *a2, unsigned __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime__ptr_traceMap_reset(volatile __int64 *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime__ptr_traceRegionAlloc_alloc(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime__ptr_traceRegionAlloc_drop(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_105CB60 __golang runtime_traceLockInit(); // weak
__int64 runtime_traceAllocFreeEnabled(void); // weak
retval_105CBA0 runtime_traceAcquire();
retval_105CBC0 __golang runtime_traceAcquireEnabled();
retval_105CC60 __golang runtime_traceLocker_ok(__int64 a1, __int64 a2);
__int64 __golang runtime_traceRelease(__int64 result);
__int64 __golang runtime_traceLocker_Gomaxprocs(__int64 a1, unsigned __int64 a2, int a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_ProcStart(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_ProcStop(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_GCActive(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_GCStart(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_GCDone(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_STWStart(__int64 a1, unsigned __int64 a2, unsigned __int8 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_STWDone(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_105D220 __golang runtime_traceLocker_GCSweepStart(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_GCSweepSpan(__int64 result, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_GCSweepDone(__int64 result, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_GCMarkAssistStart(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_GCMarkAssistDone(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_GoCreate(__int64 a1, unsigned __int64 a2, __int64 a3, void *a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_GoStart(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_GoEnd(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_GoStop(__int64 a1, unsigned __int64 a2, unsigned __int8 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_GoPark(__int64 a1, unsigned __int64 a2, unsigned __int8 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_GoUnpark(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4);
unsigned __int64 __golang runtime_traceLocker_emitUnblockStatus(__int64 a1, __int64 a2, __int64 a3, unsigned __int64 a4);
__int64 __golang runtime_traceLocker_GoSysCall(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_GoSysExit(__int64 a1, unsigned __int64 a2, char a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_ProcSteal(__int64 a1, unsigned __int64 a2, int *a3, char a4, __int64 a5, __int64 a6, __int64 a7);
__int64 __golang runtime_traceLocker_HeapAlloc(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_HeapGoal(__int64 a1, unsigned __int64 a2, __int64 a3);
__int64 __golang runtime_traceLocker_GoCreateSyscall(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_GoDestroySyscall(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
signed __int64 __golang runtime_traceThreadDestroy(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang runtime_traceThreadDestroy_func1(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceStack(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, unsigned __int64 a8, __int64 a9);
// __int64 __golang runtime__ptr_traceStackTable_put(_QWORD, _QWORD, _QWORD, _QWORD); weak
__int64 __golang runtime__ptr_traceStackTable_dump(__int64 *a1, __int64 (*a2)(void));
__int64 __golang runtime_dumpStacksRec(__int64 a1, __int64 a2, __int64 (*a3)(void), __int64 a4, __int64 a5, __m128i *a6, __int64 a7, unsigned __int64 a8, int a9);
retval_105F120 __golang runtime_makeTraceFrames(__int64 (*a1)(void), uintptr *a2, size_t a3, size_t a4);
retval_105F3C0 __golang runtime_makeTraceFrame(__int64 (*a1)(void), __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, __int64 a11, const __m128i *a12, __int64 a13, const __m128i *a14, __int64 a15, __int64 a16);
__int64 __golang runtime_fpunwindExpand(__m128i *a1, __int64 a2, __int64 a3, unsigned __int64 *a4, __int64 a5, __int64 a6, __int64 a7, unsigned __int64 a8, __int64 a9);
__int64 __golang runtime_startPCForTrace(void *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, unsigned int *a6, unsigned int *a7, unsigned __int64 a8, __int64 a9);
retval_105F880 __golang runtime_traceWriter_writeGoStatus(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, unsigned __int8 a7, char a8, __int64 a9);
retval_105F9A0 __golang runtime_traceWriter_writeProcStatusForP(__int64 r0, unsigned __int64 r1, __int64 r2, __int64 a4, int *a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_105FB00 __golang runtime_traceWriter_writeProcStatus(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, unsigned __int8 a6, char a7, __int64 a8, __int64 a9);
__int64 __golang runtime_goStatusToTraceGoStatus(int a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime__ptr_traceStringTable_put(__int64 a1, __int64 (*a2)(void), const __m128i *a3, unsigned __int64 a4);
// __int64 __golang runtime__ptr_traceStringTable_put_func1(); weak
void __golang runtime__ptr_traceStringTable_writeString(__int64 a1, __int64 a2, unsigned __int64 a3, const __m128i *a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime__ptr_traceStringTable_reset(__int64 a1, __int64 (*a2)(void), __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang runtime__ptr_traceStringTable_reset_func1(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
unsigned __int64 __golang runtime_traceFrequency(__int64 (*a1)(void), __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang runtime_traceFrequency_func1(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_1060340 __golang runtime__ptr_traceTypeTable_put(volatile signed __int64 *a1, __int64 r1);
__int64 __golang runtime__ptr_traceTypeTable_dump(__int64 *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_dumpTypesRec(__int64 a1, __int64 a2, __int64 a3, unsigned __int8 a4, __int64 a5, int a6, int a7, int a8, int a9);
// retval_1060920 __golang runtime_rtype_string(_QWORD); weak
__int64 (*__golang runtime_getGCMaskOnDemand(__int64 (*a1)(void), int a2, __int64 (*a3)(void), __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9))(void);
unsigned __int64 *__golang runtime_getGCMaskOnDemand_func1(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, unsigned __int64 *a7, unsigned __int64 a8, unsigned __int64 a9);
_BYTE *__golang runtime_bitCursor_write(__int64 a1, unsigned __int64 a2, unsigned __int8 *a3, unsigned __int64 a4);
unsigned __int64 *__golang runtime_buildGCMask(unsigned __int64 *result, __int64 a2, unsigned __int64 a3, __int64 a4, __int64 a5, __int64 a6, unsigned __int64 *a7, unsigned __int64 a8, unsigned __int64 a9);
// __int64 __golang runtime_resolveNameOff(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// __int64 __golang runtime_resolveTypeOff(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64); weak
// __int64 __golang runtime_rtype_textOff(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
retval_1061580 __golang runtime_pkgPath(_BYTE *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, int a8, int a9);
void runtime_typelinksinit();
__int64 __golang runtime_typesEqual(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// void __golang __noreturn runtime_panicunsafestringlen(_QWORD); weak
// void __noreturn runtime_panicunsafestringnilptr(void); weak
// void __golang __noreturn runtime_panicunsafeslicelen(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
// void __golang __noreturn runtime_panicunsafeslicenilptr(_QWORD, _QWORD, _QWORD); weak
// retval_1062A40 __golang runtime_decoderune(_QWORD, _QWORD); weak
retval_1062D60 runtime_printCgoTraceback_func1();
void __golang runtime_traceAdvance_func2(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceAdvance_func5(int *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_schedtrace_func1(__int64 a1);
// __int64 __golang runtime_injectglist_func1(_QWORD); weak
void __golang __noreturn runtime_casgstatus_func2(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_init_6_func1(); // weak
__int64 runtime__ptr_scavengerState_init_func4(); // weak
__int64 __golang runtime_gcResetMarkState_func1(__int64 result);
__int64 __golang runtime_gcBgMarkWorker_func1(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6);
void __golang runtime_gcMarkTermination_func4(__int64 a1);
// __int64 __golang runtime_gcMarkTermination_func4_1(); weak
void __golang runtime_gcMarkDone_func1(runtime_gcWork *a1, __int64 a2, __int64 a3, int a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_debugCallWrap1_func1(_QWORD *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_debugCallWrap_func2(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime_nilinterhash(_QWORD, _QWORD); weak
__int64 __golang runtime_typehash(__int64 a1, __m128i *a2, unsigned __int64 a3);
__int64 __golang runtime_atomicwb(_QWORD *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_1064E00 __golang internal_runtime_atomic_storePointer(volatile __int64 *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
bool __golang internal_runtime_atomic_casPointer(volatile signed __int64 *a1, signed __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_1064EA0 __golang sync_atomic_StorePointer(volatile __int64 *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang sync_atomic_SwapPointer(volatile __int64 *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
bool __golang sync_atomic_CompareAndSwapPointer(volatile signed __int64 *a1, signed __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_cgocall(__int64 (__fastcall *a1)(__int64), __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang reflect_chanlen(_QWORD *a1);
__int64 __golang runtime_getitab(__int64 a1, abi_Type *a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime_convT64(_QWORD, _QWORD); weak
// __int64 __golang runtime_convTstring(_QWORD); weak
// __int64 __golang runtime_convTslice(_QWORD, _QWORD, _QWORD); weak
__int64 *runtime_getStaticuint64s();
__int64 *__golang runtime_mallocgc(__int64 (*a1)(void), unsigned __int64 a2, __int64 a3, void (__golang *a4)(), __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 *a9, double a10);
// __int64 __golang internal_runtime_maps_newobject(_QWORD); weak
// __int64 reflect_unsafe_New(void); weak
// __int64 runtime_newarray(void); weak
__int64 __golang internal_runtime_maps_newarray(_QWORD, _QWORD); // weak
retval_1065820 __golang internal_runtime_maps_mapKeyError(__int64 a1, _QWORD *a2);
// __int64 __golang runtime_makemap_small(_QWORD); weak
_QWORD *__golang runtime_makemap(__int64 a1, signed __int64 a2, _QWORD *a3);
__int64 __golang reflect_maplen(__int64 a1);
// __int64 __golang runtime_typedmemmove(_QWORD, _QWORD, _QWORD); weak
__int64 __golang reflect_typedmemmove(__int64 a1, __int64 a2, __int64 a3);
__int64 __golang internal_runtime_maps_typedmemmove(_QWORD, _QWORD, _QWORD); // weak
// __int64 __golang runtime_typedslicecopy(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
__int64 __golang reflect_typedmemclr(__int64 a1, __int64 a2);
__int64 __golang runtime_memclrHasPointers(_OWORD *a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, _QWORD *a9);
// retval_1065B60 __golang runtime_findObject(_QWORD, _QWORD, _QWORD); weak
// __int64 __golang reflect_verifyNotInHeapPtr(_QWORD); weak
__int64 __golang internal_godebug_registerMetric(const __m128i *a1, unsigned __int64 a2, __int64 a3);
__int64 __golang runtime_blockevent(__int64 a1, __int64 a2);
__int64 __golang sync_event(__int64 result, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 internal_poll_runtime_pollServerInit(); // weak
retval_1066080 __golang internal_poll_runtime_pollOpen(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang internal_poll_runtime_pollClose(runtime_pollDesc *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang internal_poll_runtime_pollReset(__int64 a1, __int64 a2);
__int64 __golang internal_poll_runtime_pollWait(__int64 a1, __int64 a2);
__int64 __golang internal_poll_runtime_pollUnblock(runtime_pollDesc *a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// retval_10665E0 __golang runtime_gopanic(_QWORD, _QWORD); weak
void __golang sync_fatal(__int64 (*a1)(void), __int64 (*a2)(void));
void __golang internal_runtime_maps_fatal(__int64 (*a1)(void), __int64 (*a2)(void));
void __golang __noreturn internal_sync_throw(__int64 (*a1)(void), __int64 (*a2)(void), __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang internal_sync_fatal(__int64 (*a1)(void), __int64 (*a2)(void));
__int64 __golang runtime_throw(__int64 (*a1)(void), __int64 (*a2)(void), __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang __noreturn runtime_gopark(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, _QWORD *a9);
// __int64 __golang runtime_wakep(_QWORD); weak
unsigned __int64 __golang runtime_entersyscall(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, char a10);
__int64 __golang runtime_entersyscallblock(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, char a10);
bool __golang runtime_exitsyscall(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, char a10);
__int64 __golang sync_runtime_procUnpin(); // weak
_BOOL8 __golang internal_sync_runtime_canSpin(__int64 a1);
__int64 __golang internal_sync_runtime_doSpin(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_rand(_QWORD, _QWORD); // weak
__int64 internal_runtime_maps_rand(void); // weak
retval_1067380 __golang syscall_runtime_envs(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, int a7, int a8, int a9);
retval_1067440 __golang os_runtime_args(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, int a7, int a8, int a9);
__int64 __golang internal_godebug_setUpdate(__int64 a1);
retval_1067580 __golang internal_godebug_setNewIncNonDefault(__int64 a1);
__int64 __golang runtime_debug_SetTraceback(__int64 a1, __int64 a2);
// __int64 __golang reflect_resolveNameOff(_QWORD, _QWORD); weak
// __int64 __golang reflect_resolveTypeOff(_QWORD, _QWORD); weak
__int64 __golang reflect_resolveTextOff(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9);
__int64 __golang reflect_addReflectOff(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_1067980 __golang internal_poll_runtime_Semacquire(__int64 a1);
__int64 __golang sync_runtime_Semrelease(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9);
retval_1067A00 __golang internal_sync_runtime_SemacquireMutex(__int64 a1, __int64 a2, __int64 a3);
retval_1067A60 __golang sync_runtime_SemacquireRWMutexR(__int64 a1, __int64 a2, __int64 a3);
__int64 __golang internal_poll_runtime_Semrelease(int a1, __int64 a2, __int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
__int64 __golang internal_sync_runtime_Semrelease(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9);
__int64 __golang sync_runtime_notifyListCheck(__int64 result);
__int64 __golang internal_sync_runtime_nanotime(__int64 a1);
unsigned __int64 __golang os_sigpipe(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __noreturn runtime_sigpanic(void); // weak
// __int64 __golang runtime_makeslice(_QWORD, _QWORD); weak
// retval_1068120 __golang runtime_growslice(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
void __golang runtime_morestackc(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_10688E0 __golang runtime_gostring(const __m128i *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
char __golang reflect_memmove(__m128i *a1, const __m128i *a2, unsigned __int64 a3);
char __golang runtime_moduledataverify1(unsigned int **a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, unsigned int a6, unsigned int *a7, int a8, int a9);
retval_1069200 __golang runtime_findfunc(void *a1, __int64 j, __int64 a3, __int64 a4, __int64 a5, unsigned int *textsectionmap, unsigned int *a7, unsigned __int64 a8, __int64 a9);
retval_10693A0 __golang runtime_funcline1(unsigned int *a1, _QWORD *a2, unsigned __int64 a3, char a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_10694A0 __golang runtime_newInlineUnwinder(__int64 a1, _QWORD *a2, unsigned __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_1069560 __golang syscall_syscall(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_1069600 __golang syscall_syscallX(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_10696A0 __golang syscall_syscall6(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_1069760 __golang syscall_syscall6X(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_1069820 __golang syscall_syscallPtr(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_10698C0 __golang syscall_rawSyscall(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime_exit(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, char); weak
// retval_1069980 __golang runtime_walltime(); weak
// __int64 __golang runtime_fcntl(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD); weak
retval_1069A60 __golang time_runtimeNow();
__int64 __golang time_runtimeNano(__int64 a1);
// __int64 __golang runtime_write(_QWORD, _QWORD, _QWORD); weak
retval_1069B80 time_now();
__int64 __golang runtime_traceAdvance(unsigned __int8 a1);
// __int64 __golang runtime_callers(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
__int64 __golang runtime_mapinitnoop(_QWORD); // weak
__int64 __golang gogo(__int64 a1, __int64 a2);
__int64 __golang callRet(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, int a6, int a7, int a8, int a9);
void __golang gosave_systemstack_switch(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, char a10);
void __golang setg_gcc(__int64 a1, __int64 a2, __int64 a3, unsigned __int64 a4);
unsigned __int64 __golang aeshashbody(const __m128i *a1, unsigned __int64 a2, unsigned __int64 a3);
// unsigned __int64 __usercall __spoils<rdx,rcx,rbx,rdi,rsi,r8,r9,r10,r12,r13,xmm0,xmm1,xmm2,xmm3,xmm4,xmm5,xmm6,xmm7,xmm8,xmm9,xmm10,xmm11,xmm12,xmm13,xmm14> gcWriteBarrier@<r11>();
void __gostk debugCall32(char a1);
void __gostk debugCall64(char a1);
void __gostk debugCall128(char a1);
void __gostk debugCall256(char a1);
void __gostk debugCall512(char a1);
void __gostk debugCall1024(char a1);
void __gostk debugCall2048(char a1);
void __gostk debugCall4096(char a1);
void __gostk debugCall8192(char a1);
void __gostk debugCall16384(char a1);
void __gostk debugCall32768(char a1);
void __gostk debugCall65536(char a1);
__int64 runtime_asminit(void); // weak
__int64 runtime_mstart(void); // weak
__int64 __golang runtime_gogo(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10);
void __golang __noreturn runtime_mcall(void (__golang **rax0)(_QWORD *), __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a1);
void __noreturn runtime_systemstack_switch(); // weak
unsigned __int64 __golang runtime_systemstack(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 (**a10)(void));
void __golang __noreturn runtime_switchToCrashStack0(__int64 (__fastcall **a1)(__int64, __int64, _QWORD), __int64 a2, __int64 a3, __int64 a4, __int64 a5);
void __golang __noreturn runtime_morestack(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, unsigned int *a6, unsigned int *a7, unsigned __int64 a8, __int64 a9, __int64 a10, char a11);
void __golang __noreturn runtime_morestack_noctxt(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, unsigned int *a6, unsigned int *a7, unsigned __int64 a8, __int64 a9);
__int64 __golang runtime_spillArgs(__int64 result, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, double a17, double a18, double a19, double a20, double a21, double a22, double a23, double a24);
retval_106B760 __golang runtime_unspillArgs();
__int64 __golang runtime_reflectcall(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, retval_106BA60 (__golang **a11)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double), const void *a12, __int64 a13, __int64 a14, __int64 a15);
__int64 __golang runtime_call16(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, retval_106BA60 (__golang **a11)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double), const void *a12, unsigned int a13, unsigned int a14);
__int64 __golang runtime_call32(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, retval_106BB00 (__golang **a11)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double), const void *a12, unsigned int a13, unsigned int a14);
__int64 __golang runtime_call64(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, retval_106BBA0 (__golang **a11)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double), const void *a12, unsigned int a13, unsigned int a14);
__int64 __golang runtime_call128(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, retval_106BC55 (__golang **a11)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double), const void *a12, unsigned int a13, unsigned int a14);
__int64 __golang runtime_call256(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, retval_106BD1B (__golang **a11)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double), const void *a12, unsigned int a13, unsigned int a14);
__int64 __golang runtime_call512(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, retval_106BDFB (__golang **a11)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double), const void *a12, unsigned int a13, unsigned int a14);
__int64 __golang runtime_call1024(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, retval_106BEDB (__golang **a11)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double), const void *a12, unsigned int a13, unsigned int a14);
__int64 __golang runtime_call2048(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, retval_106BFBB (__golang **a11)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double), const void *a12, unsigned int a13, unsigned int a14);
__int64 __golang runtime_call4096(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, retval_106C0A3 (__golang **a11)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double), const void *a12, unsigned int a13, unsigned int a14);
__int64 __golang runtime_call8192(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, retval_106C183 (__golang **a11)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double), const void *a12, unsigned int a13, unsigned int a14);
__int64 __golang runtime_call16384(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, retval_106C263 (__golang **a11)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double), const void *a12, unsigned int a13, unsigned int a14);
__int64 __golang runtime_call32768(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, retval_106C343 (__golang **a11)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double), const void *a12, unsigned int a13, unsigned int a14);
__int64 __golang runtime_call65536(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, retval_106C423 (__golang **a11)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double), const void *a12, unsigned int a13, unsigned int a14);
__int64 __golang runtime_call131072(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, retval_106C503 (__golang **a11)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double), const void *a12, unsigned int a13, unsigned int a14);
__int64 __golang runtime_call262144(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, retval_106C5E3 (__golang **a11)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double), const void *a12, unsigned int a13, unsigned int a14);
__int64 __golang runtime_call524288(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, retval_106C6C3 (__golang **a11)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double), const void *a12, unsigned int a13, unsigned int a14);
__int64 __golang runtime_call1048576(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64, __int64, __int64, _DWORD, _DWORD, __int64, __int64); // weak
__int64 __golang runtime_call2097152(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64, __int64, __int64, _DWORD, _DWORD, __int64, __int64); // weak
__int64 __golang runtime_call4194304(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64, __int64, __int64, _DWORD, _DWORD, __int64, __int64); // weak
__int64 __golang runtime_call8388608(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64, __int64, __int64, _DWORD, _DWORD, __int64, __int64); // weak
__int64 __golang runtime_call16777216(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64, __int64, __int64, _DWORD, _DWORD, __int64, __int64); // weak
__int64 __golang runtime_call33554432(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64, __int64, __int64, _DWORD, _DWORD, __int64, __int64); // weak
__int64 __golang runtime_call67108864(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64, __int64, __int64, _DWORD, _DWORD, __int64, __int64); // weak
__int64 __golang runtime_call134217728(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64, __int64, __int64, _DWORD, _DWORD, __int64, __int64); // weak
__int64 __golang runtime_call268435456(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64, __int64, __int64, _DWORD, _DWORD, __int64, __int64); // weak
__int64 __golang runtime_call536870912(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64, __int64, __int64, _DWORD, _DWORD, __int64, __int64); // weak
__int64 __golang runtime_call1073741824(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64, __int64, __int64, _DWORD, _DWORD, __int64, __int64); // weak
__int64 __golang runtime_procyield(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, int a10);
__int64 __golang runtime_publicationBarrier(_QWORD); // weak
__int64 __golang runtime_asmcgocall_no_g(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 (__fastcall *a10)(__int64, __int64, _QWORD *, __int64), __int64 a11);
__int64 __golang runtime_asmcgocall_landingpad(__int64 (__fastcall *a1)(__int64), __int64 a2);
retval_106D180 __golang runtime_asmcgocall(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 (__fastcall *a10)(__int64), __int64 a11);
void __gostk runtime_setg(unsigned __int64 a1);
void __golang __noreturn runtime_abort(_QWORD); // weak
retval_106D280 __golang runtime_cputicks(unsigned __int64 a1);
unsigned __int64 __golang runtime_memhash(const __m128i *a1, unsigned __int64 a2, unsigned __int64 a3);
unsigned __int64 __golang runtime_strhash(__int64 a1, unsigned __int64 a2);
__int64 __golang runtime_memhash32(unsigned int *a1, __int64 a2);
__int64 __golang runtime_memhash64(signed __int64 *a1, unsigned __int64 a2);
bool __gostk runtime_checkASM();
__int64 runtime_return0(void); // weak
void __golang __noreturn runtime_goexit(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __noreturn runtime_sigpanic0(); // weak
void runtime_gcWriteBarrier1();
void runtime_gcWriteBarrier2();
void runtime_gcWriteBarrier3();
void runtime_gcWriteBarrier4();
void runtime_gcWriteBarrier5();
void runtime_gcWriteBarrier6();
void runtime_gcWriteBarrier7();
void runtime_gcWriteBarrier8();
retval_106D500 __golang runtime_debugCallV2(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_debugCallPanicked(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, __int64 a11);
void __golang __noreturn runtime_panicIndex(int64 a1, _QWORD a2, signed __int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
void __golang __noreturn runtime_panicIndexU(int64 a1, __int64 a2, signed __int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
void __golang __noreturn runtime_panicSliceAlen(__int64 a1, __int64 a2, int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
void __golang __noreturn runtime_panicSliceAlenU(__int64 a1, __int64 a2, int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
void __golang __noreturn runtime_panicSliceAcap(__int64 a1, __int64 a2, int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
void __golang __noreturn runtime_panicSliceAcapU(__int64 a1, __int64 a2, int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
void __golang __noreturn runtime_panicSliceB(int64 a1, __int64 a2, signed __int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
void __golang __noreturn runtime_panicSliceBU(int64 a1, __int64 a2, signed __int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
void __golang __noreturn runtime_panicSlice3Alen(__int64 a1, signed __int64 a2, __int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
void __golang __noreturn runtime_panicSlice3C(int64 a1, __int64 a2, signed __int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
__int64 runtime_getfp(void); // weak
// _OWORD *__usercall runtime_duffzero@<rdi>();
retval_106DAA0 __golang runtime_duffcopy(__int64 a1, __int64 a2, __int64 a3, _OWORD *a4, __int128 *a5);
__int64 __golang runtime_memclrNoHeapPointers(_OWORD *a1, unsigned __int64 _RBX, double _XMM0_8);
char __golang runtime_memmove(__m128i *a1, const __m128i *a2, unsigned __int64 a3);
void __golang __noreturn runtime_asyncPreempt(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_106EA20 __golang runtime_sigprofNonGoWrapper(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang __noreturn runtime_exit_trampoline(__int64 a1, __int64 a2, __int64 a3, int *a4);
int __golang runtime_open_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
ssize_t __golang runtime_write_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
int __golang runtime_madvise_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
uint64_t runtime_nanotime_trampoline();
int __fastcall runtime_walltime_trampoline(timespec *__tp);
int __golang runtime_sigaction_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
int __golang runtime_sigprocmask_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
int __golang runtime_sigaltstack_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
int runtime_raiseproc_trampoline();
__int64 __golang runtime_sigfwd(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 (__fastcall *a10)(_QWORD, __int64, __int64), unsigned int a11, __int64 a12, __int64 a13);
void __golang runtime_sigtramp(__int64 a1, __int64 a2, __int64 a3, unsigned int a4, __int64 a5);
void __golang runtime_cgoSigtramp(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5);
void *__golang runtime_mmap_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
int __golang runtime_munmap_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
int __golang runtime_usleep_trampoline(__int64 a1, __int64 a2, __int64 a3, useconds_t *a4);
void runtime_settls();
int __golang runtime_sysctl_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
int runtime_kqueue_trampoline();
int __golang runtime_kevent_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
int __golang runtime_fcntl_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
retval_106EFC0 __golang runtime_mstart_stub(__int64 a1, __int64 a2, __int64 a3, unsigned __int64 *a4);
int __golang runtime_pthread_attr_init_trampoline(__int64 a1, __int64 a2, __int64 a3, pthread_attr_t **a4);
int __golang runtime_pthread_attr_getstacksize_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
int __golang runtime_pthread_attr_setdetachstate_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
int __golang runtime_pthread_create_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
int __golang runtime_raise_trampoline(__int64 a1, __int64 a2, __int64 a3, int *a4);
int __golang runtime_pthread_mutex_init_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
int __golang runtime_pthread_mutex_lock_trampoline(__int64 a1, __int64 a2, __int64 a3, pthread_mutex_t **a4);
int __golang runtime_pthread_mutex_unlock_trampoline(__int64 a1, __int64 a2, __int64 a3, pthread_mutex_t **a4);
int __golang runtime_pthread_cond_init_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
int __golang runtime_pthread_cond_wait_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
int __golang runtime_pthread_cond_timedwait_relative_np_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
int __golang runtime_pthread_cond_signal_trampoline(__int64 a1, __int64 a2, __int64 a3, pthread_cond_t **a4);
pthread_t runtime_pthread_self_trampoline();
int __golang runtime_pthread_kill_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
xpc_object_t runtime_osinit_hack_trampoline();
void __golang runtime_arc4random_buf_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
__int64 __golang runtime_syscall(__int64 a1, __int64 a2, __int64 a3, _QWORD *a4);
__int64 __golang runtime_syscallX(__int64 a1, __int64 a2, __int64 a3, _QWORD *a4);
__int64 __golang runtime_syscallPtr(__int64 a1, __int64 a2, __int64 a3, _QWORD *a4);
__int64 __golang runtime_syscall6(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
__int64 __golang runtime_syscall6X(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
int runtime_issetugid_trampoline();
string __golang runtime__ptr_lockRank_String(_ptr_runtime_lockRank);
string __golang runtime__ptr_plainError_Error(_ptr_runtime_plainError);
string __golang runtime__ptr_waitReason_String(_ptr_runtime_waitReason);
string __golang runtime__ptr_errorString_Error(_ptr_runtime_errorString);
string __golang runtime__ptr_errorAddressString_Error(_ptr_runtime_errorAddressString);
string __golang runtime__ptr_boundsError_Error(_ptr_runtime_boundsError);
__int64 __golang runtime_metricReader_compute_fm(__int64 a1, _QWORD *a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10);
__int64 __golang runtime__ptr_itabTableType_add_fm(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10);
unsigned __int128 __golang runtime_debugCallCheck_0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10);
void __golang __noreturn runtime_debugCallWrap_0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 (*a10)(void));
__int64 __golang runtime_reflectcallmove_0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, int a6, int a7, int a8, int a9, __int64 a10, __int64 a11, __int64 a12, __int64 a13, __int64 a14);
unsigned __int64 __golang runtime_wbBufFlush_0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 runtime_osinit_0(); // weak
void __golang __noreturn runtime_asyncPreempt2_0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __gostk __noreturn runtime_badmcall_0(__int64 a1);
void __gostk __noreturn runtime_badmcall2_0(__int64 a1);
void __noreturn runtime_badreflectcall_0(void); // weak
void __golang __noreturn runtime_badmorestackg0_0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, int a6, int a7, int a8, int a9);
__int64 runtime_badmorestackgsignal_0(void); // weak
void runtime_schedinit_0();
__int64 runtime_mstart0_0(void); // weak
void __golang __noreturn runtime_goexit1_0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
unsigned __int64 __golang runtime_newproc_0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 (*a10)(void));
__int64 __golang runtime_args_0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, unsigned int a10, __int64 a11);
void __golang __noreturn runtime_check_0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_sigprofNonGo_0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, unsigned int a10, __int64 a11, __int64 a12);
__int64 __golang runtime_newstack_0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, unsigned int *a6, unsigned int *a7, unsigned __int64 a8, __int64 a9);
void __golang __noreturn runtime_morestackc_0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_badsystemstack_0(_QWORD, _QWORD, _QWORD, _QWORD); // weak
__int64 __golang runtime_reflectcall_0(__int64 a1, retval_106BA60 (__golang **a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double), const void *a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, char a10);
__int64 __golang runtime_asmcgocall_0(__int64 (__fastcall *a1)(__int64), __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_106FC20 __golang runtime_fcntl_0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9);
unsigned int __gostk runtime_write_0(__int64 a1, __int64 a2, unsigned int a3);
bool __golang type__eq_runtime_Frame(__int64 a1, __int64 a2);
bool __golang type__eq_runtime_modulehash(__int64 a1, __int64 a2);
bool __golang type__eq_runtime_bitvector(__int64 a1, __int64 a2);
bool __golang type__eq_runtime__func(const __m128i *a1, const __m128i *a2);
__int64 type__eq_runtime_PanicNilError(); // weak
bool __golang type__eq_runtime_boundsError(__int64 a1, __int64 a2);
bool __golang type__eq_runtime__panic(__int64 a1, __int64 a2);
bool __golang type__eq_runtime_mcache(const __m128i *a1, const __m128i *a2);
bool __golang type__eq_runtime_mspan(__int64 a1, __int64 a2);
bool __golang type__eq_runtime_mSpanList(_QWORD *a1, _QWORD *a2);
bool __golang type__eq_runtime_gcBits(_BYTE *a1, _BYTE *a2);
bool __golang type__eq_runtime_special(__int64 a1, __int64 a2);
bool __golang type__eq_struct__runtime_gList_runtime_n_int32_(__int64 a1, __int64 a2);
bool __golang type__eq_runtime_hchan(__int64 a1, __int64 a2);
bool __golang type__eq_runtime_pTraceState(const __m128i *a1, const __m128i *a2);
__int64 __golang type__eq_runtime_traceSchedResourceState(const __m128i *a1, const __m128i *a2);
__int64 type__eq_runtime_notInHeap(); // weak
bool __golang type__eq_runtime_limiterEvent(_QWORD *a1, _QWORD *a2);
bool __golang type__eq_runtime_gcWork(const __m128i *a1, const __m128i *a2);
bool __golang type__eq_runtime_workbuf(const __m128i *a1, const __m128i *a2);
bool __golang type__eq_runtime_mTraceState(const __m128i *a1, const __m128i *a2);
bool __golang type__eq_runtime_traceBuf(const __m128i *a1, const __m128i *a2);
bool __golang type__eq_runtime_mOS(__int64 a1, __int64 a2);
__int64 __golang type__eq_runtime_gTraceState(const __m128i *a1, const __m128i *a2);
bool __golang type__eq_runtime_errorAddressString(__int64 a1, __int64 a2);
bool __golang type__eq_runtime_untracedG_4(const __m128i *a1, const __m128i *a2);
bool __golang type__eq_runtime_TypeAssertionError(__int64 a1, __int64 a2);
bool __golang type__eq_runtime_piController(__int64 a1, __int64 a2);
bool __golang type__eq__2_runtime_Frame(__int64 a1, __int64 a2);
retval_1070820 __golang sync_atomic__ptr_Uint32_Store(volatile __int32 *a1, __int32 a2);
__int64 __golang sync_atomic_SwapUintptr(volatile __int64 *a1, __int64 a2);
bool __golang sync_atomic_CompareAndSwapUintptr(volatile signed __int64 *a1, signed __int64 a2, signed __int64 a3);
retval_1070880 __golang sync_atomic_StoreUintptr(volatile __int64 *a1, __int64 a2);
bool __golang type__eq_sync_atomic_Bool(_DWORD *a1, _DWORD *a2);
bool __golang type__eq_sync_atomic_Uint32(_DWORD *a1, _DWORD *a2);
bool __golang type__eq_sync_atomic_Uint64(_QWORD *a1, _QWORD *a2);
// string __golang internal_reflectlite_rtype_String(reflectlite_rtype);
// string __golang internal_reflectlite_rtype_Name(reflectlite_rtype);
uintptr __golang internal_reflectlite_elem(reflectlite_rtype a1);
// reflectlite_Type __golang internal_reflectlite_rtype_Elem(reflectlite_rtype);
signed __int64 __golang internal_reflectlite_rtype_Len(reflectlite_rtype);
bool __golang internal_reflectlite_rtype_Comparable(reflectlite_rtype);
bool __golang internal_reflectlite__ptr_rtype_Comparable(_ptr_reflectlite_rtype);
reflectlite_Type __golang internal_reflectlite__ptr_rtype_Elem(_ptr_reflectlite_rtype);
signed __int64 __golang internal_reflectlite__ptr_rtype_Len(_ptr_reflectlite_rtype);
string __golang internal_reflectlite__ptr_rtype_Name(_ptr_reflectlite_rtype);
string __golang internal_reflectlite__ptr_rtype_String(_ptr_reflectlite_rtype);
string __golang errors__ptr_errorString_Error(_ptr_errors_errorString);
__int64 __golang errors_Is(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
__int64 __golang errors_is(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, double a6);
retval_1071260 __golang unicode_utf8_DecodeRune(unsigned __int8 *a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, int a8, int a9);
retval_1071400 __golang unicode_utf8_DecodeRuneInString(unsigned __int8 *a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, int a8, int a9);
retval_10715A0 __golang unicode_utf8_encodeRuneNonASCII(__int64 a1, unsigned __int64 a2, __int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
__int64 __golang unicode_utf8_appendRuneNonASCII(__int64 result, __int64 a2, unsigned __int64 a3, int a4);
// __int64 __golang strconv__ptr_decimal_Assign(_QWORD, _QWORD); weak
// __int64 __golang strconv__ptr_decimal_Shift(_QWORD, _QWORD); weak
// __int64 __golang strconv__ptr_decimal_Round(_QWORD, _QWORD); weak
retval_1071FC0 __golang strconv_genericFtoa(__int64 r0, __int64 a2, unsigned __int64 r2, unsigned __int8 a4, __int64 a5, __int64 a6, double a7);
__int64 __golang strconv_bigFtoa(int a1, int a2, int a3, __int64 a4, unsigned __int8 a5, unsigned __int8 a6, __int64 a7, __int64 a8, _QWORD *a9);
// __int64 __golang strconv_formatDigits(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64, __int64, __int64, __int64, __int64); weak
// __int64 __golang strconv_roundShortest(_QWORD, _QWORD, _QWORD, _QWORD); weak
__int64 __golang strconv_fmtE(__int64 result, __int64 r1, unsigned __int64 r2, char a4, char *a5, __int64 a6, unsigned __int64 a7, __int64 a8, __int64 a9, __int64 a10, char a11);
__int64 __golang strconv_fmtF(__int64 result, __int64 r1, unsigned __int64 r2, unsigned __int64 a4, const __m128i *a5, unsigned __int64 a6, unsigned __int64 a7, __int64 a8, __int64 a9, __int64 a10);
// __int64 __fastcall strconv_fmtB(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
__int64 __golang strconv_fmtX(__int64 r0, __int64 r1, unsigned __int64 r2, __int64 a4, unsigned __int8 a5, char a6, __int64 a7, __int64 a8, _QWORD *a9);
unsigned __int64 __golang strconv_ryuFtoaFixed32(unsigned __int64 result, unsigned int a2, __int64 a3, signed __int64 a4);
unsigned __int64 __golang strconv_ryuFtoaFixed64(unsigned __int64 result, unsigned __int64 a2, __int64 a3, signed __int64 a4);
unsigned __int64 __golang strconv_formatDecimal(char *a1, unsigned __int64 a2, char a3, char *a4, unsigned __int64 a5, int a6, unsigned __int64 a7, const char *a8, int a9);
// __int64 __golang strconv_ryuFtoaShortest(_QWORD, _QWORD, _QWORD, _QWORD); weak
__int64 *__golang strconv_ryuDigits32(__int64 *result, unsigned int a2, unsigned int a3, unsigned int a4, bool a5, __int64 a6, __int64 a7, __int64 a8, int a9);
// retval_10752C0 __golang strconv_mult64bitPow10(_QWORD, _QWORD, _QWORD); weak
// retval_10753A0 __golang strconv_mult128bitPow10(_QWORD, _QWORD, _QWORD); weak
retval_10754C0 __golang strconv_FormatInt(__int64 a1, unsigned __int64 a2, __int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
retval_10755A0 __golang strconv_formatBits(unsigned __int64 r0, __int64 a2, unsigned __int64 r2, unsigned __int64 a4, unsigned __int64 a5, char a6, char a7);
__m128i *__golang strconv_appendQuotedWith(__m128i *result, unsigned __int64 a2, unsigned __int64 a3, unsigned __int8 *a4, unsigned __int64 a5, __int64 a6, __int64 a7, unsigned int a8);
// __int64 __fastcall strconv_appendEscapedRune(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
// __int64 __golang strconv_IsPrint(_QWORD); weak
// void __golang internal_sync__ptr_Mutex_lockSlow(_ptr_sync_Mutex_0);
// __int64 __golang internal_sync__ptr_Mutex_unlockSlow(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
__int64 __golang sync__ptr_Once_doSlow(__int64 a1, void (**a2)(void));
// __int64 __golang sync__ptr_Once_doSlow_deferwrap2(int, int, int, int, int, int, int, int, int, char); weak
// __int64 __golang sync__ptr_Once_doSlow_deferwrap1(int, int, int, int, int, int, int, int, int, char); weak
// __int64 __golang sync__ptr_Pool_Put(_QWORD, _QWORD, _QWORD); weak
// interface_ __golang sync__ptr_Pool_Get(_ptr_sync_Pool);
retval_1077140 __golang sync__ptr_Pool_getSlow(__int64 *a1, unsigned __int64 a2);
// __int64 __golang sync__ptr_poolDequeue_pushHead(_QWORD); weak
// retval_1077760 __golang sync__ptr_poolDequeue_popHead(_QWORD); weak
__int64 __golang sync__ptr_poolChain_pushHead(sync_poolChainElt **a1);
retval_1077BA0 __golang sync__ptr_poolChain_popHead(__int64 *a1);
// __int64 __golang sync__ptr_poolChain_popTail(_QWORD); weak
__int64 __golang internal_sync__ptr_HashTrieMap_go_shape_interface__comma_go_shape_interface___iter(__int64 a1, __int64 a2, __int64 a3, unsigned __int8 (__golang **a4)(_QWORD, _QWORD, _QWORD, _QWORD));
__int64 __golang internal_sync__ptr_HashTrieMap_go_shape_interface__comma_go_shape_interface___Range(__int64 a1, __int64 a2, unsigned __int8 (__golang **a3)(_QWORD, _QWORD, _QWORD, _QWORD));
retval_10780E0 __golang internal_sync__ptr_HashTrieMap_go_shape_interface__comma_go_shape_interface___expand(__int64 a1, __int64 a2, __int64 a3, __int64 a4, unsigned __int64 a5, __int64 a6, sync_indirect_go_shape_interface__comma_go_shape_interface__ *a7);
retval_1078320 __golang internal_sync__ptr_HashTrieMap_go_shape_interface__comma_go_shape_interface___LoadOrStore(__int64 a1, __int64 a2, void *a3, void *a4, __int64 a5, __int64 a6);
// __int64 __golang internal_sync__ptr_HashTrieMap_go_shape_interface__comma_go_shape_interface___LoadOrStore_deferwrap1(int, int, int, int, int, int, int, int, int, char); weak
retval_1078A20 __golang internal_sync__ptr_HashTrieMap_go_shape_interface__comma_go_shape_interface___Load(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
__int64 __golang internal_sync__ptr_HashTrieMap_go_shape_interface__comma_go_shape_interface___initSlow(__int64 a1, __int64 a2);
// __int64 __golang internal_sync__ptr_HashTrieMap_go_shape_interface__comma_go_shape_interface___initSlow_deferwrap1(int, int, int, int, int, int, int, int, int, char); weak
__int64 __golang type__eq_sync_Mutex(_DWORD *a1, _DWORD *a2);
bool __golang type__eq_sync_atomic_Pointer_sync_poolChainElt_(_QWORD *a1, _QWORD *a2);
bool __golang type__eq_sync_poolLocal(const __m128i *a1, const __m128i *a2);
__int64 __golang type__eq_sync_poolLocalInternal(_QWORD *a1, _QWORD *a2);
bool __golang type__eq_sync_poolChain(_QWORD *a1, _QWORD *a2);
bool __golang type__eq_sync_atomic_Pointer_internal_sync_indirect_interface__comma_interface___(_QWORD *a1, _QWORD *a2);
__int64 __golang type__eq_internal_sync_indirect_interface__comma_interface__(__int64 a1, __int64 a2);
__int64 __golang type__eq_internal_sync_entry_interface__comma_interface__(__int64 a1, __int64 a2);
bool __golang type__eq_sync_atomic_Pointer_internal_sync_entry_interface__comma_interface___(_QWORD *a1, _QWORD *a2);
__int64 __golang type__eq__16_sync_atomic_Pointer_internal_sync_node_interface__comma_interface___(__int64 a1, __int64 a2);
bool __golang type__eq_sync_atomic_Pointer_internal_sync_node_interface__comma_interface___(_QWORD *a1, _QWORD *a2);
__int64 __golang type__eq_sync_Once(_DWORD *a1, _DWORD *a2);
__int64 __golang type__eq_internal_sync_entry_go_shape_interface__comma_go_shape_interface__(__int64 a1, __int64 a2);
bool __golang type__eq_sync_atomic_Pointer_internal_sync_entry_go_shape_interface__comma_go_shape_interface___(_QWORD *a1, _QWORD *a2);
__int64 __golang type__eq_internal_sync_indirect_go_shape_interface__comma_go_shape_interface__(__int64 a1, __int64 a2);
__int64 __golang type__eq__16_sync_atomic_Pointer_go_shape_struct__internal_sync_isEntry_bool__(__int64 a1, __int64 a2);
bool __golang type__eq_sync_atomic_Pointer_go_shape_struct__internal_sync_isEntry_bool__(_QWORD *a1, _QWORD *a2);
void unicode_init();
// retval_10795C0 __golang internal_itoa_Itoa(_QWORD, _QWORD, _QWORD); weak
void reflect_init();
__int64 __golang reflect__ptr_abiSeq_addArg(__int64 *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, int a8, _QWORD *a9);
// retval_1079B60 __golang reflect__ptr_abiSeq_addRcvr(_QWORD); weak
__int64 __golang reflect__ptr_abiSeq_regAssign(_QWORD *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, int a7, int a8, int a9);
__int64 __golang reflect__ptr_abiSeq_assignIntN(_QWORD *a1, __int64 a2, __int64 a3, unsigned __int64 a4, unsigned __int8 a5);
retval_107A620 __golang reflect_newAbiDesc(__int64 a1, __int64 a2);
// __int64 __fastcall reflect_intFromReg(_QWORD, _QWORD, _QWORD, _QWORD); weak
// __int64 __golang reflect_intToReg(_QWORD, _QWORD, _QWORD, _QWORD); weak
// __int64 __golang reflect_moveMakeFuncArgPtrs(_QWORD, _QWORD); weak
void __golang reflect_mapIterStart(__int64 a1, _QWORD *a2, __int64 *a3);
void __golang reflect_mapIterNext(__int64 *a1);
__int64 __golang reflect__ptr_MapIter_Key(_QWORD *a1);
__int64 __golang reflect__ptr_MapIter_Value(_QWORD *a1);
bool __golang reflect__ptr_MapIter_Next(__int64 *a1);
// void __golang reflect_flag_panicNotMap(reflect_flag);
retval_107B7C0 __golang reflect__ptr_rtype_exportedMethods(__int64 a1);
uintptr __golang reflect_elem(reflect_rtype *a1);
// string __golang reflect_ChanDir_String(reflect_ChanDir);
__int64 *__golang reflect__ptr_structType_Field(abi_Name *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, size_t len);
retval_107BBC0 __golang reflect_funcLayout(reflect_rtype *a1, reflect_rtype *a2);
// __int64 __golang reflect_funcLayout_func1(); weak
int *__golang reflect_addTypeBits(int *result, unsigned __int64 a2, __int64 a3, int a4, int a5, int a6, __int64 a7, int a8, _QWORD *a9);
__int64 __golang reflect_packEface(__int64 result, __int64 a2, __int16 a3);
// void __golang reflect_Value_panicNotBool(reflect_Value);
retval_107CD80 __golang reflect_Value_bytesSlow(__int64 a1, __int64 a2, __int16 a3, __int64 r3, __int64 a5, __int64 r5, __int64 r6, __int64 r7);
retval_107CF80 __golang reflect_methodReceiver(__int64 a1, __int64 a2, __int64 a3, __int64 *a4, __int64 a5, unsigned __int64 a6);
__int64 __golang reflect_callMethod(unsigned __int64 *a1, __int64 a2, _BYTE *a3, _QWORD *a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, unsigned __int64 *a10);
retval_107E2A0 __golang reflect_Value_Elem(abi_Type *a1, _QWORD *a2, char a3);
__int64 __golang reflect_Value_Field(__int64 a1, __int64 a2, char a3, unsigned __int64 a4);
// retval_107E580 __golang reflect_Value_Index(_QWORD, _QWORD, _QWORD); weak
signed __int64 __golang reflect_Value_lenNonSlice(reflect_Value);
// __int64 __golang reflect_copyVal(_QWORD, _QWORD); weak
// signed __int64 __golang reflect_Value_NumField(reflect_Value);
uintptr __golang reflect_Value_Pointer(reflect_Value);
string __golang reflect_Value_stringNonString(reflect_Value);
reflect_Type __golang reflect_Value_typeSlow(reflect_Value);
_ptr_abi_Type __golang reflect_Value_abiTypeSlow(reflect_Value);
retval_107F0A0 __golang reflect_Value_UnsafePointer(_QWORD *a1, _QWORD *a2, __int16 a3);
bool __golang reflect_Value_Comparable(reflect_Value);
// string __golang reflect__ptr_rtype_String(_ptr_reflect_rtype);
reflect_Kind __golang reflect__ptr_rtype_Kind(_ptr_reflect_rtype);
bool __golang reflect__ptr_rtype_Comparable(_ptr_reflect_rtype);
// __int64 __golang reflect_valueInterface(_QWORD, _QWORD, _QWORD, _QWORD); weak
retval_107FA40 __golang reflect_methodValueCall(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, double a17, double a18, double a19, double a20, double a21, double a22, double a23, double a24, char a25);
__int64 __golang type__eq_reflect_Method(__int64 a1, __int64 a2);
string __golang reflect__ptr_Kind_String(_ptr_reflect_Kind);
string __golang reflect__ptr_ChanDir_String(_ptr_reflect_ChanDir);
bool __golang reflect__ptr_Value_Comparable(_ptr_reflect_Value);
reflect_Kind __golang reflect__ptr_Value_Kind(_ptr_reflect_Value);
signed __int64 __golang reflect__ptr_Value_Len(_ptr_reflect_Value);
string __golang reflect__ptr_Value_String(_ptr_reflect_Value);
__int64 __golang reflect_moveMakeFuncArgPtrs_0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, __int64 a11);
__int64 __golang reflect_callMethod_0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, unsigned __int64 *a10, __int64 a11, _BYTE *a12, _QWORD *a13);
bool __golang type__eq_reflect_ValueError(__int64 a1, __int64 a2);
bool __golang type__eq_reflect_makeFuncCtxt(__int64 a1, __int64 a2);
__int64 __golang type__eq_reflect_methodValue(__int64 a1, __int64 a2);
retval_1080040 __golang internal_fmtsort_Sort(abi_Type *data, void *a2, reflect_flag a3);
__int64 __golang internal_fmtsort_compare(abi_Type *data, double *a2, reflect_flag a3, abi_Type *a4, double *a5, reflect_flag a6);
// retval_1081160 __golang internal_fmtsort_nilCompare(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
__int64 __golang internal_fmtsort_Sort_func1(abi_Type *a1, double *a2, reflect_flag a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, abi_Type *a10, double *a11, reflect_flag a12);
__int64 __golang slices_stableCmpFunc_go_shape_struct__Key_reflect_Value_Value_reflect_Value__(__int64 result, __int64 a2, unsigned __int64 a3, __int128 *a4, __int64 a5, _QWORD *a6);
unsigned __int64 __golang slices_symMergeCmpFunc_go_shape_struct__Key_reflect_Value_Value_reflect_Value__(unsigned __int64 result, __int64 a2, unsigned __int64 a3, _OWORD *a4, int64 a5, char *a6, char *a7, _QWORD *a8);
__int64 __golang slices_rotateCmpFunc_go_shape_struct__Key_reflect_Value_Value_reflect_Value__(__int64 a1, __int64 a2, unsigned __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, _OWORD *i, __int64 a9);
retval_1082C60 __golang internal_bisect_New(const char *a1, unsigned __int64 a2);
// __int64 __golang internal_bisect__ptr_Matcher_stack(_QWORD, _QWORD, _QWORD); weak
retval_1083A20 __golang internal_bisect_printStack(__int64 a1, __int64 a2, unsigned __int64 a3, uintptr *a4, size_t a5, size_t a6);
__int64 __golang internal_bisect_Hash(__int64 a1, __int64 r1);
string __golang internal_bisect__ptr_parseError_Error(_ptr_bisect_parseError);
bool __golang type__eq_internal_bisect_cond(__int64 a1, __int64 a2);
bool __golang type__eq_sync_atomic_Pointer_internal_bisect_dedup_(_QWORD *a1, _QWORD *a2);
void __golang internal_godebug__ptr_Setting_IncNonDefault(_ptr_godebug_Setting);
void __golang internal_godebug__ptr_Setting_register(_ptr_godebug_Setting);
string __golang internal_godebug__ptr_Setting_Value(_ptr_godebug_Setting);
// __int64 __golang internal_godebug__ptr_Setting_Value_func1(); weak
godebug_setting *__golang internal_godebug_lookup(const __m128i *a1, char *a2);
__int64 __golang internal_godebug_update(__int64 a1, unsigned __int64 a2, __int64 a3, unsigned __int64 a4);
// __int64 __golang internal_godebug_update_func1(); weak
// __int64 __golang internal_godebug_update_deferwrap1(int, int, int, int, int, int, int, int, int, char); weak
__int64 __golang internal_godebug_parse(__int64 result, __int64 a2, unsigned __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, int a8, int a9);
void __golang internal_godebug__ptr_Setting_IncNonDefault_fm(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, char a10);
__int64 __golang sync_atomic__ptr_Uint64_Load_fm(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, char a10);
void __golang internal_godebug__ptr_Setting_register_fm(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, char a10);
bool __golang type__eq_internal_godebug_setting(__int64 a1, __int64 a2);
bool __golang type__eq_sync_atomic_Pointer_internal_godebug_value_(_QWORD *a1, _QWORD *a2);
bool __golang type__eq_internal_godebug_value(__int64 a1, __int64 a2);
bool __golang type__eq_internal_godebug_Setting(__int64 a1, __int64 a2);
// retval_1085DA0 __golang syscall_Getenv(_QWORD, _QWORD); weak
retval_1086040 __golang syscall_SetNonblock(__int64 a1, char a2);
__int64 syscall_init_0(); // weak
__int64 __golang syscall_adjustFileLimit(_QWORD *a1);
// retval_10861E0 __golang syscall_ByteSliceFromString(_QWORD, _QWORD); weak
// retval_10862A0 __golang syscall_Getwd(); weak
// retval_10863C0 __golang syscall_SysctlUint32(_QWORD, _QWORD); weak
retval_1086480 __golang syscall_nametomib(__int64 a1, __int64 a2);
// string __golang syscall_Errno_Error(syscall_Errno);
bool __golang syscall_Errno_Is(syscall_Errno, error);
// __int64 __golang syscall_Close(_QWORD); weak
// retval_10868C0 __golang syscall_Dup(); weak
retval_1086980 __golang syscall_Getrlimit(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __fastcall syscall_Open(_QWORD, _QWORD, _QWORD, _QWORD); weak
// retval_1086B80 __golang syscall_read(_QWORD, _QWORD, _QWORD, _QWORD); weak
// retval_1086C80 __golang syscall_Seek(_QWORD, _QWORD, _QWORD); weak
retval_1086D60 __golang syscall_setrlimit(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// retval_1086E20 __golang syscall_write(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
retval_10871A0 __golang syscall_Fstat(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// retval_10875A0 __golang syscall_fcntl(_QWORD, _QWORD, _QWORD); weak
// __int64 __golang syscall_closedir(_QWORD); weak
retval_1087740 __golang syscall_readdir_r(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_10878C0 __golang syscall_sysctl(__int64 *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
int __cdecl syscall_libc_getrlimit_trampoline(int, rlimit *);
int __cdecl syscall_libc_readdir_r_trampoline(DIR *, dirent *, dirent **);
int __cdecl syscall_libc_setrlimit_trampoline(int, const rlimit *);
int __cdecl syscall_libc_sysctl_trampoline(int *, u_int, void *, size_t *, void *, size_t);
int __cdecl syscall_libc_fstat64_trampoline(int, stat64 *);
string __golang syscall__ptr_Errno_Error(_ptr_syscall_Errno);
bool __golang syscall__ptr_Errno_Is(_ptr_syscall_Errno, error);
retval_1087EC0 __golang time_appendInt(__int64 r0, __int64 r1, unsigned __int64 r2, unsigned __int64 a4, __int64 a5, double a6, __int64 a7, __int64 a8, int a9, int a10);
// retval_10882A0 __golang time_appendNano(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
string __golang time_Time_String(time_Time);
string __golang time_Time_GoString(time_Time);
retval_1088C60 __golang time_Time_Format(__int64 a1, __int64 a2, __int64 a3, const __m128i *a4, unsigned __int64 a5);
__int64 __golang time_Time_AppendFormat(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, unsigned __int64 a6, const __m128i *a7, unsigned __int64 a8);
retval_1088FA0 __golang time_Time_appendFormat(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, unsigned __int64 a6, __int64 a7, unsigned __int64 a8);
retval_108B440 __golang time_quote(__int64 a1, signed __int64 a2);
__int64 __golang time_Time_appendFormatRFC3339(int a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, unsigned __int64 a6, char a7);
retval_108BD60 __golang time_preadn(__int64 a1, __int64 a2, unsigned __int64 a3, __int64 a4, __int64 a5);
retval_108BEC0 __golang time_absDays_date(__int64 a1);
retval_108BF80 __golang time_absDays_yearYday(__int64 a1);
// __int64 __golang time_Time_absSec(_QWORD, _QWORD); weak
// retval_108C180 __golang time_Time_locabs(); weak
retval_108C6E0 __golang time_tzset(_BYTE *a1, __int64 a2, __int64 a3, __int64 a4, int a5, __int64 a6, __int64 a7, int a8, int a9);
retval_108CC80 __golang time_tzsetName(_BYTE *a1, __int64 a2, __int64 a3, int a4, int a5, __int64 a6, __int64 a7, int a8, int a9);
// retval_108CE60 __golang time_tzsetOffset(_QWORD, _QWORD); weak
// retval_108D3A0 __golang time_tzsetRule(_QWORD); weak
__int64 __golang time_tzruleTime(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7);
// retval_108E0E0 __golang time__ptr_dataIO_big8(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
retval_108E260 __golang time_LoadLocationFromTZData(__int64 a1, size_t a2, signed __int64 a3, signed __int64 a4, __int64 a5, __int64 a6, int a7, signed __int64 a8);
retval_108F740 __golang time_loadTzinfoFromZip(__int64 a1, __int64 a2, const __m128i *a3, __int64 a4, __int64 a5);
__int64 __golang time_loadTzinfoFromZip_deferwrap1(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, char a10);
// retval_1090320 __golang time_loadTzinfo(_QWORD, _QWORD, _QWORD, _QWORD); weak
retval_10903E0 __golang time_loadLocation(__int64 a1, size_t a2, _QWORD *a3, __int64 a4);
__int64 __golang time_readFile_deferwrap1(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, char a10);
const char *time_initLocal();
retval_1091000 __golang time_nextStdChunk(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, int a5, __int64 a6, __int64 a7, int a8, int a9);
string __golang time__ptr_Time_GoString(_ptr_time_Time);
string __golang time__ptr_Time_String(_ptr_time_Time);
string __golang time__ptr_fileSizeError_Error(_ptr_time_fileSizeError);
bool __golang type__eq_time_zone(__int64 a1, __int64 a2);
bool __golang type__eq_time_zoneTrans(__int64 a1, __int64 a2);
retval_1092260 __golang io_fs_FormatDirEntry(__int64 a1, __int64 a2);
// string __golang io_fs_FileMode_String(fs_FileMode);
bool __golang io_fs_FileMode_IsDir(fs_FileMode);
__int64 __golang io_fs_FileMode_Type(int a1);
string __golang io_fs__ptr_PathError_Error(_ptr_fs_PathError);
error __golang io_fs__ptr_PathError_Unwrap(_ptr_fs_PathError);
__int64 __golang type__eq_io_fs_PathError(__int64 a1, __int64 a2);
bool __golang io_fs__ptr_FileMode_IsDir(_ptr_fs_FileMode);
string __golang io_fs__ptr_FileMode_String(_ptr_fs_FileMode);
__int64 __golang io_fs__ptr_FileMode_Type(_DWORD *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, char a10);
// retval_10928C0 __golang internal_filepathlite_Base(_QWORD, _QWORD); weak
__int64 __golang internal_testlog_Getenv(__int64 result, __int64 a2);
__int64 __golang internal_testlog_Stat(__int64 result, __int64 a2);
// retval_1092A60 __golang internal_syscall_unix_Fcntl(_QWORD, _QWORD, _QWORD); weak
string __golang internal_poll__ptr_DeadlineExceededError_Error(_ptr_poll_DeadlineExceededError);
// __int64 __golang internal_poll__ptr_fdMutex_rwlock(_QWORD, _QWORD); weak
// error __golang internal_poll__ptr_FD_decref(_ptr_poll_FD);
// void __golang internal_poll__ptr_FD_writeUnlock(_ptr_poll_FD);
// retval_1092F80 __golang internal_poll__ptr_FD_OpenDir(); weak
// __int64 __golang internal_poll__ptr_pollDesc_prepare(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// __int64 __golang internal_poll__ptr_pollDesc_wait(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64, __int64); weak
// __int64 __golang internal_poll__ptr_FD_Init(_QWORD, _QWORD, _QWORD, _QWORD); weak
// error __golang internal_poll__ptr_FD_Close(_ptr_poll_FD);
retval_10D43A0 __golang internal_poll__ptr_FD_Write(_ptr_poll_FD, _slice_uint8);
void __golang internal_poll__ptr_FD_Write_deferwrap1(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, char a10);
retval_1093BE0 __golang internal_poll__ptr_FD_Fstat(volatile signed __int64 *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_1093D80 __golang internal_poll__ptr_FD_Fstat_deferwrap1(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, char a10);
// retval_1093DE0 __golang internal_poll_DupCloseOnExec(_QWORD); weak
retval_1093F00 __golang internal_poll__ptr_FD_Dup(volatile signed __int64 *a1);
retval_10940A0 __golang internal_poll__ptr_FD_Dup_deferwrap1(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, char a10);
retval_1094100 internal_poll_dupCloseOnExecOld();
// __int64 __golang internal_poll_dupCloseOnExecOld_deferwrap1(int, int, int, int, int, int, int, int, int, char); weak
string __golang internal_poll__ptr_errNetClosing_Error(_ptr_poll_errNetClosing);
bool __golang type__eq_internal_poll_FD(const __m128i *a1, const __m128i *a2);
// retval_1094640 __golang os__ptr_File_Readdirnames(_QWORD, _QWORD, _QWORD); weak
retval_10946E0 __golang os__ptr_File_readdir(__int64 a1, __int64 a2, __int64 a3);
// retval_10952A0 __golang os_Getenv(_QWORD, _QWORD); weak
string __golang os__ptr_SyscallError_Error(_ptr_os_SyscallError);
error __golang os__ptr_SyscallError_Unwrap(_ptr_os_SyscallError);
__int64 __golang os_underlyingErrorIs(__int64 a1, _QWORD *a2, RTYPE **a3, __int64 a4);
retval_10D43A0 __golang os__ptr_File_Write(_ptr_os_File, _slice_uint8);
retval_10957E0 __golang os__ptr_File_wrapErr(__int64 a1, char *a2, size_t a3, RTYPE **a4, __int64 a5);
os_File *__golang os_NewFile(signed __int64 a1, char *a2, size_t a3);
os_File *__golang os_newFile(signed __int64 a1, char *a2, size_t a3, __int64 a4, char a5);
retval_1095E20 __golang os_openDirNolog(char *a1, size_t a2, __int64 a3, __int64 a4, __int64 a5);
error __golang os__ptr_file_close(_ptr_os_file);
string __golang os__ptr_unixDirent_Name(_ptr_os_unixDirent);
bool __golang os__ptr_unixDirent_IsDir(_ptr_os_unixDirent);
fs_FileMode __golang os__ptr_unixDirent_Type(_ptr_os_unixDirent);
string __golang os__ptr_unixDirent_String(_ptr_os_unixDirent);
retval_10961A0 __golang os_newUnixDirent(char *a1, size_t a2, char *a3, size_t a4, fs_FileMode a5);
retval_1096340 os_Getwd();
__int64 __golang os_fillFileStatFromSys(__int64 a1, __int64 a2, __int64 a3);
retval_10D24E0 __golang os__ptr_File_Stat(_ptr_os_File);
// retval_10970C0 __golang os_statNolog(_QWORD, _QWORD); weak
// __int64 __golang os_lstatNolog(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
string __golang os__ptr_fileStat_Name(_ptr_os_fileStat);
fs_FileMode __golang os__ptr_fileStat_Mode(_ptr_os_fileStat);
bool __golang type__eq_os_fileStat(__int64 a1, __int64 a2);
bool __golang type__eq_os_file(__int64 a1, __int64 a2);
bool __golang type__eq_sync_atomic_Pointer_os_dirInfo_(_QWORD *a1, _QWORD *a2);
__int64 __golang type__eq_os_unixDirent(__int64 a1, __int64 a2);
__int64 __golang type__eq_os_LinkError(__int64 a1, __int64 a2);
__int64 __golang type__eq_os_SyscallError(__int64 a1, __int64 a2);
void __golang fmt__ptr_fmt_writePadding(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, int a7, int a8, int a9);
void __golang fmt__ptr_fmt_pad(__int64 a1, const __m128i *a2, signed __int64 a3, __int64 a4, __int64 a5, __int64 a6, int a7, int a8, int a9);
void __golang fmt__ptr_fmt_padString(__int64 **a1, const __m128i *a2, signed __int64 a3, __int64 a4, __int64 a5, __int64 a6, int a7, int a8, int a9);
void __golang fmt__ptr_fmt_fmtUnicode(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, int a7, __int64 a8, int a9);
// __int64 __golang fmt__ptr_fmt_fmtInteger(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
retval_1098900 __golang fmt__ptr_fmt_truncate(__int64 a1, __int64 a2, signed __int64 a3, unsigned __int64 a4, __int64 a5, __int64 a6, __int64 a7, int a8, int a9);
// __int64 __golang fmt__ptr_fmt_fmtS(_QWORD, _QWORD, _QWORD); weak
// __int64 __golang fmt__ptr_fmt_fmtBs(_QWORD); weak
void __golang fmt__ptr_fmt_fmtSbx(__int64 a1, __int64 a2, unsigned __int64 a3, __int64 a4, unsigned __int64 a5, __int64 a6, __int64 a7, unsigned __int64 a8, int a9);
// __int64 __golang fmt__ptr_fmt_fmtQ(_QWORD, _QWORD, _QWORD); weak
void __golang fmt__ptr_fmt_fmtC(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, int a7, int a8, int a9);
void __golang fmt__ptr_fmt_fmtFloat(__int64 a1, __int64 a2, int a3, __int64 a4, double a5);
// __int64 __golang fmt_Fprintln(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
// retval_1099FA0 __golang fmt_getField(_QWORD, _QWORD, _QWORD); weak
// __int64 fmt__ptr_pp_unknownType(void); weak
// __int64 __golang fmt__ptr_pp_badVerb(_QWORD, _QWORD); weak
// __int64 __golang fmt__ptr_pp_fmtBool(_QWORD, _QWORD, _QWORD); weak
__int64 __golang fmt__ptr_pp_fmt0x64(__int64 a1, __int64 a2, char a3);
// __int64 __fastcall fmt__ptr_pp_fmtInteger(_QWORD, _QWORD, _QWORD, _QWORD); weak
// __int64 __golang fmt__ptr_pp_fmtFloat(double); weak
// __int64 __golang fmt__ptr_pp_fmtComplex(double, double); weak
// __int64 __fastcall fmt__ptr_pp_fmtString(_QWORD, _QWORD, _QWORD, _QWORD); weak
void __golang fmt__ptr_pp_fmtBytes(_QWORD *a1, __int64 a2, signed __int64 a3, __int64 a4, __int64 a5, const __m128i *a6, unsigned __int64 a7, __int64 a8, int a9);
// __int64 __golang fmt__ptr_pp_fmtPointer(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
void __golang fmt__ptr_pp_catchPanic(__int64 *a1, __int64 a2, _QWORD *a3, unsigned int a4, const __m128i *a5, unsigned __int64 a6);
// __int64 __golang fmt__ptr_pp_handleMethods(_QWORD, _QWORD); weak
void __golang fmt__ptr_pp_printArg(_QWORD *a1, reflect_rtype *a2, unsigned __int8 *a3, __int64 a4, __int64 a5, __int64 a6, int a7, int a8, _QWORD *a9);
void __golang fmt__ptr_pp_printValue(_QWORD *a1, abi_Type *data, _QWORD *a3, reflect_flag a4, __int64 a5, __int64 a6);
bool __golang type__eq_fmt_fmt(__int64 a1, __int64 a2);
void __fastcall main_main();
__int64 go_textfipsstart(); // weak
void go_textfipsend();
void __cdecl __noreturn _exit(int);
// int open(const char *, int, ...);
// ssize_t __cdecl write(int __fd, const void *__buf, size_t __nbyte);
// int *__error(void);
// int __cdecl madvise(void *, size_t, int);
// uint64_t mach_absolute_time(void);
// kern_return_t __cdecl mach_timebase_info(mach_timebase_info_t info);
// int __cdecl clock_gettime(clockid_t __clock_id, timespec *__tp);
// int __cdecl sigaction(int, const sigaction *, sigaction *);
// int __cdecl pthread_sigmask(int, const sigset_t *, sigset_t *);
// int __cdecl sigaltstack(const stack_t *, stack_t *);
// pid_t getpid(void);
// int __cdecl kill(pid_t, int);
// void *__cdecl mmap(void *, size_t, int, int, int, off_t);
// int __cdecl munmap(void *, size_t);
// int __cdecl usleep(useconds_t);
// int __cdecl sysctl(int *, u_int, void *, size_t *, void *, size_t);
// int kqueue(void);
// int __cdecl kevent(int kq, const kevent *changelist, int nchanges, kevent *eventlist, int nevents, const timespec *timeout);
// int fcntl(int, int, ...);
// int __cdecl pthread_attr_init(pthread_attr_t *);
// int __cdecl pthread_attr_getstacksize(const pthread_attr_t *, size_t *);
// int __cdecl pthread_attr_setdetachstate(pthread_attr_t *, int);
// int __cdecl pthread_create(pthread_t *, const pthread_attr_t *, void *(__cdecl *)(void *), void *);
// int __cdecl raise(int);
// int __cdecl pthread_mutex_init(pthread_mutex_t *, const pthread_mutexattr_t *);
// int __cdecl pthread_mutex_lock(pthread_mutex_t *);
// int __cdecl pthread_mutex_unlock(pthread_mutex_t *);
// int __cdecl pthread_cond_init(pthread_cond_t *, const pthread_condattr_t *);
// int __cdecl pthread_cond_wait(pthread_cond_t *, pthread_mutex_t *);
// int __cdecl pthread_cond_timedwait_relative_np(pthread_cond_t *, pthread_mutex_t *, const timespec *);
// int __cdecl pthread_cond_signal(pthread_cond_t *);
// pthread_t pthread_self(void);
// int __cdecl pthread_kill(pthread_t, int);
// bool __cdecl notify_is_valid_token(int val);
// xpc_object_t xpc_date_create_from_current(void);
// void __cdecl arc4random_buf(void *__buf, size_t __nbytes);
// int issetugid(void);

//-------------------------------------------------------------------------
// Data declarations

int dword_1000000 = -17958193; // weak
_UNKNOWN loc_106B506; // weak
_UNKNOWN loc_106D3C1; // weak
char a0123456789abcd[16] = "0123456789abcdef"; // weak
char a0123456789abcd_1[17] = "0123456789ABCDEFX"; // weak
char a0123456789abcd_3[36] = "0123456789abcdefghijklmnopqrstuvwxyz"; // weak
char a00010203040506[201] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899"; // weak
__int64 qword_10C5090 = 2LL; // weak
__int64 qword_10C5098 = 9LL; // weak
__int64 qword_10C50F0 = 4LL; // weak
__int64 qword_10C52A0[4] = { 58LL, 136LL, 341LL, 16LL }; // weak

==================================================

// function name: runtime_throw

//----- (0000000001066A40) ----------------------------------------------------
// runtime.throw
__int64 __golang runtime_throw(
        __int64 (*a1)(void),
        __int64 (*a2)(void),
        __int64 a3,
        __int64 a4,
        __int64 a5,
        __int64 a6,
        __int64 a7,
        __int64 a8,
        __int64 a9)
{
  __int64 v9; // rcx
  __int64 v10; // rbx
  __int64 v11; // rdi
  __int64 v12; // rsi
  __int64 v13; // r8
  __int64 v14; // r9
  __int64 v15; // r10
  __int64 v16; // r11
  char v18; // [rsp+0h] [rbp-20h]
  __int64 (*v19[3])(void); // [rsp+8h] [rbp-18h] BYREF

  v19[0] = (__int64 (*)(void))runtime_throw_func1;
  v19[2] = a2;
  v19[1] = a1;
  runtime_systemstack((__int64)v19, (__int64)a2, (__int64)runtime_throw_func1, a4, a5, a6, a7, a8, a9, v19);
  return runtime_fatalthrow(2, v10, v9, v11, v12, v13, v14, v15, v16, v18);
}

==================================================

// function name: runtime_systemstack

// 106B500: using guessed type void __noreturn runtime_systemstack_switch();

//----- (000000000106B520) ----------------------------------------------------
// runtime.systemstack
unsigned __int64 __golang runtime_systemstack(
        __int64 a1,
        __int64 a2,
        __int64 a3,
        __int64 a4,
        __int64 a5,
        __int64 a6,
        __int64 a7,
        __int64 a8,
        __int64 a9,
        __int64 (**a10)(void))
{
  __int64 v10; // rax
  _QWORD *v11; // rbx
  unsigned __int64 v12; // rdx
  void (**v13)(void); // rdi
  unsigned __int64 result; // rax
  char savedregs; // [rsp+0h] [rbp+0h]

  v10 = __readgsqword(0x30u);
  v11 = *(_QWORD **)(v10 + 48);
  if ( v10 == v11[10] || v10 == *v11 )
    return (*a10)();
  if ( v10 != v11[24] )
  {
    runtime_badsystemstack_0(runtime_badsystemstack_0, v11, a3, a10);
    __asm { int     3; - software interrupt to invoke the debugger }
    JUMPOUT(0x106B5B5);
  }
  gosave_systemstack_switch(v10, (__int64)v11, a3, (__int64)a10, a5, a6, a7, a8, a9, savedregs);
  __writegsqword(0x30u, v12);
  (*v13)();
  result = *(_QWORD *)(*(_QWORD *)(__readgsqword(0x30u) + 48) + 192LL);
  __writegsqword(0x30u, result);
  *(_QWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 104) = 0;
  return result;
}

==================================================

// function name: runtime_badsystemstack_0

//----- (000000000106FB60) ----------------------------------------------------
// runtime.badsystemstack
__int64 runtime_badsystemstack_0()
{
  return runtime_badsystemstack();
}

==================================================

// function name: runtime_gcWriteBarrier2

//----- (000000000106D420) ----------------------------------------------------
// runtime.gcWriteBarrier2
void runtime_gcWriteBarrier2()
{
  gcWriteBarrier();
}

==================================================

// function name: gosave_systemstack_switch

// 106A6C0: variable 'v9' is possibly undefined
// 106A6C0: variable 'v10' is possibly undefined

//----- (000000000106A6E0) ----------------------------------------------------
// gosave_systemstack_switch
void __golang gosave_systemstack_switch(
        __int64 a1,
        __int64 a2,
        __int64 a3,
        __int64 a4,
        __int64 a5,
        __int64 a6,
        __int64 a7,
        __int64 a8,
        __int64 a9,
        char a10)
{
  __int64 v10; // rbp
  _QWORD *v11; // r14

  v11[8] = (char *)&loc_106B506 + 2;
  v11[7] = &a10;
  v11[11] = 0;
  v11[13] = v10;
  if ( v11[10] )
    runtime_abort();
}

==================================================

// function name: runtime_abort

//----- (000000000106D260) ----------------------------------------------------
// runtime.abort
void __noreturn runtime_abort()
{
  __asm { int     3; - software interrupt to invoke the debugger }
  while ( 1 )
    ;
}

==================================================

// function name: runtime_printuintptr

// 10378C0: using guessed type __int64 __golang runtime_printhex(_QWORD);

//----- (0000000001037A00) ----------------------------------------------------
// runtime.printuintptr
__int64 __golang runtime_printuintptr(__int64 a1)
{
  return runtime_printhex(a1);
}

==================================================

// function name: internal_runtime_atomic__ptr_Uint64_Store

//----- (0000000001002CE0) ----------------------------------------------------
// internal/runtime/atomic.(*Uint64).Store
retval_1002CE0 __golang internal_runtime_atomic__ptr_Uint64_Store(volatile __int64 *a1, __int64 a2)
{
  retval_1002CE0 result; // 0:rax.8,8:rbx.8

  result._r1 = _InterlockedExchange64(a1, a2);
  result._r0 = a1;
  return result;
}

==================================================

// function name: runtime_traceAllocFreeEnabled

_QWORD *__golang runtime__ptr_traceMap_newTraceMapNode(__int64 a1, const __m128i *a2, unsigned __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime__ptr_traceMap_reset(volatile __int64 *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime__ptr_traceRegionAlloc_alloc(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime__ptr_traceRegionAlloc_drop(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 runtime_traceAllocFreeEnabled(void); // weak
retval_105CBA0 runtime_traceAcquire();
retval_105CBC0 __golang runtime_traceAcquireEnabled();
retval_105CC60 __golang runtime_traceLocker_ok(__int64 a1, __int64 a2);
__int64 __golang runtime_traceRelease(__int64 result);
__int64 __golang runtime_traceLocker_Gomaxprocs(__int64 a1, unsigned __int64 a2, int a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_ProcStart(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_ProcStop(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_GCActive(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_GCStart(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_GCDone(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_STWStart(__int64 a1, unsigned __int64 a2, unsigned __int8 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_STWDone(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_105D220 __golang runtime_traceLocker_GCSweepStart(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_GCSweepSpan(__int64 result, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_GCSweepDone(__int64 result, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_GCMarkAssistStart(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_GCMarkAssistDone(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_GoCreate(__int64 a1, unsigned __int64 a2, __int64 a3, void *a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_GoStart(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_GoEnd(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_GoStop(__int64 a1, unsigned __int64 a2, unsigned __int8 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_GoPark(__int64 a1, unsigned __int64 a2, unsigned __int8 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_GoUnpark(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4);
unsigned __int64 __golang runtime_traceLocker_emitUnblockStatus(__int64 a1, __int64 a2, __int64 a3, unsigned __int64 a4);
__int64 __golang runtime_traceLocker_GoSysCall(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_GoSysExit(__int64 a1, unsigned __int64 a2, char a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_ProcSteal(__int64 a1, unsigned __int64 a2, int *a3, char a4, __int64 a5, __int64 a6, __int64 a7);
__int64 __golang runtime_traceLocker_HeapAlloc(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_HeapGoal(__int64 a1, unsigned __int64 a2, __int64 a3);
__int64 __golang runtime_traceLocker_GoCreateSyscall(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_GoDestroySyscall(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
signed __int64 __golang runtime_traceThreadDestroy(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang runtime_traceThreadDestroy_func1(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceStack(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, unsigned __int64 a8, __int64 a9);
// __int64 __golang runtime__ptr_traceStackTable_put(_QWORD, _QWORD, _QWORD, _QWORD); weak
__int64 __golang runtime__ptr_traceStackTable_dump(__int64 *a1, __int64 (*a2)(void));
__int64 __golang runtime_dumpStacksRec(__int64 a1, __int64 a2, __int64 (*a3)(void), __int64 a4, __int64 a5, __m128i *a6, __int64 a7, unsigned __int64 a8, int a9);
retval_105F120 __golang runtime_makeTraceFrames(__int64 (*a1)(void), uintptr *a2, size_t a3, size_t a4);
retval_105F3C0 __golang runtime_makeTraceFrame(__int64 (*a1)(void), __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, __int64 a11, const __m128i *a12, __int64 a13, const __m128i *a14, __int64 a15, __int64 a16);
__int64 __golang runtime_fpunwindExpand(__m128i *a1, __int64 a2, __int64 a3, unsigned __int64 *a4, __int64 a5, __int64 a6, __int64 a7, unsigned __int64 a8, __int64 a9);
__int64 __golang runtime_startPCForTrace(void *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, unsigned int *a6, unsigned int *a7, unsigned __int64 a8, __int64 a9);
retval_105F880 __golang runtime_traceWriter_writeGoStatus(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, unsigned __int8 a7, char a8, __int64 a9);
retval_105F9A0 __golang runtime_traceWriter_writeProcStatusForP(__int64 r0, unsigned __int64 r1, __int64 r2, __int64 a4, int *a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_105FB00 __golang runtime_traceWriter_writeProcStatus(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, unsigned __int8 a6, char a7, __int64 a8, __int64 a9);
__int64 __golang runtime_goStatusToTraceGoStatus(int a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime__ptr_traceStringTable_put(__int64 a1, __int64 (*a2)(void), const __m128i *a3, unsigned __int64 a4);
// __int64 __golang runtime__ptr_traceStringTable_put_func1(); weak
void __golang runtime__ptr_traceStringTable_writeString(__int64 a1, __int64 a2, unsigned __int64 a3, const __m128i *a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime__ptr_traceStringTable_reset(__int64 a1, __int64 (*a2)(void), __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang runtime__ptr_traceStringTable_reset_func1(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
unsigned __int64 __golang runtime_traceFrequency(__int64 (*a1)(void), __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang runtime_traceFrequency_func1(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_1060340 __golang runtime__ptr_traceTypeTable_put(volatile signed __int64 *a1, __int64 r1);
__int64 __golang runtime__ptr_traceTypeTable_dump(__int64 *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_dumpTypesRec(__int64 a1, __int64 a2, __int64 a3, unsigned __int8 a4, __int64 a5, int a6, int a7, int a8, int a9);
// retval_1060920 __golang runtime_rtype_string(_QWORD); weak
__int64 (*__golang runtime_getGCMaskOnDemand(__int64 (*a1)(void), int a2, __int64 (*a3)(void), __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9))(void);
unsigned __int64 *__golang runtime_getGCMaskOnDemand_func1(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, unsigned __int64 *a7, unsigned __int64 a8, unsigned __int64 a9);
_BYTE *__golang runtime_bitCursor_write(__int64 a1, unsigned __int64 a2, unsigned __int8 *a3, unsigned __int64 a4);
unsigned __int64 *__golang runtime_buildGCMask(unsigned __int64 *result, __int64 a2, unsigned __int64 a3, __int64 a4, __int64 a5, __int64 a6, unsigned __int64 *a7, unsigned __int64 a8, unsigned __int64 a9);
// __int64 __golang runtime_resolveNameOff(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// __int64 __golang runtime_resolveTypeOff(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64); weak
// __int64 __golang runtime_rtype_textOff(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
retval_1061580 __golang runtime_pkgPath(_BYTE *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, int a8, int a9);
void runtime_typelinksinit();
__int64 __golang runtime_typesEqual(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// void __golang __noreturn runtime_panicunsafestringlen(_QWORD); weak
// void __noreturn runtime_panicunsafestringnilptr(void); weak
// void __golang __noreturn runtime_panicunsafeslicelen(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
// void __golang __noreturn runtime_panicunsafeslicenilptr(_QWORD, _QWORD, _QWORD); weak
// retval_1062A40 __golang runtime_decoderune(_QWORD, _QWORD); weak
retval_1062D60 runtime_printCgoTraceback_func1();
void __golang runtime_traceAdvance_func2(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceAdvance_func5(int *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_schedtrace_func1(__int64 a1);
// __int64 __golang runtime_injectglist_func1(_QWORD); weak
void __golang __noreturn runtime_casgstatus_func2(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_init_6_func1(); // weak
__int64 runtime__ptr_scavengerState_init_func4(); // weak
__int64 __golang runtime_gcResetMarkState_func1(__int64 result);
__int64 __golang runtime_gcBgMarkWorker_func1(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6);
void __golang runtime_gcMarkTermination_func4(__int64 a1);
// __int64 __golang runtime_gcMarkTermination_func4_1(); weak
void __golang runtime_gcMarkDone_func1(runtime_gcWork *a1, __int64 a2, __int64 a3, int a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_debugCallWrap1_func1(_QWORD *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_debugCallWrap_func2(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime_nilinterhash(_QWORD, _QWORD); weak
__int64 __golang runtime_typehash(__int64 a1, __m128i *a2, unsigned __int64 a3);
__int64 __golang runtime_atomicwb(_QWORD *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_1064E00 __golang internal_runtime_atomic_storePointer(volatile __int64 *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
bool __golang internal_runtime_atomic_casPointer(volatile signed __int64 *a1, signed __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_1064EA0 __golang sync_atomic_StorePointer(volatile __int64 *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang sync_atomic_SwapPointer(volatile __int64 *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
bool __golang sync_atomic_CompareAndSwapPointer(volatile signed __int64 *a1, signed __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_cgocall(__int64 (__fastcall *a1)(__int64), __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang reflect_chanlen(_QWORD *a1);
__int64 __golang runtime_getitab(__int64 a1, abi_Type *a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime_convT64(_QWORD, _QWORD); weak
// __int64 __golang runtime_convTstring(_QWORD); weak
// __int64 __golang runtime_convTslice(_QWORD, _QWORD, _QWORD); weak
__int64 *runtime_getStaticuint64s();
__int64 *__golang runtime_mallocgc(__int64 (*a1)(void), unsigned __int64 a2, __int64 a3, void (__golang *a4)(), __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 *a9, double a10);
// __int64 __golang internal_runtime_maps_newobject(_QWORD); weak
// __int64 reflect_unsafe_New(void); weak
// __int64 runtime_newarray(void); weak
__int64 __golang internal_runtime_maps_newarray(_QWORD, _QWORD); // weak
retval_1065820 __golang internal_runtime_maps_mapKeyError(__int64 a1, _QWORD *a2);
// __int64 __golang runtime_makemap_small(_QWORD); weak
_QWORD *__golang runtime_makemap(__int64 a1, signed __int64 a2, _QWORD *a3);
__int64 __golang reflect_maplen(__int64 a1);
// __int64 __golang runtime_typedmemmove(_QWORD, _QWORD, _QWORD); weak
__int64 __golang reflect_typedmemmove(__int64 a1, __int64 a2, __int64 a3);
__int64 __golang internal_runtime_maps_typedmemmove(_QWORD, _QWORD, _QWORD); // weak
// __int64 __golang runtime_typedslicecopy(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
__int64 __golang reflect_typedmemclr(__int64 a1, __int64 a2);
__int64 __golang runtime_memclrHasPointers(_OWORD *a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, _QWORD *a9);
// retval_1065B60 __golang runtime_findObject(_QWORD, _QWORD, _QWORD); weak
// __int64 __golang reflect_verifyNotInHeapPtr(_QWORD); weak
__int64 __golang internal_godebug_registerMetric(const __m128i *a1, unsigned __int64 a2, __int64 a3);
__int64 __golang runtime_blockevent(__int64 a1, __int64 a2);
__int64 __golang sync_event(__int64 result, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 internal_poll_runtime_pollServerInit(); // weak
retval_1066080 __golang internal_poll_runtime_pollOpen(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang internal_poll_runtime_pollClose(runtime_pollDesc *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang internal_poll_runtime_pollReset(__int64 a1, __int64 a2);
__int64 __golang internal_poll_runtime_pollWait(__int64 a1, __int64 a2);
__int64 __golang internal_poll_runtime_pollUnblock(runtime_pollDesc *a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// retval_10665E0 __golang runtime_gopanic(_QWORD, _QWORD); weak
void __golang sync_fatal(__int64 (*a1)(void), __int64 (*a2)(void));
void __golang internal_runtime_maps_fatal(__int64 (*a1)(void), __int64 (*a2)(void));
void __golang __noreturn internal_sync_throw(__int64 (*a1)(void), __int64 (*a2)(void), __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang internal_sync_fatal(__int64 (*a1)(void), __int64 (*a2)(void));
__int64 __golang runtime_throw(__int64 (*a1)(void), __int64 (*a2)(void), __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang __noreturn runtime_gopark(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, _QWORD *a9);
// __int64 __golang runtime_wakep(_QWORD); weak
unsigned __int64 __golang runtime_entersyscall(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, char a10);
__int64 __golang runtime_entersyscallblock(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, char a10);
bool __golang runtime_exitsyscall(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, char a10);
__int64 __golang sync_runtime_procUnpin(); // weak
_BOOL8 __golang internal_sync_runtime_canSpin(__int64 a1);
__int64 __golang internal_sync_runtime_doSpin(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_rand(_QWORD, _QWORD); // weak
__int64 internal_runtime_maps_rand(void); // weak
retval_1067380 __golang syscall_runtime_envs(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, int a7, int a8, int a9);
retval_1067440 __golang os_runtime_args(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, int a7, int a8, int a9);
__int64 __golang internal_godebug_setUpdate(__int64 a1);
retval_1067580 __golang internal_godebug_setNewIncNonDefault(__int64 a1);
__int64 __golang runtime_debug_SetTraceback(__int64 a1, __int64 a2);
// __int64 __golang reflect_resolveNameOff(_QWORD, _QWORD); weak
// __int64 __golang reflect_resolveTypeOff(_QWORD, _QWORD); weak
__int64 __golang reflect_resolveTextOff(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9);
__int64 __golang reflect_addReflectOff(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_1067980 __golang internal_poll_runtime_Semacquire(__int64 a1);
__int64 __golang sync_runtime_Semrelease(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9);
retval_1067A00 __golang internal_sync_runtime_SemacquireMutex(__int64 a1, __int64 a2, __int64 a3);
retval_1067A60 __golang sync_runtime_SemacquireRWMutexR(__int64 a1, __int64 a2, __int64 a3);
__int64 __golang internal_poll_runtime_Semrelease(int a1, __int64 a2, __int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
__int64 __golang internal_sync_runtime_Semrelease(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9);
__int64 __golang sync_runtime_notifyListCheck(__int64 result);
__int64 __golang internal_sync_runtime_nanotime(__int64 a1);
unsigned __int64 __golang os_sigpipe(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __noreturn runtime_sigpanic(void); // weak
// __int64 __golang runtime_makeslice(_QWORD, _QWORD); weak
// retval_1068120 __golang runtime_growslice(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
void __golang runtime_morestackc(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_10688E0 __golang runtime_gostring(const __m128i *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
char __golang reflect_memmove(__m128i *a1, const __m128i *a2, unsigned __int64 a3);
char __golang runtime_moduledataverify1(unsigned int **a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, unsigned int a6, unsigned int *a7, int a8, int a9);
retval_1069200 __golang runtime_findfunc(void *a1, __int64 j, __int64 a3, __int64 a4, __int64 a5, unsigned int *textsectionmap, unsigned int *a7, unsigned __int64 a8, __int64 a9);
retval_10693A0 __golang runtime_funcline1(unsigned int *a1, _QWORD *a2, unsigned __int64 a3, char a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_10694A0 __golang runtime_newInlineUnwinder(__int64 a1, _QWORD *a2, unsigned __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_1069560 __golang syscall_syscall(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_1069600 __golang syscall_syscallX(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_10696A0 __golang syscall_syscall6(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_1069760 __golang syscall_syscall6X(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_1069820 __golang syscall_syscallPtr(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_10698C0 __golang syscall_rawSyscall(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime_exit(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, char); weak
// retval_1069980 __golang runtime_walltime(); weak
// __int64 __golang runtime_fcntl(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD); weak
retval_1069A60 __golang time_runtimeNow();
__int64 __golang time_runtimeNano(__int64 a1);
// __int64 __golang runtime_write(_QWORD, _QWORD, _QWORD); weak
retval_1069B80 time_now();
__int64 __golang runtime_traceAdvance(unsigned __int8 a1);
// __int64 __golang runtime_callers(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
__int64 __golang runtime_mapinitnoop(_QWORD); // weak
__int64 __golang gogo(__int64 a1, __int64 a2);
__int64 __golang callRet(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, int a6, int a7, int a8, int a9);
void __golang gosave_systemstack_switch(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, char a10);
void __golang setg_gcc(__int64 a1, __int64 a2, __int64 a3, unsigned __int64 a4);
unsigned __int64 __golang aeshashbody(const __m128i *a1, unsigned __int64 a2, unsigned __int64 a3);
// unsigned __int64 __usercall __spoils<rdx,rcx,rbx,rdi,rsi,r8,r9,r10,r12,r13,xmm0,xmm1,xmm2,xmm3,xmm4,xmm5,xmm6,xmm7,xmm8,xmm9,xmm10,xmm11,xmm12,xmm13,xmm14> gcWriteBarrier@<r11>();
void __gostk debugCall32(char a1);
void __gostk debugCall64(char a1);
void __gostk debugCall128(char a1);
void __gostk debugCall256(char a1);
void __gostk debugCall512(char a1);
void __gostk debugCall1024(char a1);
void __gostk debugCall2048(char a1);
void __gostk debugCall4096(char a1);
void __gostk debugCall8192(char a1);
void __gostk debugCall16384(char a1);
void __gostk debugCall32768(char a1);
void __gostk debugCall65536(char a1);
__int64 runtime_asminit(void); // weak
__int64 runtime_mstart(void); // weak
__int64 __golang runtime_gogo(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10);
void __golang __noreturn runtime_mcall(void (__golang **rax0)(_QWORD *), __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a1);
void __noreturn runtime_systemstack_switch(); // weak
unsigned __int64 __golang runtime_systemstack(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 (**a10)(void));
void __golang __noreturn runtime_switchToCrashStack0(__int64 (__fastcall **a1)(__int64, __int64, _QWORD), __int64 a2, __int64 a3, __int64 a4, __int64 a5);
void __golang __noreturn runtime_morestack(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, unsigned int *a6, unsigned int *a7, unsigned __int64 a8, __int64 a9, __int64 a10, char a11);
void __golang __noreturn runtime_morestack_noctxt(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, unsigned int *a6, unsigned int *a7, unsigned __int64 a8, __int64 a9);
__int64 __golang runtime_spillArgs(__int64 result, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, double a17, double a18, double a19, double a20, double a21, double a22, double a23, double a24);
retval_106B760 __golang runtime_unspillArgs();
__int64 __golang runtime_reflectcall(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, retval_106BA60 (__golang **a11)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double), const void *a12, __int64 a13, __int64 a14, __int64 a15);
__int64 __golang runtime_call16(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, retval_106BA60 (__golang **a11)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double), const void *a12, unsigned int a13, unsigned int a14);
__int64 __golang runtime_call32(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, retval_106BB00 (__golang **a11)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double), const void *a12, unsigned int a13, unsigned int a14);
__int64 __golang runtime_call64(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, retval_106BBA0 (__golang **a11)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double), const void *a12, unsigned int a13, unsigned int a14);
__int64 __golang runtime_call128(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, retval_106BC55 (__golang **a11)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double), const void *a12, unsigned int a13, unsigned int a14);
__int64 __golang runtime_call256(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, retval_106BD1B (__golang **a11)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double), const void *a12, unsigned int a13, unsigned int a14);
__int64 __golang runtime_call512(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, retval_106BDFB (__golang **a11)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double), const void *a12, unsigned int a13, unsigned int a14);
__int64 __golang runtime_call1024(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, retval_106BEDB (__golang **a11)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double), const void *a12, unsigned int a13, unsigned int a14);
__int64 __golang runtime_call2048(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, retval_106BFBB (__golang **a11)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double), const void *a12, unsigned int a13, unsigned int a14);
__int64 __golang runtime_call4096(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, retval_106C0A3 (__golang **a11)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double), const void *a12, unsigned int a13, unsigned int a14);
__int64 __golang runtime_call8192(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, retval_106C183 (__golang **a11)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double), const void *a12, unsigned int a13, unsigned int a14);
__int64 __golang runtime_call16384(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, retval_106C263 (__golang **a11)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double), const void *a12, unsigned int a13, unsigned int a14);
__int64 __golang runtime_call32768(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, retval_106C343 (__golang **a11)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double), const void *a12, unsigned int a13, unsigned int a14);
__int64 __golang runtime_call65536(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, retval_106C423 (__golang **a11)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double), const void *a12, unsigned int a13, unsigned int a14);
__int64 __golang runtime_call131072(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, retval_106C503 (__golang **a11)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double), const void *a12, unsigned int a13, unsigned int a14);
__int64 __golang runtime_call262144(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, retval_106C5E3 (__golang **a11)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double), const void *a12, unsigned int a13, unsigned int a14);
__int64 __golang runtime_call524288(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, retval_106C6C3 (__golang **a11)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double), const void *a12, unsigned int a13, unsigned int a14);
__int64 __golang runtime_call1048576(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64, __int64, __int64, _DWORD, _DWORD, __int64, __int64); // weak
__int64 __golang runtime_call2097152(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64, __int64, __int64, _DWORD, _DWORD, __int64, __int64); // weak
__int64 __golang runtime_call4194304(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64, __int64, __int64, _DWORD, _DWORD, __int64, __int64); // weak
__int64 __golang runtime_call8388608(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64, __int64, __int64, _DWORD, _DWORD, __int64, __int64); // weak
__int64 __golang runtime_call16777216(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64, __int64, __int64, _DWORD, _DWORD, __int64, __int64); // weak
__int64 __golang runtime_call33554432(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64, __int64, __int64, _DWORD, _DWORD, __int64, __int64); // weak
__int64 __golang runtime_call67108864(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64, __int64, __int64, _DWORD, _DWORD, __int64, __int64); // weak
__int64 __golang runtime_call134217728(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64, __int64, __int64, _DWORD, _DWORD, __int64, __int64); // weak
__int64 __golang runtime_call268435456(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64, __int64, __int64, _DWORD, _DWORD, __int64, __int64); // weak
__int64 __golang runtime_call536870912(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64, __int64, __int64, _DWORD, _DWORD, __int64, __int64); // weak
__int64 __golang runtime_call1073741824(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64, __int64, __int64, _DWORD, _DWORD, __int64, __int64); // weak
__int64 __golang runtime_procyield(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, int a10);
__int64 __golang runtime_publicationBarrier(_QWORD); // weak
__int64 __golang runtime_asmcgocall_no_g(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 (__fastcall *a10)(__int64, __int64, _QWORD *, __int64), __int64 a11);
__int64 __golang runtime_asmcgocall_landingpad(__int64 (__fastcall *a1)(__int64), __int64 a2);
retval_106D180 __golang runtime_asmcgocall(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 (__fastcall *a10)(__int64), __int64 a11);
void __gostk runtime_setg(unsigned __int64 a1);
void __golang __noreturn runtime_abort(_QWORD); // weak
retval_106D280 __golang runtime_cputicks(unsigned __int64 a1);
unsigned __int64 __golang runtime_memhash(const __m128i *a1, unsigned __int64 a2, unsigned __int64 a3);
unsigned __int64 __golang runtime_strhash(__int64 a1, unsigned __int64 a2);
__int64 __golang runtime_memhash32(unsigned int *a1, __int64 a2);
__int64 __golang runtime_memhash64(signed __int64 *a1, unsigned __int64 a2);
bool __gostk runtime_checkASM();
__int64 runtime_return0(void); // weak
void __golang __noreturn runtime_goexit(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __noreturn runtime_sigpanic0(); // weak
void runtime_gcWriteBarrier1();
void runtime_gcWriteBarrier2();
void runtime_gcWriteBarrier3();
void runtime_gcWriteBarrier4();
void runtime_gcWriteBarrier5();
void runtime_gcWriteBarrier6();
void runtime_gcWriteBarrier7();
void runtime_gcWriteBarrier8();
retval_106D500 __golang runtime_debugCallV2(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_debugCallPanicked(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, __int64 a11);
void __golang __noreturn runtime_panicIndex(int64 a1, _QWORD a2, signed __int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
void __golang __noreturn runtime_panicIndexU(int64 a1, __int64 a2, signed __int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
void __golang __noreturn runtime_panicSliceAlen(__int64 a1, __int64 a2, int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
void __golang __noreturn runtime_panicSliceAlenU(__int64 a1, __int64 a2, int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
void __golang __noreturn runtime_panicSliceAcap(__int64 a1, __int64 a2, int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
void __golang __noreturn runtime_panicSliceAcapU(__int64 a1, __int64 a2, int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
void __golang __noreturn runtime_panicSliceB(int64 a1, __int64 a2, signed __int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
void __golang __noreturn runtime_panicSliceBU(int64 a1, __int64 a2, signed __int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
void __golang __noreturn runtime_panicSlice3Alen(__int64 a1, signed __int64 a2, __int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
void __golang __noreturn runtime_panicSlice3C(int64 a1, __int64 a2, signed __int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
__int64 runtime_getfp(void); // weak
// _OWORD *__usercall runtime_duffzero@<rdi>();
retval_106DAA0 __golang runtime_duffcopy(__int64 a1, __int64 a2, __int64 a3, _OWORD *a4, __int128 *a5);
__int64 __golang runtime_memclrNoHeapPointers(_OWORD *a1, unsigned __int64 _RBX, double _XMM0_8);
char __golang runtime_memmove(__m128i *a1, const __m128i *a2, unsigned __int64 a3);
void __golang __noreturn runtime_asyncPreempt(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_106EA20 __golang runtime_sigprofNonGoWrapper(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang __noreturn runtime_exit_trampoline(__int64 a1, __int64 a2, __int64 a3, int *a4);
int __golang runtime_open_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
ssize_t __golang runtime_write_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
int __golang runtime_madvise_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
uint64_t runtime_nanotime_trampoline();
int __fastcall runtime_walltime_trampoline(timespec *__tp);
int __golang runtime_sigaction_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
int __golang runtime_sigprocmask_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
int __golang runtime_sigaltstack_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
int runtime_raiseproc_trampoline();
__int64 __golang runtime_sigfwd(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 (__fastcall *a10)(_QWORD, __int64, __int64), unsigned int a11, __int64 a12, __int64 a13);
void __golang runtime_sigtramp(__int64 a1, __int64 a2, __int64 a3, unsigned int a4, __int64 a5);
void __golang runtime_cgoSigtramp(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5);
void *__golang runtime_mmap_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
int __golang runtime_munmap_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
int __golang runtime_usleep_trampoline(__int64 a1, __int64 a2, __int64 a3, useconds_t *a4);
void runtime_settls();
int __golang runtime_sysctl_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
int runtime_kqueue_trampoline();
int __golang runtime_kevent_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
int __golang runtime_fcntl_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
retval_106EFC0 __golang runtime_mstart_stub(__int64 a1, __int64 a2, __int64 a3, unsigned __int64 *a4);
int __golang runtime_pthread_attr_init_trampoline(__int64 a1, __int64 a2, __int64 a3, pthread_attr_t **a4);
int __golang runtime_pthread_attr_getstacksize_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
int __golang runtime_pthread_attr_setdetachstate_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
int __golang runtime_pthread_create_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
int __golang runtime_raise_trampoline(__int64 a1, __int64 a2, __int64 a3, int *a4);
int __golang runtime_pthread_mutex_init_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
int __golang runtime_pthread_mutex_lock_trampoline(__int64 a1, __int64 a2, __int64 a3, pthread_mutex_t **a4);
int __golang runtime_pthread_mutex_unlock_trampoline(__int64 a1, __int64 a2, __int64 a3, pthread_mutex_t **a4);
int __golang runtime_pthread_cond_init_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
int __golang runtime_pthread_cond_wait_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
int __golang runtime_pthread_cond_timedwait_relative_np_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
int __golang runtime_pthread_cond_signal_trampoline(__int64 a1, __int64 a2, __int64 a3, pthread_cond_t **a4);
pthread_t runtime_pthread_self_trampoline();
int __golang runtime_pthread_kill_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
xpc_object_t runtime_osinit_hack_trampoline();
void __golang runtime_arc4random_buf_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
__int64 __golang runtime_syscall(__int64 a1, __int64 a2, __int64 a3, _QWORD *a4);
__int64 __golang runtime_syscallX(__int64 a1, __int64 a2, __int64 a3, _QWORD *a4);
__int64 __golang runtime_syscallPtr(__int64 a1, __int64 a2, __int64 a3, _QWORD *a4);
__int64 __golang runtime_syscall6(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
__int64 __golang runtime_syscall6X(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
int runtime_issetugid_trampoline();
string __golang runtime__ptr_lockRank_String(_ptr_runtime_lockRank);
string __golang runtime__ptr_plainError_Error(_ptr_runtime_plainError);
string __golang runtime__ptr_waitReason_String(_ptr_runtime_waitReason);
string __golang runtime__ptr_errorString_Error(_ptr_runtime_errorString);
string __golang runtime__ptr_errorAddressString_Error(_ptr_runtime_errorAddressString);
string __golang runtime__ptr_boundsError_Error(_ptr_runtime_boundsError);
__int64 __golang runtime_metricReader_compute_fm(__int64 a1, _QWORD *a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10);
__int64 __golang runtime__ptr_itabTableType_add_fm(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10);
unsigned __int128 __golang runtime_debugCallCheck_0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10);
void __golang __noreturn runtime_debugCallWrap_0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 (*a10)(void));
__int64 __golang runtime_reflectcallmove_0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, int a6, int a7, int a8, int a9, __int64 a10, __int64 a11, __int64 a12, __int64 a13, __int64 a14);
unsigned __int64 __golang runtime_wbBufFlush_0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 runtime_osinit_0(); // weak
void __golang __noreturn runtime_asyncPreempt2_0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __gostk __noreturn runtime_badmcall_0(__int64 a1);
void __gostk __noreturn runtime_badmcall2_0(__int64 a1);
void __noreturn runtime_badreflectcall_0(void); // weak
void __golang __noreturn runtime_badmorestackg0_0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, int a6, int a7, int a8, int a9);
__int64 runtime_badmorestackgsignal_0(void); // weak
void runtime_schedinit_0();
__int64 runtime_mstart0_0(void); // weak
void __golang __noreturn runtime_goexit1_0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
unsigned __int64 __golang runtime_newproc_0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 (*a10)(void));
__int64 __golang runtime_args_0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, unsigned int a10, __int64 a11);
void __golang __noreturn runtime_check_0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_sigprofNonGo_0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, unsigned int a10, __int64 a11, __int64 a12);
__int64 __golang runtime_newstack_0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, unsigned int *a6, unsigned int *a7, unsigned __int64 a8, __int64 a9);
void __golang __noreturn runtime_morestackc_0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_badsystemstack_0(_QWORD, _QWORD, _QWORD, _QWORD); // weak
__int64 __golang runtime_reflectcall_0(__int64 a1, retval_106BA60 (__golang **a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double), const void *a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, char a10);
__int64 __golang runtime_asmcgocall_0(__int64 (__fastcall *a1)(__int64), __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_106FC20 __golang runtime_fcntl_0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9);
unsigned int __gostk runtime_write_0(__int64 a1, __int64 a2, unsigned int a3);
bool __golang type__eq_runtime_Frame(__int64 a1, __int64 a2);
bool __golang type__eq_runtime_modulehash(__int64 a1, __int64 a2);
bool __golang type__eq_runtime_bitvector(__int64 a1, __int64 a2);
bool __golang type__eq_runtime__func(const __m128i *a1, const __m128i *a2);
__int64 type__eq_runtime_PanicNilError(); // weak
bool __golang type__eq_runtime_boundsError(__int64 a1, __int64 a2);
bool __golang type__eq_runtime__panic(__int64 a1, __int64 a2);
bool __golang type__eq_runtime_mcache(const __m128i *a1, const __m128i *a2);
bool __golang type__eq_runtime_mspan(__int64 a1, __int64 a2);
bool __golang type__eq_runtime_mSpanList(_QWORD *a1, _QWORD *a2);
bool __golang type__eq_runtime_gcBits(_BYTE *a1, _BYTE *a2);
bool __golang type__eq_runtime_special(__int64 a1, __int64 a2);
bool __golang type__eq_struct__runtime_gList_runtime_n_int32_(__int64 a1, __int64 a2);
bool __golang type__eq_runtime_hchan(__int64 a1, __int64 a2);
bool __golang type__eq_runtime_pTraceState(const __m128i *a1, const __m128i *a2);
__int64 __golang type__eq_runtime_traceSchedResourceState(const __m128i *a1, const __m128i *a2);
__int64 type__eq_runtime_notInHeap(); // weak
bool __golang type__eq_runtime_limiterEvent(_QWORD *a1, _QWORD *a2);
bool __golang type__eq_runtime_gcWork(const __m128i *a1, const __m128i *a2);
bool __golang type__eq_runtime_workbuf(const __m128i *a1, const __m128i *a2);
bool __golang type__eq_runtime_mTraceState(const __m128i *a1, const __m128i *a2);
bool __golang type__eq_runtime_traceBuf(const __m128i *a1, const __m128i *a2);
bool __golang type__eq_runtime_mOS(__int64 a1, __int64 a2);
__int64 __golang type__eq_runtime_gTraceState(const __m128i *a1, const __m128i *a2);
bool __golang type__eq_runtime_errorAddressString(__int64 a1, __int64 a2);
bool __golang type__eq_runtime_untracedG_4(const __m128i *a1, const __m128i *a2);
bool __golang type__eq_runtime_TypeAssertionError(__int64 a1, __int64 a2);
bool __golang type__eq_runtime_piController(__int64 a1, __int64 a2);
bool __golang type__eq__2_runtime_Frame(__int64 a1, __int64 a2);
retval_1070820 __golang sync_atomic__ptr_Uint32_Store(volatile __int32 *a1, __int32 a2);
__int64 __golang sync_atomic_SwapUintptr(volatile __int64 *a1, __int64 a2);
bool __golang sync_atomic_CompareAndSwapUintptr(volatile signed __int64 *a1, signed __int64 a2, signed __int64 a3);
retval_1070880 __golang sync_atomic_StoreUintptr(volatile __int64 *a1, __int64 a2);
bool __golang type__eq_sync_atomic_Bool(_DWORD *a1, _DWORD *a2);
bool __golang type__eq_sync_atomic_Uint32(_DWORD *a1, _DWORD *a2);
bool __golang type__eq_sync_atomic_Uint64(_QWORD *a1, _QWORD *a2);
// string __golang internal_reflectlite_rtype_String(reflectlite_rtype);
// string __golang internal_reflectlite_rtype_Name(reflectlite_rtype);
uintptr __golang internal_reflectlite_elem(reflectlite_rtype a1);
// reflectlite_Type __golang internal_reflectlite_rtype_Elem(reflectlite_rtype);
signed __int64 __golang internal_reflectlite_rtype_Len(reflectlite_rtype);
bool __golang internal_reflectlite_rtype_Comparable(reflectlite_rtype);
bool __golang internal_reflectlite__ptr_rtype_Comparable(_ptr_reflectlite_rtype);
reflectlite_Type __golang internal_reflectlite__ptr_rtype_Elem(_ptr_reflectlite_rtype);
signed __int64 __golang internal_reflectlite__ptr_rtype_Len(_ptr_reflectlite_rtype);
string __golang internal_reflectlite__ptr_rtype_Name(_ptr_reflectlite_rtype);
string __golang internal_reflectlite__ptr_rtype_String(_ptr_reflectlite_rtype);
string __golang errors__ptr_errorString_Error(_ptr_errors_errorString);
__int64 __golang errors_Is(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
__int64 __golang errors_is(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, double a6);
retval_1071260 __golang unicode_utf8_DecodeRune(unsigned __int8 *a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, int a8, int a9);
retval_1071400 __golang unicode_utf8_DecodeRuneInString(unsigned __int8 *a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, int a8, int a9);
retval_10715A0 __golang unicode_utf8_encodeRuneNonASCII(__int64 a1, unsigned __int64 a2, __int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
__int64 __golang unicode_utf8_appendRuneNonASCII(__int64 result, __int64 a2, unsigned __int64 a3, int a4);
// __int64 __golang strconv__ptr_decimal_Assign(_QWORD, _QWORD); weak
// __int64 __golang strconv__ptr_decimal_Shift(_QWORD, _QWORD); weak
// __int64 __golang strconv__ptr_decimal_Round(_QWORD, _QWORD); weak
retval_1071FC0 __golang strconv_genericFtoa(__int64 r0, __int64 a2, unsigned __int64 r2, unsigned __int8 a4, __int64 a5, __int64 a6, double a7);
__int64 __golang strconv_bigFtoa(int a1, int a2, int a3, __int64 a4, unsigned __int8 a5, unsigned __int8 a6, __int64 a7, __int64 a8, _QWORD *a9);
// __int64 __golang strconv_formatDigits(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64, __int64, __int64, __int64, __int64); weak
// __int64 __golang strconv_roundShortest(_QWORD, _QWORD, _QWORD, _QWORD); weak
__int64 __golang strconv_fmtE(__int64 result, __int64 r1, unsigned __int64 r2, char a4, char *a5, __int64 a6, unsigned __int64 a7, __int64 a8, __int64 a9, __int64 a10, char a11);
__int64 __golang strconv_fmtF(__int64 result, __int64 r1, unsigned __int64 r2, unsigned __int64 a4, const __m128i *a5, unsigned __int64 a6, unsigned __int64 a7, __int64 a8, __int64 a9, __int64 a10);
// __int64 __fastcall strconv_fmtB(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
__int64 __golang strconv_fmtX(__int64 r0, __int64 r1, unsigned __int64 r2, __int64 a4, unsigned __int8 a5, char a6, __int64 a7, __int64 a8, _QWORD *a9);
unsigned __int64 __golang strconv_ryuFtoaFixed32(unsigned __int64 result, unsigned int a2, __int64 a3, signed __int64 a4);
unsigned __int64 __golang strconv_ryuFtoaFixed64(unsigned __int64 result, unsigned __int64 a2, __int64 a3, signed __int64 a4);
unsigned __int64 __golang strconv_formatDecimal(char *a1, unsigned __int64 a2, char a3, char *a4, unsigned __int64 a5, int a6, unsigned __int64 a7, const char *a8, int a9);
// __int64 __golang strconv_ryuFtoaShortest(_QWORD, _QWORD, _QWORD, _QWORD); weak
__int64 *__golang strconv_ryuDigits32(__int64 *result, unsigned int a2, unsigned int a3, unsigned int a4, bool a5, __int64 a6, __int64 a7, __int64 a8, int a9);
// retval_10752C0 __golang strconv_mult64bitPow10(_QWORD, _QWORD, _QWORD); weak
// retval_10753A0 __golang strconv_mult128bitPow10(_QWORD, _QWORD, _QWORD); weak
retval_10754C0 __golang strconv_FormatInt(__int64 a1, unsigned __int64 a2, __int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
retval_10755A0 __golang strconv_formatBits(unsigned __int64 r0, __int64 a2, unsigned __int64 r2, unsigned __int64 a4, unsigned __int64 a5, char a6, char a7);
__m128i *__golang strconv_appendQuotedWith(__m128i *result, unsigned __int64 a2, unsigned __int64 a3, unsigned __int8 *a4, unsigned __int64 a5, __int64 a6, __int64 a7, unsigned int a8);
// __int64 __fastcall strconv_appendEscapedRune(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
// __int64 __golang strconv_IsPrint(_QWORD); weak
// void __golang internal_sync__ptr_Mutex_lockSlow(_ptr_sync_Mutex_0);
// __int64 __golang internal_sync__ptr_Mutex_unlockSlow(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
__int64 __golang sync__ptr_Once_doSlow(__int64 a1, void (**a2)(void));
// __int64 __golang sync__ptr_Once_doSlow_deferwrap2(int, int, int, int, int, int, int, int, int, char); weak
// __int64 __golang sync__ptr_Once_doSlow_deferwrap1(int, int, int, int, int, int, int, int, int, char); weak
// __int64 __golang sync__ptr_Pool_Put(_QWORD, _QWORD, _QWORD); weak
// interface_ __golang sync__ptr_Pool_Get(_ptr_sync_Pool);
retval_1077140 __golang sync__ptr_Pool_getSlow(__int64 *a1, unsigned __int64 a2);
// __int64 __golang sync__ptr_poolDequeue_pushHead(_QWORD); weak
// retval_1077760 __golang sync__ptr_poolDequeue_popHead(_QWORD); weak
__int64 __golang sync__ptr_poolChain_pushHead(sync_poolChainElt **a1);
retval_1077BA0 __golang sync__ptr_poolChain_popHead(__int64 *a1);
// __int64 __golang sync__ptr_poolChain_popTail(_QWORD); weak
__int64 __golang internal_sync__ptr_HashTrieMap_go_shape_interface__comma_go_shape_interface___iter(__int64 a1, __int64 a2, __int64 a3, unsigned __int8 (__golang **a4)(_QWORD, _QWORD, _QWORD, _QWORD));
__int64 __golang internal_sync__ptr_HashTrieMap_go_shape_interface__comma_go_shape_interface___Range(__int64 a1, __int64 a2, unsigned __int8 (__golang **a3)(_QWORD, _QWORD, _QWORD, _QWORD));
retval_10780E0 __golang internal_sync__ptr_HashTrieMap_go_shape_interface__comma_go_shape_interface___expand(__int64 a1, __int64 a2, __int64 a3, __int64 a4, unsigned __int64 a5, __int64 a6, sync_indirect_go_shape_interface__comma_go_shape_interface__ *a7);
retval_1078320 __golang internal_sync__ptr_HashTrieMap_go_shape_interface__comma_go_shape_interface___LoadOrStore(__int64 a1, __int64 a2, void *a3, void *a4, __int64 a5, __int64 a6);
// __int64 __golang internal_sync__ptr_HashTrieMap_go_shape_interface__comma_go_shape_interface___LoadOrStore_deferwrap1(int, int, int, int, int, int, int, int, int, char); weak
retval_1078A20 __golang internal_sync__ptr_HashTrieMap_go_shape_interface__comma_go_shape_interface___Load(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
__int64 __golang internal_sync__ptr_HashTrieMap_go_shape_interface__comma_go_shape_interface___initSlow(__int64 a1, __int64 a2);
// __int64 __golang internal_sync__ptr_HashTrieMap_go_shape_interface__comma_go_shape_interface___initSlow_deferwrap1(int, int, int, int, int, int, int, int, int, char); weak
__int64 __golang type__eq_sync_Mutex(_DWORD *a1, _DWORD *a2);
bool __golang type__eq_sync_atomic_Pointer_sync_poolChainElt_(_QWORD *a1, _QWORD *a2);
bool __golang type__eq_sync_poolLocal(const __m128i *a1, const __m128i *a2);
__int64 __golang type__eq_sync_poolLocalInternal(_QWORD *a1, _QWORD *a2);
bool __golang type__eq_sync_poolChain(_QWORD *a1, _QWORD *a2);
bool __golang type__eq_sync_atomic_Pointer_internal_sync_indirect_interface__comma_interface___(_QWORD *a1, _QWORD *a2);
__int64 __golang type__eq_internal_sync_indirect_interface__comma_interface__(__int64 a1, __int64 a2);
__int64 __golang type__eq_internal_sync_entry_interface__comma_interface__(__int64 a1, __int64 a2);
bool __golang type__eq_sync_atomic_Pointer_internal_sync_entry_interface__comma_interface___(_QWORD *a1, _QWORD *a2);
__int64 __golang type__eq__16_sync_atomic_Pointer_internal_sync_node_interface__comma_interface___(__int64 a1, __int64 a2);
bool __golang type__eq_sync_atomic_Pointer_internal_sync_node_interface__comma_interface___(_QWORD *a1, _QWORD *a2);
__int64 __golang type__eq_sync_Once(_DWORD *a1, _DWORD *a2);
__int64 __golang type__eq_internal_sync_entry_go_shape_interface__comma_go_shape_interface__(__int64 a1, __int64 a2);
bool __golang type__eq_sync_atomic_Pointer_internal_sync_entry_go_shape_interface__comma_go_shape_interface___(_QWORD *a1, _QWORD *a2);
__int64 __golang type__eq_internal_sync_indirect_go_shape_interface__comma_go_shape_interface__(__int64 a1, __int64 a2);
__int64 __golang type__eq__16_sync_atomic_Pointer_go_shape_struct__internal_sync_isEntry_bool__(__int64 a1, __int64 a2);
bool __golang type__eq_sync_atomic_Pointer_go_shape_struct__internal_sync_isEntry_bool__(_QWORD *a1, _QWORD *a2);
void unicode_init();
// retval_10795C0 __golang internal_itoa_Itoa(_QWORD, _QWORD, _QWORD); weak
void reflect_init();
__int64 __golang reflect__ptr_abiSeq_addArg(__int64 *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, int a8, _QWORD *a9);
// retval_1079B60 __golang reflect__ptr_abiSeq_addRcvr(_QWORD); weak
__int64 __golang reflect__ptr_abiSeq_regAssign(_QWORD *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, int a7, int a8, int a9);
__int64 __golang reflect__ptr_abiSeq_assignIntN(_QWORD *a1, __int64 a2, __int64 a3, unsigned __int64 a4, unsigned __int8 a5);
retval_107A620 __golang reflect_newAbiDesc(__int64 a1, __int64 a2);
// __int64 __fastcall reflect_intFromReg(_QWORD, _QWORD, _QWORD, _QWORD); weak
// __int64 __golang reflect_intToReg(_QWORD, _QWORD, _QWORD, _QWORD); weak
// __int64 __golang reflect_moveMakeFuncArgPtrs(_QWORD, _QWORD); weak
void __golang reflect_mapIterStart(__int64 a1, _QWORD *a2, __int64 *a3);
void __golang reflect_mapIterNext(__int64 *a1);
__int64 __golang reflect__ptr_MapIter_Key(_QWORD *a1);
__int64 __golang reflect__ptr_MapIter_Value(_QWORD *a1);
bool __golang reflect__ptr_MapIter_Next(__int64 *a1);
// void __golang reflect_flag_panicNotMap(reflect_flag);
retval_107B7C0 __golang reflect__ptr_rtype_exportedMethods(__int64 a1);
uintptr __golang reflect_elem(reflect_rtype *a1);
// string __golang reflect_ChanDir_String(reflect_ChanDir);
__int64 *__golang reflect__ptr_structType_Field(abi_Name *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, size_t len);
retval_107BBC0 __golang reflect_funcLayout(reflect_rtype *a1, reflect_rtype *a2);
// __int64 __golang reflect_funcLayout_func1(); weak
int *__golang reflect_addTypeBits(int *result, unsigned __int64 a2, __int64 a3, int a4, int a5, int a6, __int64 a7, int a8, _QWORD *a9);
__int64 __golang reflect_packEface(__int64 result, __int64 a2, __int16 a3);
// void __golang reflect_Value_panicNotBool(reflect_Value);
retval_107CD80 __golang reflect_Value_bytesSlow(__int64 a1, __int64 a2, __int16 a3, __int64 r3, __int64 a5, __int64 r5, __int64 r6, __int64 r7);
retval_107CF80 __golang reflect_methodReceiver(__int64 a1, __int64 a2, __int64 a3, __int64 *a4, __int64 a5, unsigned __int64 a6);
__int64 __golang reflect_callMethod(unsigned __int64 *a1, __int64 a2, _BYTE *a3, _QWORD *a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, unsigned __int64 *a10);
retval_107E2A0 __golang reflect_Value_Elem(abi_Type *a1, _QWORD *a2, char a3);
__int64 __golang reflect_Value_Field(__int64 a1, __int64 a2, char a3, unsigned __int64 a4);
// retval_107E580 __golang reflect_Value_Index(_QWORD, _QWORD, _QWORD); weak
signed __int64 __golang reflect_Value_lenNonSlice(reflect_Value);
// __int64 __golang reflect_copyVal(_QWORD, _QWORD); weak
// signed __int64 __golang reflect_Value_NumField(reflect_Value);
uintptr __golang reflect_Value_Pointer(reflect_Value);
string __golang reflect_Value_stringNonString(reflect_Value);
reflect_Type __golang reflect_Value_typeSlow(reflect_Value);
_ptr_abi_Type __golang reflect_Value_abiTypeSlow(reflect_Value);
retval_107F0A0 __golang reflect_Value_UnsafePointer(_QWORD *a1, _QWORD *a2, __int16 a3);
bool __golang reflect_Value_Comparable(reflect_Value);
// string __golang reflect__ptr_rtype_String(_ptr_reflect_rtype);
reflect_Kind __golang reflect__ptr_rtype_Kind(_ptr_reflect_rtype);
bool __golang reflect__ptr_rtype_Comparable(_ptr_reflect_rtype);
// __int64 __golang reflect_valueInterface(_QWORD, _QWORD, _QWORD, _QWORD); weak
retval_107FA40 __golang reflect_methodValueCall(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, double a17, double a18, double a19, double a20, double a21, double a22, double a23, double a24, char a25);
__int64 __golang type__eq_reflect_Method(__int64 a1, __int64 a2);
string __golang reflect__ptr_Kind_String(_ptr_reflect_Kind);
string __golang reflect__ptr_ChanDir_String(_ptr_reflect_ChanDir);
bool __golang reflect__ptr_Value_Comparable(_ptr_reflect_Value);
reflect_Kind __golang reflect__ptr_Value_Kind(_ptr_reflect_Value);
signed __int64 __golang reflect__ptr_Value_Len(_ptr_reflect_Value);
string __golang reflect__ptr_Value_String(_ptr_reflect_Value);
__int64 __golang reflect_moveMakeFuncArgPtrs_0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, __int64 a11);
__int64 __golang reflect_callMethod_0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, unsigned __int64 *a10, __int64 a11, _BYTE *a12, _QWORD *a13);
bool __golang type__eq_reflect_ValueError(__int64 a1, __int64 a2);
bool __golang type__eq_reflect_makeFuncCtxt(__int64 a1, __int64 a2);
__int64 __golang type__eq_reflect_methodValue(__int64 a1, __int64 a2);
retval_1080040 __golang internal_fmtsort_Sort(abi_Type *data, void *a2, reflect_flag a3);
__int64 __golang internal_fmtsort_compare(abi_Type *data, double *a2, reflect_flag a3, abi_Type *a4, double *a5, reflect_flag a6);
// retval_1081160 __golang internal_fmtsort_nilCompare(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
__int64 __golang internal_fmtsort_Sort_func1(abi_Type *a1, double *a2, reflect_flag a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, abi_Type *a10, double *a11, reflect_flag a12);
__int64 __golang slices_stableCmpFunc_go_shape_struct__Key_reflect_Value_Value_reflect_Value__(__int64 result, __int64 a2, unsigned __int64 a3, __int128 *a4, __int64 a5, _QWORD *a6);
unsigned __int64 __golang slices_symMergeCmpFunc_go_shape_struct__Key_reflect_Value_Value_reflect_Value__(unsigned __int64 result, __int64 a2, unsigned __int64 a3, _OWORD *a4, int64 a5, char *a6, char *a7, _QWORD *a8);
__int64 __golang slices_rotateCmpFunc_go_shape_struct__Key_reflect_Value_Value_reflect_Value__(__int64 a1, __int64 a2, unsigned __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, _OWORD *i, __int64 a9);
retval_1082C60 __golang internal_bisect_New(const char *a1, unsigned __int64 a2);
// __int64 __golang internal_bisect__ptr_Matcher_stack(_QWORD, _QWORD, _QWORD); weak
retval_1083A20 __golang internal_bisect_printStack(__int64 a1, __int64 a2, unsigned __int64 a3, uintptr *a4, size_t a5, size_t a6);
__int64 __golang internal_bisect_Hash(__int64 a1, __int64 r1);
string __golang internal_bisect__ptr_parseError_Error(_ptr_bisect_parseError);
bool __golang type__eq_internal_bisect_cond(__int64 a1, __int64 a2);
bool __golang type__eq_sync_atomic_Pointer_internal_bisect_dedup_(_QWORD *a1, _QWORD *a2);
void __golang internal_godebug__ptr_Setting_IncNonDefault(_ptr_godebug_Setting);
void __golang internal_godebug__ptr_Setting_register(_ptr_godebug_Setting);
string __golang internal_godebug__ptr_Setting_Value(_ptr_godebug_Setting);
// __int64 __golang internal_godebug__ptr_Setting_Value_func1(); weak
godebug_setting *__golang internal_godebug_lookup(const __m128i *a1, char *a2);
__int64 __golang internal_godebug_update(__int64 a1, unsigned __int64 a2, __int64 a3, unsigned __int64 a4);
// __int64 __golang internal_godebug_update_func1(); weak
// __int64 __golang internal_godebug_update_deferwrap1(int, int, int, int, int, int, int, int, int, char); weak
__int64 __golang internal_godebug_parse(__int64 result, __int64 a2, unsigned __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, int a8, int a9);
void __golang internal_godebug__ptr_Setting_IncNonDefault_fm(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, char a10);
__int64 __golang sync_atomic__ptr_Uint64_Load_fm(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, char a10);
void __golang internal_godebug__ptr_Setting_register_fm(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, char a10);
bool __golang type__eq_internal_godebug_setting(__int64 a1, __int64 a2);
bool __golang type__eq_sync_atomic_Pointer_internal_godebug_value_(_QWORD *a1, _QWORD *a2);
bool __golang type__eq_internal_godebug_value(__int64 a1, __int64 a2);
bool __golang type__eq_internal_godebug_Setting(__int64 a1, __int64 a2);
// retval_1085DA0 __golang syscall_Getenv(_QWORD, _QWORD); weak
retval_1086040 __golang syscall_SetNonblock(__int64 a1, char a2);
__int64 syscall_init_0(); // weak
__int64 __golang syscall_adjustFileLimit(_QWORD *a1);
// retval_10861E0 __golang syscall_ByteSliceFromString(_QWORD, _QWORD); weak
// retval_10862A0 __golang syscall_Getwd(); weak
// retval_10863C0 __golang syscall_SysctlUint32(_QWORD, _QWORD); weak
retval_1086480 __golang syscall_nametomib(__int64 a1, __int64 a2);
// string __golang syscall_Errno_Error(syscall_Errno);
bool __golang syscall_Errno_Is(syscall_Errno, error);
// __int64 __golang syscall_Close(_QWORD); weak
// retval_10868C0 __golang syscall_Dup(); weak
retval_1086980 __golang syscall_Getrlimit(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __fastcall syscall_Open(_QWORD, _QWORD, _QWORD, _QWORD); weak
// retval_1086B80 __golang syscall_read(_QWORD, _QWORD, _QWORD, _QWORD); weak
// retval_1086C80 __golang syscall_Seek(_QWORD, _QWORD, _QWORD); weak
retval_1086D60 __golang syscall_setrlimit(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// retval_1086E20 __golang syscall_write(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
retval_10871A0 __golang syscall_Fstat(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// retval_10875A0 __golang syscall_fcntl(_QWORD, _QWORD, _QWORD); weak
// __int64 __golang syscall_closedir(_QWORD); weak
retval_1087740 __golang syscall_readdir_r(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_10878C0 __golang syscall_sysctl(__int64 *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
int __cdecl syscall_libc_getrlimit_trampoline(int, rlimit *);
int __cdecl syscall_libc_readdir_r_trampoline(DIR *, dirent *, dirent **);
int __cdecl syscall_libc_setrlimit_trampoline(int, const rlimit *);
int __cdecl syscall_libc_sysctl_trampoline(int *, u_int, void *, size_t *, void *, size_t);
int __cdecl syscall_libc_fstat64_trampoline(int, stat64 *);
string __golang syscall__ptr_Errno_Error(_ptr_syscall_Errno);
bool __golang syscall__ptr_Errno_Is(_ptr_syscall_Errno, error);
retval_1087EC0 __golang time_appendInt(__int64 r0, __int64 r1, unsigned __int64 r2, unsigned __int64 a4, __int64 a5, double a6, __int64 a7, __int64 a8, int a9, int a10);
// retval_10882A0 __golang time_appendNano(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
string __golang time_Time_String(time_Time);
string __golang time_Time_GoString(time_Time);
retval_1088C60 __golang time_Time_Format(__int64 a1, __int64 a2, __int64 a3, const __m128i *a4, unsigned __int64 a5);
__int64 __golang time_Time_AppendFormat(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, unsigned __int64 a6, const __m128i *a7, unsigned __int64 a8);
retval_1088FA0 __golang time_Time_appendFormat(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, unsigned __int64 a6, __int64 a7, unsigned __int64 a8);
retval_108B440 __golang time_quote(__int64 a1, signed __int64 a2);
__int64 __golang time_Time_appendFormatRFC3339(int a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, unsigned __int64 a6, char a7);
retval_108BD60 __golang time_preadn(__int64 a1, __int64 a2, unsigned __int64 a3, __int64 a4, __int64 a5);
retval_108BEC0 __golang time_absDays_date(__int64 a1);
retval_108BF80 __golang time_absDays_yearYday(__int64 a1);
// __int64 __golang time_Time_absSec(_QWORD, _QWORD); weak
// retval_108C180 __golang time_Time_locabs(); weak
retval_108C6E0 __golang time_tzset(_BYTE *a1, __int64 a2, __int64 a3, __int64 a4, int a5, __int64 a6, __int64 a7, int a8, int a9);
retval_108CC80 __golang time_tzsetName(_BYTE *a1, __int64 a2, __int64 a3, int a4, int a5, __int64 a6, __int64 a7, int a8, int a9);
// retval_108CE60 __golang time_tzsetOffset(_QWORD, _QWORD); weak
// retval_108D3A0 __golang time_tzsetRule(_QWORD); weak
__int64 __golang time_tzruleTime(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7);
// retval_108E0E0 __golang time__ptr_dataIO_big8(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
retval_108E260 __golang time_LoadLocationFromTZData(__int64 a1, size_t a2, signed __int64 a3, signed __int64 a4, __int64 a5, __int64 a6, int a7, signed __int64 a8);
retval_108F740 __golang time_loadTzinfoFromZip(__int64 a1, __int64 a2, const __m128i *a3, __int64 a4, __int64 a5);
__int64 __golang time_loadTzinfoFromZip_deferwrap1(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, char a10);
// retval_1090320 __golang time_loadTzinfo(_QWORD, _QWORD, _QWORD, _QWORD); weak
retval_10903E0 __golang time_loadLocation(__int64 a1, size_t a2, _QWORD *a3, __int64 a4);
__int64 __golang time_readFile_deferwrap1(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, char a10);
const char *time_initLocal();
retval_1091000 __golang time_nextStdChunk(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, int a5, __int64 a6, __int64 a7, int a8, int a9);
string __golang time__ptr_Time_GoString(_ptr_time_Time);
string __golang time__ptr_Time_String(_ptr_time_Time);
string __golang time__ptr_fileSizeError_Error(_ptr_time_fileSizeError);
bool __golang type__eq_time_zone(__int64 a1, __int64 a2);
bool __golang type__eq_time_zoneTrans(__int64 a1, __int64 a2);
retval_1092260 __golang io_fs_FormatDirEntry(__int64 a1, __int64 a2);
// string __golang io_fs_FileMode_String(fs_FileMode);
bool __golang io_fs_FileMode_IsDir(fs_FileMode);
__int64 __golang io_fs_FileMode_Type(int a1);
string __golang io_fs__ptr_PathError_Error(_ptr_fs_PathError);
error __golang io_fs__ptr_PathError_Unwrap(_ptr_fs_PathError);
__int64 __golang type__eq_io_fs_PathError(__int64 a1, __int64 a2);
bool __golang io_fs__ptr_FileMode_IsDir(_ptr_fs_FileMode);
string __golang io_fs__ptr_FileMode_String(_ptr_fs_FileMode);
__int64 __golang io_fs__ptr_FileMode_Type(_DWORD *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, char a10);
// retval_10928C0 __golang internal_filepathlite_Base(_QWORD, _QWORD); weak
__int64 __golang internal_testlog_Getenv(__int64 result, __int64 a2);
__int64 __golang internal_testlog_Stat(__int64 result, __int64 a2);
// retval_1092A60 __golang internal_syscall_unix_Fcntl(_QWORD, _QWORD, _QWORD); weak
string __golang internal_poll__ptr_DeadlineExceededError_Error(_ptr_poll_DeadlineExceededError);
// __int64 __golang internal_poll__ptr_fdMutex_rwlock(_QWORD, _QWORD); weak
// error __golang internal_poll__ptr_FD_decref(_ptr_poll_FD);
// void __golang internal_poll__ptr_FD_writeUnlock(_ptr_poll_FD);
// retval_1092F80 __golang internal_poll__ptr_FD_OpenDir(); weak
// __int64 __golang internal_poll__ptr_pollDesc_prepare(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// __int64 __golang internal_poll__ptr_pollDesc_wait(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64, __int64); weak
// __int64 __golang internal_poll__ptr_FD_Init(_QWORD, _QWORD, _QWORD, _QWORD); weak
// error __golang internal_poll__ptr_FD_Close(_ptr_poll_FD);
retval_10D43A0 __golang internal_poll__ptr_FD_Write(_ptr_poll_FD, _slice_uint8);
void __golang internal_poll__ptr_FD_Write_deferwrap1(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, char a10);
retval_1093BE0 __golang internal_poll__ptr_FD_Fstat(volatile signed __int64 *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_1093D80 __golang internal_poll__ptr_FD_Fstat_deferwrap1(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, char a10);
// retval_1093DE0 __golang internal_poll_DupCloseOnExec(_QWORD); weak
retval_1093F00 __golang internal_poll__ptr_FD_Dup(volatile signed __int64 *a1);
retval_10940A0 __golang internal_poll__ptr_FD_Dup_deferwrap1(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, char a10);
retval_1094100 internal_poll_dupCloseOnExecOld();
// __int64 __golang internal_poll_dupCloseOnExecOld_deferwrap1(int, int, int, int, int, int, int, int, int, char); weak
string __golang internal_poll__ptr_errNetClosing_Error(_ptr_poll_errNetClosing);
bool __golang type__eq_internal_poll_FD(const __m128i *a1, const __m128i *a2);
// retval_1094640 __golang os__ptr_File_Readdirnames(_QWORD, _QWORD, _QWORD); weak
retval_10946E0 __golang os__ptr_File_readdir(__int64 a1, __int64 a2, __int64 a3);
// retval_10952A0 __golang os_Getenv(_QWORD, _QWORD); weak
string __golang os__ptr_SyscallError_Error(_ptr_os_SyscallError);
error __golang os__ptr_SyscallError_Unwrap(_ptr_os_SyscallError);
__int64 __golang os_underlyingErrorIs(__int64 a1, _QWORD *a2, RTYPE **a3, __int64 a4);
retval_10D43A0 __golang os__ptr_File_Write(_ptr_os_File, _slice_uint8);
retval_10957E0 __golang os__ptr_File_wrapErr(__int64 a1, char *a2, size_t a3, RTYPE **a4, __int64 a5);
os_File *__golang os_NewFile(signed __int64 a1, char *a2, size_t a3);
os_File *__golang os_newFile(signed __int64 a1, char *a2, size_t a3, __int64 a4, char a5);
retval_1095E20 __golang os_openDirNolog(char *a1, size_t a2, __int64 a3, __int64 a4, __int64 a5);
error __golang os__ptr_file_close(_ptr_os_file);
string __golang os__ptr_unixDirent_Name(_ptr_os_unixDirent);
bool __golang os__ptr_unixDirent_IsDir(_ptr_os_unixDirent);
fs_FileMode __golang os__ptr_unixDirent_Type(_ptr_os_unixDirent);
string __golang os__ptr_unixDirent_String(_ptr_os_unixDirent);
retval_10961A0 __golang os_newUnixDirent(char *a1, size_t a2, char *a3, size_t a4, fs_FileMode a5);
retval_1096340 os_Getwd();
__int64 __golang os_fillFileStatFromSys(__int64 a1, __int64 a2, __int64 a3);
retval_10D24E0 __golang os__ptr_File_Stat(_ptr_os_File);
// retval_10970C0 __golang os_statNolog(_QWORD, _QWORD); weak
// __int64 __golang os_lstatNolog(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
string __golang os__ptr_fileStat_Name(_ptr_os_fileStat);
fs_FileMode __golang os__ptr_fileStat_Mode(_ptr_os_fileStat);
bool __golang type__eq_os_fileStat(__int64 a1, __int64 a2);
bool __golang type__eq_os_file(__int64 a1, __int64 a2);
bool __golang type__eq_sync_atomic_Pointer_os_dirInfo_(_QWORD *a1, _QWORD *a2);
__int64 __golang type__eq_os_unixDirent(__int64 a1, __int64 a2);
__int64 __golang type__eq_os_LinkError(__int64 a1, __int64 a2);
__int64 __golang type__eq_os_SyscallError(__int64 a1, __int64 a2);
void __golang fmt__ptr_fmt_writePadding(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, int a7, int a8, int a9);
void __golang fmt__ptr_fmt_pad(__int64 a1, const __m128i *a2, signed __int64 a3, __int64 a4, __int64 a5, __int64 a6, int a7, int a8, int a9);
void __golang fmt__ptr_fmt_padString(__int64 **a1, const __m128i *a2, signed __int64 a3, __int64 a4, __int64 a5, __int64 a6, int a7, int a8, int a9);
void __golang fmt__ptr_fmt_fmtUnicode(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, int a7, __int64 a8, int a9);
// __int64 __golang fmt__ptr_fmt_fmtInteger(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
retval_1098900 __golang fmt__ptr_fmt_truncate(__int64 a1, __int64 a2, signed __int64 a3, unsigned __int64 a4, __int64 a5, __int64 a6, __int64 a7, int a8, int a9);
// __int64 __golang fmt__ptr_fmt_fmtS(_QWORD, _QWORD, _QWORD); weak
// __int64 __golang fmt__ptr_fmt_fmtBs(_QWORD); weak
void __golang fmt__ptr_fmt_fmtSbx(__int64 a1, __int64 a2, unsigned __int64 a3, __int64 a4, unsigned __int64 a5, __int64 a6, __int64 a7, unsigned __int64 a8, int a9);
// __int64 __golang fmt__ptr_fmt_fmtQ(_QWORD, _QWORD, _QWORD); weak
void __golang fmt__ptr_fmt_fmtC(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, int a7, int a8, int a9);
void __golang fmt__ptr_fmt_fmtFloat(__int64 a1, __int64 a2, int a3, __int64 a4, double a5);
// __int64 __golang fmt_Fprintln(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
// retval_1099FA0 __golang fmt_getField(_QWORD, _QWORD, _QWORD); weak
// __int64 fmt__ptr_pp_unknownType(void); weak
// __int64 __golang fmt__ptr_pp_badVerb(_QWORD, _QWORD); weak
// __int64 __golang fmt__ptr_pp_fmtBool(_QWORD, _QWORD, _QWORD); weak
__int64 __golang fmt__ptr_pp_fmt0x64(__int64 a1, __int64 a2, char a3);
// __int64 __fastcall fmt__ptr_pp_fmtInteger(_QWORD, _QWORD, _QWORD, _QWORD); weak
// __int64 __golang fmt__ptr_pp_fmtFloat(double); weak
// __int64 __golang fmt__ptr_pp_fmtComplex(double, double); weak
// __int64 __fastcall fmt__ptr_pp_fmtString(_QWORD, _QWORD, _QWORD, _QWORD); weak
void __golang fmt__ptr_pp_fmtBytes(_QWORD *a1, __int64 a2, signed __int64 a3, __int64 a4, __int64 a5, const __m128i *a6, unsigned __int64 a7, __int64 a8, int a9);
// __int64 __golang fmt__ptr_pp_fmtPointer(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
void __golang fmt__ptr_pp_catchPanic(__int64 *a1, __int64 a2, _QWORD *a3, unsigned int a4, const __m128i *a5, unsigned __int64 a6);
// __int64 __golang fmt__ptr_pp_handleMethods(_QWORD, _QWORD); weak
void __golang fmt__ptr_pp_printArg(_QWORD *a1, reflect_rtype *a2, unsigned __int8 *a3, __int64 a4, __int64 a5, __int64 a6, int a7, int a8, _QWORD *a9);
void __golang fmt__ptr_pp_printValue(_QWORD *a1, abi_Type *data, _QWORD *a3, reflect_flag a4, __int64 a5, __int64 a6);
bool __golang type__eq_fmt_fmt(__int64 a1, __int64 a2);
void __fastcall main_main();
__int64 go_textfipsstart(); // weak
void go_textfipsend();
void __cdecl __noreturn _exit(int);
// int open(const char *, int, ...);
// ssize_t __cdecl write(int __fd, const void *__buf, size_t __nbyte);
// int *__error(void);
// int __cdecl madvise(void *, size_t, int);
// uint64_t mach_absolute_time(void);
// kern_return_t __cdecl mach_timebase_info(mach_timebase_info_t info);
// int __cdecl clock_gettime(clockid_t __clock_id, timespec *__tp);
// int __cdecl sigaction(int, const sigaction *, sigaction *);
// int __cdecl pthread_sigmask(int, const sigset_t *, sigset_t *);
// int __cdecl sigaltstack(const stack_t *, stack_t *);
// pid_t getpid(void);
// int __cdecl kill(pid_t, int);
// void *__cdecl mmap(void *, size_t, int, int, int, off_t);
// int __cdecl munmap(void *, size_t);
// int __cdecl usleep(useconds_t);
// int __cdecl sysctl(int *, u_int, void *, size_t *, void *, size_t);
// int kqueue(void);
// int __cdecl kevent(int kq, const kevent *changelist, int nchanges, kevent *eventlist, int nevents, const timespec *timeout);
// int fcntl(int, int, ...);
// int __cdecl pthread_attr_init(pthread_attr_t *);
// int __cdecl pthread_attr_getstacksize(const pthread_attr_t *, size_t *);
// int __cdecl pthread_attr_setdetachstate(pthread_attr_t *, int);
// int __cdecl pthread_create(pthread_t *, const pthread_attr_t *, void *(__cdecl *)(void *), void *);
// int __cdecl raise(int);
// int __cdecl pthread_mutex_init(pthread_mutex_t *, const pthread_mutexattr_t *);
// int __cdecl pthread_mutex_lock(pthread_mutex_t *);
// int __cdecl pthread_mutex_unlock(pthread_mutex_t *);
// int __cdecl pthread_cond_init(pthread_cond_t *, const pthread_condattr_t *);
// int __cdecl pthread_cond_wait(pthread_cond_t *, pthread_mutex_t *);
// int __cdecl pthread_cond_timedwait_relative_np(pthread_cond_t *, pthread_mutex_t *, const timespec *);
// int __cdecl pthread_cond_signal(pthread_cond_t *);
// pthread_t pthread_self(void);
// int __cdecl pthread_kill(pthread_t, int);
// bool __cdecl notify_is_valid_token(int val);
// xpc_object_t xpc_date_create_from_current(void);
// void __cdecl arc4random_buf(void *__buf, size_t __nbytes);
// int issetugid(void);

//-------------------------------------------------------------------------
// Data declarations

int dword_1000000 = -17958193; // weak
_UNKNOWN loc_106B506; // weak
_UNKNOWN loc_106D3C1; // weak
char a0123456789abcd[16] = "0123456789abcdef"; // weak
char a0123456789abcd_1[17] = "0123456789ABCDEFX"; // weak
char a0123456789abcd_3[36] = "0123456789abcdefghijklmnopqrstuvwxyz"; // weak
char a00010203040506[201] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899"; // weak
__int64 qword_10C5090 = 2LL; // weak
__int64 qword_10C5098 = 9LL; // weak
__int64 qword_10C50F0 = 4LL; // weak
__int64 qword_10C52A0[4] = { 58LL, 136LL, 341LL, 16LL }; // weak

==================================================

// function name: go_textfipsend

// 109EF20: using guessed type __int64 go_textfipsstart();
// 109EF40: using guessed type __int64 go_textfipsend(void);

//----- (000000000109EF40) ----------------------------------------------------
void go_textfipsend()
{
  __debugbreak();
  __debugbreak();
  __debugbreak();
  __debugbreak();
  __debugbreak();
  __debugbreak();
  __debugbreak();
  __debugbreak();
  __debugbreak();
  __debugbreak();
  __debugbreak();
  __debugbreak();
  __debugbreak();
  __debugbreak();
  __debugbreak();
  __debugbreak();
  JUMPOUT(0x109EF50);
}

==================================================

// function name: runtime_kevent_trampoline

//----- (000000000106EF40) ----------------------------------------------------
// runtime.kevent_trampoline
int __golang runtime_kevent_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
{
  __int64 v4; // rax

  LODWORD(v4) = kevent(
                  *(_DWORD *)a4,
                  *(const kevent **)(a4 + 8),
                  *(_DWORD *)(a4 + 16),
                  *(kevent **)(a4 + 24),
                  *(_DWORD *)(a4 + 32),
                  *(const timespec **)(a4 + 40));
  if ( (_DWORD)v4 == -1 )
    return -(__int64)*__error();
  return v4;
}

==================================================

// function name: setg_gcc

// 106A6FC: variable 'v10' is possibly undefined
// 106D260: using guessed type void __noreturn runtime_abort(void);

//----- (000000000106A720) ----------------------------------------------------
// setg_gcc
void __golang setg_gcc(__int64 a1, __int64 a2, __int64 a3, unsigned __int64 a4)
{
  __writegsqword(0x30u, a4);
}

==================================================

// function name: runtime_procyield

//----- (000000000106D000) ----------------------------------------------------

//----- (000000000106D0E0) ----------------------------------------------------
// runtime.procyield
__int64 __golang runtime_procyield(
        __int64 a1,
        __int64 a2,
        __int64 a3,
        __int64 a4,
        __int64 a5,
        __int64 a6,
        __int64 a7,
        __int64 a8,
        __int64 a9,
        int a10)
{
  __int64 result; // rax

  LODWORD(result) = a10;
  do
  {
    _mm_pause();
    result = (unsigned int)(result - 1);
  }
  while ( (_DWORD)result );
  return result;
}

==================================================

// function name: runtime_memequal

// 11966A3: using guessed type char byte_11966A3;

//----- (0000000001003140) ----------------------------------------------------
// runtime.memequal
bool __golang runtime_memequal(const __m128i *a1, const __m128i *a2, unsigned __int64 a3)
{
  return a1 == a2 || memeqbody((__int64)a1, a3, a3, a2, a1);
}

==================================================

// function name: memeqbody

return cmpbody((__int64)a1, a2, (__int64)a3, a3, a1);

//----- (0000000001002FD0) ----------------------------------------------------
// memeqbody
bool __golang memeqbody(__int64 a1, unsigned __int64 a2, __int64 a3, const __m128i *_RDI, const __m128i *_RSI)
{
  __m128i v5; // xmm0
  __int64 v15; // rcx
  __int64 v16; // rdx
  bool v17; // zf
  char v18; // cl
  unsigned __int64 v19; // rsi
  unsigned __int64 v20; // rdi

  if ( a2 < 8 )
  {
    v17 = a2 == 0;
    if ( a2 )
    {
      v18 = -8 * a2;
      if ( (unsigned __int8)_RSI > 0xF8u )
        v19 = *(unsigned __int64 *)((char *)&_RSI->i64[-1] + a2) >> v18;
      else
        v19 = _RSI->i64[0];
      if ( (unsigned __int8)_RDI > 0xF8u )
        v20 = *(unsigned __int64 *)((char *)&_RDI->i64[-1] + a2) >> v18;
      else
        v20 = _RDI->i64[0];
      return (v20 - v19) << v18 == 0;
    }
    return v17;
  }
  else
  {
    if ( a2 < 0x40 )
      goto LABEL_11;
    if ( byte_11966A3 == 1 )
    {
      while ( a2 >= 0x40 )
      {
        __asm
        {
          vmovdqu ymm0, ymmword ptr [rsi]
          vmovdqu ymm1, ymmword ptr [rdi]
          vmovdqu ymm2, ymmword ptr [rsi+20h]
          vmovdqu ymm3, ymmword ptr [rdi+20h]
          vpcmpeqb ymm4, ymm0, ymm1
          vpcmpeqb ymm5, ymm3, ymm2
          vpand   ymm6, ymm5, ymm4
          vpmovmskb edx, ymm6
        }
        _RSI += 4;
        _RDI += 4;
        a2 -= 64LL;
        if ( _EDX != -1 )
        {
          __asm { vzeroupper }
          return 0;
        }
      }
      __asm { vzeroupper }
LABEL_11:
      while ( a2 > 8 )
      {
        v15 = _RSI->i64[0];
        v16 = _RDI->i64[0];
        _RSI = (const __m128i *)((char *)_RSI + 8);
        _RDI = (const __m128i *)((char *)_RDI + 8);
        a2 -= 8LL;
        if ( v15 != v16 )
          return 0;
      }
      return *(__int64 *)((char *)&_RSI->i64[-1] + a2) == *(__int64 *)((char *)&_RDI->i64[-1] + a2);
    }
    else
    {
      do
      {
        if ( a2 < 0x40 )
          goto LABEL_11;
        v5 = _mm_and_si128(
               _mm_and_si128(
                 _mm_cmpeq_epi8(_mm_loadu_si128(_RSI), _mm_loadu_si128(_RDI)),
                 _mm_cmpeq_epi8(_mm_loadu_si128(_RSI + 1), _mm_loadu_si128(_RDI + 1))),
               _mm_and_si128(
                 _mm_cmpeq_epi8(_mm_loadu_si128(_RSI + 2), _mm_loadu_si128(_RDI + 2)),
                 _mm_cmpeq_epi8(_mm_loadu_si128(_RSI + 3), _mm_loadu_si128(_RDI + 3))));
        _RSI += 4;
        _RDI += 4;
        a2 -= 64LL;
      }
      while ( _mm_movemask_epi8(v5) == 0xFFFF );
      return 0;
    }
  }
}

==================================================

// function name: cmpbody

//----- (0000000001002D80) ----------------------------------------------------
// cmpbody
__int64 __golang cmpbody(__int64 a1, signed __int64 a2, __int64 a3, const __m128i *_RDI, const __m128i *_RSI)
{
  signed __int64 v5; // rdx
  unsigned __int64 v6; // r8
  unsigned __int64 v7; // rax
  unsigned __int64 v8; // rbx
  unsigned __int64 v10; // rax
  unsigned __int64 v11; // rcx
  unsigned __int64 v12; // rax
  char v13; // cl
  unsigned __int64 v14; // rsi
  unsigned __int64 v15; // rsi
  unsigned __int64 v16; // rdi
  unsigned __int64 v17; // rsi
  unsigned __int64 v18; // rdi
  unsigned __int64 v19; // rcx

  if ( _RSI == _RDI )
    return (a2 == v5) + 2LL * (a2 > v5) - 1;
  v6 = v5;
  if ( a2 < v5 )
    v6 = a2;
  if ( v6 < 8 )
  {
    v13 = -8 * v6;
    if ( -8LL * v6 )
    {
      v14 = (unsigned __int8)_RSI > 0xF8u ? *(unsigned __int64 *)((char *)&_RSI->i64[-1] + v6) >> v13 : _RSI->i64[0];
      v15 = v14 << v13;
      v16 = (unsigned __int8)_RDI > 0xF8u ? *(unsigned __int64 *)((char *)&_RDI->i64[-1] + v6) >> v13 : _RDI->i64[0];
      v17 = _byteswap_uint64(v15);
      v18 = v17 ^ _byteswap_uint64(v16 << v13);
      if ( v18 )
      {
        _BitScanReverse64(&v19, v18);
        return 2 * ((v17 >> v19) & 1) - 1;
      }
    }
    return (a2 == v5) + 2LL * (a2 > v5) - 1;
  }
  if ( v6 <= 0x3F )
    goto LABEL_8;
  if ( byte_11966A3 == 1 )
  {
    do
    {
      __asm
      {
        vmovdqu ymm2, ymmword ptr [rsi]
        vmovdqu ymm3, ymmword ptr [rdi]
        vmovdqu ymm4, ymmword ptr [rsi+20h]
        vmovdqu ymm5, ymmword ptr [rdi+20h]
        vpcmpeqb ymm0, ymm3, ymm2
        vpmovmskb eax, ymm0
      }
      v7 = (unsigned int)~_EAX;
      if ( (_DWORD)v7 )
      {
        __asm { vzeroupper }
        goto LABEL_14;
      }
      __asm
      {
        vpcmpeqb ymm6, ymm5, ymm4
        vpmovmskb eax, ymm6
      }
      v7 = (unsigned int)~_EAX;
      if ( (_DWORD)v7 )
      {
        __asm { vzeroupper }
LABEL_12:
        _RSI += 2;
        _RDI += 2;
        goto LABEL_14;
      }
      _RSI += 4;
      _RDI += 4;
      v6 -= 64LL;
    }
    while ( v6 >= 0x40 );
    __asm { vzeroupper }
LABEL_8:
    while ( v6 > 0x10 )
    {
      v7 = (unsigned int)_mm_movemask_epi8(_mm_cmpeq_epi8(_mm_loadu_si128(_RDI), _mm_loadu_si128(_RSI))) ^ 0xFFFFLL;
      if ( v7 )
        goto LABEL_14;
      ++_RSI;
      ++_RDI;
      v6 -= 16LL;
    }
    if ( v6 > 8 && (v10 = _RSI->i64[0], v11 = _RDI->i64[0], _RSI->i64[0] != _RDI->i64[0])
      || (v10 = *(unsigned __int64 *)((char *)&_RSI->u64[-1] + v6),
          v11 = *(unsigned __int64 *)((char *)&_RDI->u64[-1] + v6),
          v10 != v11) )
    {
      v12 = _byteswap_uint64(v10);
      _BitScanReverse64(&v11, v12 ^ _byteswap_uint64(v11));
      return 2 * ((v12 >> v11) & 1) - 1;
    }
    return (a2 == v5) + 2LL * (a2 > v5) - 1;
  }
  while ( 1 )
  {
    v7 = (unsigned int)_mm_movemask_epi8(_mm_cmpeq_epi8(_mm_loadu_si128(_RDI), _mm_loadu_si128(_RSI))) ^ 0xFFFFLL;
    if ( v7 )
      break;
    v7 = (unsigned int)_mm_movemask_epi8(_mm_cmpeq_epi8(_mm_loadu_si128(_RDI + 1), _mm_loadu_si128(_RSI + 1)))
       ^ 0xFFFFLL;
    if ( v7 )
    {
      ++_RSI;
      ++_RDI;
      break;
    }
    v7 = (unsigned int)_mm_movemask_epi8(_mm_cmpeq_epi8(_mm_loadu_si128(_RDI + 2), _mm_loadu_si128(_RSI + 2)))
       ^ 0xFFFFLL;
    if ( v7 )
      goto LABEL_12;
    v7 = (unsigned int)_mm_movemask_epi8(_mm_cmpeq_epi8(_mm_loadu_si128(_RDI + 3), _mm_loadu_si128(_RSI + 3)))
       ^ 0xFFFFLL;
    if ( v7 )
    {
      _RSI += 3;
      _RDI += 3;
      break;
    }
    _RSI += 4;
    _RDI += 4;
    v6 -= 64LL;
    if ( v6 <= 0x40 )
      goto LABEL_8;
  }
LABEL_14:
  _BitScanForward64(&v8, v7);
  return 2LL * (_RSI->i8[v8] > (unsigned int)_RDI->i8[v8]) - 1;
}

==================================================

// function name: runtime_unspillArgs

// 106B6A0: variable 'v24' is possibly undefined

//----- (000000000106B760) ----------------------------------------------------
// runtime.unspillArgs
retval_106B760 __golang runtime_unspillArgs()
{
  __int64 v0; // r12
  retval_106B760 result; // 0:rax.8,8:rbx.8,16:rcx.8,24:rdi.48,72:xmm0_8.8,80:xmm1_8.8,88:xmm2_8.8,96:xmm3_8.8,104:xmm4_8.8,112:xmm5_8.8,120:xmm6_8.8,128:xmm7_8.8,136:xmm8_8.8,144:xmm9_8.8,152:xmm10_8.8,160:xmm11_8.8,168:xmm12_8.8,176:xmm13_8.8,184:xmm14_8.8

  result._r0 = *(_QWORD *)v0;
  result._r1 = *(_QWORD *)(v0 + 8);
  result._r2 = *(_QWORD *)(v0 + 16);
  result._r3 = *(_QWORD *)(v0 + 24);
  result._r4 = *(_QWORD *)(v0 + 32);
  result._r5 = *(_QWORD *)(v0 + 40);
  result._r6 = *(_QWORD *)(v0 + 48);
  result._r7 = *(_QWORD *)(v0 + 56);
  result._r8 = *(_QWORD *)(v0 + 64);
  result._r9 = *(double *)(v0 + 72);
  result._r10 = *(double *)(v0 + 80);
  result._r11 = *(double *)(v0 + 88);
  result._r12 = *(double *)(v0 + 96);
  result._r13 = *(double *)(v0 + 104);
  result._r14 = *(double *)(v0 + 112);
  result._r15 = *(double *)(v0 + 120);
  result._r16 = *(double *)(v0 + 128);
  result._r17 = *(double *)(v0 + 136);
  result._r18 = *(double *)(v0 + 144);
  result._r19 = *(double *)(v0 + 152);
  result._r20 = *(double *)(v0 + 160);
  result._r21 = *(double *)(v0 + 168);
  result._r22 = *(double *)(v0 + 176);
  result._r23 = *(double *)(v0 + 184);
  return result;
}

==================================================

// function name: runtime_syscallPtr

// 106F2C7: variable 'v5' is possibly undefined

//----- (000000000106F300) ----------------------------------------------------
// runtime.syscallPtr
__int64 __golang runtime_syscallPtr(__int64 a1, __int64 a2, __int64 a3, _QWORD *a4)
{
  __int64 v4; // rax
  __int64 v5; // rdx

  v4 = ((__int64 (__golang *)(_QWORD, __int64, _QWORD, _QWORD, _QWORD))*a4)(0, a2, *a4, a4[1], a4[2]);
  a4[4] = v4;
  a4[5] = v5;
  if ( !v4 )
    a4[6] = *__error();
  return 0;
}

==================================================

// function name: runtime_traceRelease

//----- (000000000105CC80) ----------------------------------------------------
// runtime.traceRelease
__int64 __golang runtime_traceRelease(__int64 result)
{
  __int64 v1; // r14
  int v2; // ecx
  int v3; // ecx

  v2 = *(_DWORD *)(result + 800);
  if ( v2 )
    *(_DWORD *)(result + 800) = v2 - 1;
  else
    _InterlockedExchangeAdd64((volatile signed __int64 *)(result + 752), 1u);
  v3 = *(_DWORD *)(result + 264);
  *(_DWORD *)(result + 264) = v3 - 1;
  if ( v3 == 1 )
  {
    if ( *(_BYTE *)(v1 + 185) )
      *(_QWORD *)(v1 + 16) = -1314;
  }
  return result;
}

==================================================

// function name: sync_atomic__ptr_Uint32_Store

//----- (0000000001070820) ----------------------------------------------------
// sync/atomic.(*Uint32).Store
retval_1070820 __golang sync_atomic__ptr_Uint32_Store(volatile __int32 *a1, __int32 a2)
{
  retval_1070820 result; // 0:rax.8,8:rbx.8

  result._r1 = (unsigned int)_InterlockedExchange(a1, a2);
  result._r0 = a1;
  return result;
}

==================================================

// function name: runtime_kqueue_trampoline

//----- (000000000106EF20) ----------------------------------------------------
// runtime.kqueue_trampoline
int runtime_kqueue_trampoline()
{
  return kqueue();
}

==================================================

// function name: runtime_mapaccess2_fast64

// 1197140: using guessed type __int64 runtime_zeroVal[128];

//----- (0000000001006480) ----------------------------------------------------
// runtime.mapaccess2_fast64
retval_1006480 __golang runtime_mapaccess2_fast64(__int64 a1, __int64 a2, __int64 a3)
{
  unsigned __int64 *v3; // rdx
  unsigned __int64 v4; // rsi
  _QWORD *v5; // rdx
  unsigned __int64 v6; // rax
  __int64 v7; // rcx
  unsigned __int64 v8; // rdx
  __int64 v9; // rcx
  __int64 v10; // rdx
  unsigned __int64 v11; // rsi
  unsigned __int64 v12; // rax
  __int64 v13; // rbx
  __int64 v16; // rax
  unsigned __int64 *v17; // r8
  unsigned __int64 v18; // r10
  __m128i v19; // xmm1
  unsigned __int64 i; // rsi
  unsigned __int64 v21; // r12
  unsigned __int64 v22; // r11
  __int64 v23; // [rsp+0h] [rbp-10h] BYREF
  retval_1006480 result; // 0:rax.8,8:rbx.8

  if ( a2 && *(_QWORD *)a2 )
  {
    if ( *(_BYTE *)(a2 + 34) )
    {
      internal_runtime_maps_fatal((__int64 (*)(void))"concurrent map read and map write", (__int64 (*)(void))0x21);
      result._r0 = 0;
      result._r1 = 0;
    }
    else if ( *(_QWORD *)(a2 + 24) )
    {
      v23 = a3;
      v6 = (**(__int64 (__golang ***)(__int64 *, _QWORD))(a1 + 72))(&v23, *(_QWORD *)(a2 + 8));
      v7 = a2;
      if ( *(_QWORD *)(a2 + 24) == 1 )
      {
        v8 = 0;
      }
      else
      {
        v7 = a2;
        v8 = v6 >> *(_BYTE *)(a2 + 33);
      }
      v9 = *(_QWORD *)(*(_QWORD *)(v7 + 16) + 8 * v8);
      v10 = *(_QWORD *)(v9 + 24);
      v11 = v6;
      v12 = v10 & (v6 >> 7);
      v13 = 0;
      while ( 2 )
      {
        v17 = (unsigned __int64 *)(*(_QWORD *)(v9 + 16) + v12 * *(_QWORD *)(a1 + 80));
        v18 = v11;
        v19 = (__m128i)*v17;
        for ( i = (unsigned __int8)_mm_movemask_epi8(
                                     _mm_cmpeq_epi8(
                                       _mm_shufflelo_epi16(
                                         _mm_unpacklo_epi8((__m128i)(v11 & 0x7F), (__m128i)(v11 & 0x7F)),
                                         0),
                                       v19)); i; i &= i - 1 )
        {
          _BitScanForward64(&v21, i);
          v22 = v21 * *(_QWORD *)(a1 + 88);
          if ( *(unsigned __int64 *)((char *)v17 + v22 + 8) == a3 )
          {
            result._r0 = (char *)v17 + v22 + 16;
            result._r1 = 1;
            return result;
          }
        }
        if ( !(unsigned __int8)_mm_movemask_epi8(_mm_cmpeq_epi8((__m128i)0x8080808080808080LL, v19)) )
        {
          v16 = v13 + v12 + 1;
          ++v13;
          v12 = v10 & v16;
          v11 = v18;
          continue;
        }
        break;
      }
      result._r0 = runtime_zeroVal;
      result._r1 = 0;
    }
    else
    {
      v3 = *(unsigned __int64 **)(a2 + 16);
      v4 = (unsigned __int8)~_mm_movemask_epi8((__m128i)*v3);
      v5 = v3 + 1;
      while ( v4 )
      {
        if ( *v5 == a3 && (v4 & 1) != 0 )
        {
          result._r0 = v5 + 1;
          result._r1 = 1;
          return result;
        }
        v5 = (_QWORD *)((char *)v5 + *(_QWORD *)(a1 + 88));
        v4 >>= 1;
      }
      result._r0 = runtime_zeroVal;
      result._r1 = 0;
    }
  }
  else
  {
    result._r0 = runtime_zeroVal;
    result._r1 = 0;
  }
  return result;
}

==================================================

// function name: internal_runtime_maps_fatal

//----- (0000000001066980) ----------------------------------------------------
// internal/runtime/maps.fatal
void __golang internal_runtime_maps_fatal(__int64 (*a1)(void), __int64 (*a2)(void))
{
  runtime_fatal(a1, a2);
}

==================================================

// function name: runtime_mapassign_fast32

// 1197140: using guessed type __int64 runtime_zeroVal[128];

//----- (0000000001005F20) ----------------------------------------------------
// runtime.mapassign_fast32
__int64 __golang runtime_mapassign_fast32(__int64 a1, __int64 a2, int a3)
{
  unsigned __int64 v3; // rax
  __int64 v4; // rcx
  int v5; // edx
  _QWORD *v6; // rbx
  __int64 result; // rax
  __int64 v8; // rdx
  unsigned __int64 v9; // rsi
  __int64 v10; // rsi
  __int64 v11; // rdi
  unsigned __int64 v12; // r8
  unsigned __int64 v13; // rax
  __int64 v14; // r9
  unsigned __int64 *v15; // r10
  __int64 v16; // r11
  __int64 v17; // rax
  unsigned __int64 *v18; // r12
  unsigned __int64 v19; // r13
  __m128i v20; // xmm1
  unsigned __int64 v21; // r15
  __int64 v22; // r15
  unsigned __int64 v23; // r13
  unsigned __int64 v24; // r8
  __int64 v25; // rdi
  unsigned __int64 *v26; // r8
  __int64 v27; // rdx
  RTYPE *v28; // rcx
  int v29; // [rsp+1Ch] [rbp-34h] BYREF
  unsigned __int64 v30; // [rsp+20h] [rbp-30h]
  unsigned __int64 v31; // [rsp+28h] [rbp-28h]
  __int64 v32; // [rsp+30h] [rbp-20h]
  unsigned __int64 *v33; // [rsp+38h] [rbp-18h]
  __int64 v34; // [rsp+40h] [rbp-10h]
  __int64 v35; // [rsp+58h] [rbp+8h]
  __int64 v36; // [rsp+60h] [rbp+10h]
  int v37; // [rsp+68h] [rbp+18h]

  if ( !a2 )
  {
    v28 = (RTYPE *)internal_runtime_maps_errNilAssign;
    if ( internal_runtime_maps_errNilAssign )
      v28 = internal_runtime_maps_errNilAssign[1];
    runtime_gopanic(v28, off_11714B8);
  }
  v35 = a1;
  v36 = a2;
  v37 = a3;
  if ( *(_BYTE *)(a2 + 34) )
  {
    internal_runtime_maps_fatal((__int64 (*)(void))"concurrent map writes", (__int64 (*)(void))0x15);
    a1 = v35;
    a3 = v37;
    a2 = v36;
  }
  v29 = a3;
  v3 = (**(__int64 (__golang ***)(int *, _QWORD))(a1 + 72))(&v29, *(_QWORD *)(a2 + 8));
  v31 = v3;
  v4 = v36;
  *(_BYTE *)(v36 + 34) ^= 1u;
  if ( !*(_QWORD *)(v36 + 16) )
  {
    internal_runtime_maps__ptr_Map_growToSmall(v36, v35);
    v3 = v31;
    v4 = v36;
  }
  if ( !*(_QWORD *)(v4 + 24) )
  {
    if ( *(_QWORD *)v4 < 8u )
    {
      result = internal_runtime_maps__ptr_Map_putSlotSmallFast32((_QWORD *)v4, v35, v3, v37);
      v8 = v36;
      if ( !*(_BYTE *)(v36 + 34) )
      {
        v34 = result;
        internal_runtime_maps_fatal((__int64 (*)(void))"concurrent map writes", (__int64 (*)(void))0x15);
        result = v34;
        v8 = v36;
      }
      *(_BYTE *)(v8 + 34) ^= 1u;
      return result;
    }
    internal_runtime_maps__ptr_Map_growToTable(v4, v35);
    v3 = v31;
    v4 = v36;
  }
  v5 = v37;
  v6 = (_QWORD *)v35;
  while ( 2 )
  {
    if ( *(_QWORD *)(v4 + 24) == 1 )
      v9 = 0;
    else
      v9 = v3 >> *(_BYTE *)(v4 + 33);
    v10 = *(_QWORD *)(*(_QWORD *)(v4 + 16) + 8 * v9);
    v11 = *(_QWORD *)(v10 + 24);
    v12 = v3;
    v13 = v11 & (v3 >> 7);
    v14 = 0;
    v15 = 0;
    v16 = 0;
    while ( 2 )
    {
      v18 = (unsigned __int64 *)(*(_QWORD *)(v10 + 16) + v13 * v6[10]);
      v19 = v12;
      v30 = v12 & 0x7F;
      v33 = v18;
      v20 = (__m128i)*v18;
      v21 = (unsigned __int8)_mm_movemask_epi8(
                               _mm_cmpeq_epi8(
                                 _mm_shufflelo_epi16(_mm_unpacklo_epi8((__m128i)(v12 & 0x7F), (__m128i)(v12 & 0x7F)), 0),
                                 v20));
      while ( v21 )
      {
        _BitScanForward64(&v23, v21);
        v24 = v23 * v6[11];
        if ( *(_DWORD *)((char *)v18 + v24 + 8) == v5 )
        {
          v27 = (__int64)v18 + v24 + v6[12] + 8;
          goto LABEL_35;
        }
        v21 &= v21 - 1;
        v19 = v31;
      }
      LODWORD(v22) = _mm_movemask_epi8(v20);
      if ( !(_DWORD)v22 )
      {
        v18 = v15;
        v22 = v16;
LABEL_23:
        v17 = v14 + v13 + 1;
        ++v14;
        v13 = v11 & v17;
        v12 = v19;
        v15 = v18;
        v16 = v22;
        continue;
      }
      break;
    }
    _BitScanForward64((unsigned __int64 *)&v22, (unsigned int)v22);
    if ( *((_BYTE *)v18 + v22) == 0xFE )
    {
      if ( v15 )
      {
        v18 = v15;
        v22 = v16;
      }
      goto LABEL_23;
    }
    if ( v15 )
    {
      v33 = v15;
      ++*(_WORD *)(v10 + 4);
    }
    else
    {
      v16 = v22;
    }
    if ( !*(_WORD *)(v10 + 4) )
    {
      internal_runtime_maps__ptr_table_rehash(v10, (__int64)v6, v4);
      v4 = v36;
      v6 = (_QWORD *)v35;
      v3 = v31;
      v5 = v37;
      continue;
    }
    break;
  }
  *(_DWORD *)((char *)v33 + v16 * v6[11] + 8) = v5;
  v25 = v6[12] + v16 * v6[11];
  v26 = v33;
  *((_BYTE *)v33 + v16) = v30;
  --*(_WORD *)(v10 + 4);
  ++*(_WORD *)v10;
  ++*(_QWORD *)v4;
  v27 = (__int64)v26 + v25 + 8;
LABEL_35:
  if ( !*(_BYTE *)(v4 + 34) )
  {
    v32 = v27;
    internal_runtime_maps_fatal((__int64 (*)(void))"concurrent map writes", (__int64 (*)(void))0x15);
    v4 = v36;
    v27 = v32;
  }
  *(_BYTE *)(v4 + 34) ^= 1u;
  return v27;
}

==================================================

// function name: strconv_ryuDigits32

// 116CB40: using guessed type __int64 strconv_uint64pow10[20];

//----- (00000000010750C0) ----------------------------------------------------
// strconv.ryuDigits32
__int64 *__golang strconv_ryuDigits32(
        __int64 *result,
        unsigned int a2,
        unsigned int a3,
        unsigned int a4,
        bool a5,
        __int64 a6,
        __int64 a7,
        __int64 a8,
        int a9)
{
  __int64 v9; // rdx
  __int64 v10; // r10
  unsigned int v11; // r12d
  unsigned int v12; // r15d
  unsigned int v13; // ecx
  unsigned int v14; // edi
  unsigned int v15; // ebx
  char v16; // cl
  char v17; // bl
  char v18; // si
  unsigned __int64 v20; // r9
  unsigned __int64 v21; // rdx
  signed __int64 v22; // rsi
  unsigned __int64 v23; // rsi
  unsigned int v24; // ecx
  unsigned __int64 v25; // r8
  unsigned __int64 v26; // r10
  char v27; // r8
  __int64 v28; // r10
  unsigned __int64 v29; // rcx
  unsigned __int64 v30; // r8
  unsigned __int64 v31; // rsi
  unsigned int v32; // [rsp+14h] [rbp-4h]

  if ( !a4 )
  {
    result[4] = a7 + 1;
    return result;
  }
  v9 = 0;
  v10 = 0;
  while ( a4 )
  {
    v32 = a3;
    a9 = -858993459;
    a2 = (a2 + 9) / 0xA;
    v11 = a3 / 0xA;
    v12 = a4 / 0xA;
    v13 = a3 % 0xA;
    if ( a4 / 0xA < a2 )
    {
      a3 = v32;
      break;
    }
    v14 = v11 + 1;
    if ( a2 == v11 + 1 )
    {
      if ( v12 <= v11 )
      {
        v14 = v11;
      }
      else
      {
        v13 = 0;
        LOBYTE(a6) = 0;
      }
    }
    else
    {
      v14 = v11;
    }
    a5 = a5 && v10 == 0;
    ++v9;
    v10 = v13;
    a3 = v14;
    a4 = v12;
  }
  if ( v9 > 0 )
  {
    if ( v10 <= 5 )
    {
      if ( v10 != 5 )
      {
        v15 = a3;
        v16 = 0;
        goto LABEL_23;
      }
      if ( a5 )
      {
        v15 = a3;
        v16 = a3 & 1;
LABEL_23:
        v18 = v16;
        a3 = v15;
        v17 = v18;
        goto LABEL_25;
      }
    }
    v17 = 1;
    goto LABEL_25;
  }
  v17 = a6;
LABEL_25:
  if ( a3 < a4 && v17 )
    ++a3;
  v20 = a7 - v9;
  v21 = v20;
  while ( 1 )
  {
    v22 = result[3];
    if ( (__int64)v20 <= v22 )
      break;
    a4 = -1546188226;
    v23 = (2748779070u * ((unsigned __int64)a3 >> 1)) >> 37;
    v24 = a3 % 0x64;
    v25 = 2 * v24 + 1;
    if ( v25 >= 0xC8 )
      runtime_panicIndex(2 * v24 + 1, a7, 200, -1546188226, v23, 2 * (_BYTE)v24 + 1, v20, v10, a9);
    v26 = result[1];
    v27 = a00010203040506[v25];
    if ( v20 >= v26 )
      runtime_panicIndex(
        v20,
        a7,
        v26,
        -1546188226,
        v23,
        v27,
        v20,
        v26,
        (int)"00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525"
             "354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899");
    v28 = *result;
    *(_BYTE *)(*result + v20) = v27;
    v29 = 2 * v24;
    if ( v29 >= 0xC8 )
      runtime_panicIndex(
        (unsigned int)v29,
        a7,
        200,
        -1546188226,
        v23,
        v27,
        v20,
        v28,
        (int)"00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525"
             "354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899");
    v30 = result[1];
    LODWORD(v10) = v20 - 1;
    a9 = (unsigned __int8)a00010203040506[v29];
    if ( v30 <= v20 - 1 )
      runtime_panicIndex(v20 - 1, a7, v30, -1546188226, v23, (unsigned __int8)v30, v20, v10, a9);
    a6 = *result;
    *(_BYTE *)(v20 + *result - 1) = a9;
    v20 -= 2LL;
    a3 = v23;
  }
  if ( v20 == v22 )
  {
    v31 = result[1];
    if ( v20 >= v31 )
      runtime_panicIndex(v20, a7, v31, a4, v31, (unsigned __int8)a6, v20, v10, a9);
    *(_BYTE *)(*result + v20) = a3 + 48;
  }
  result[3] = v21 + 1;
  result[4] = a7 + 1;
  return result;
}

==================================================

// function name: runtime_panicIndex

//----- (000000000106D7C0) ----------------------------------------------------
// runtime.panicIndex
void __golang __noreturn runtime_panicIndex(
        int64 a1,
        _QWORD a2,
        signed __int64 a3,
        int a4,
        int a5,
        int a6,
        int a7,
        int a8,
        int a9)
{
  runtime_goPanicIndex(a1, a3, a3, a4, a5, a6, a7, a8, a9);
}

==================================================

// function name: runtime_gcWriteBarrier6

//----- (000000000106D4A0) ----------------------------------------------------
// runtime.gcWriteBarrier6
void runtime_gcWriteBarrier6()
{
  gcWriteBarrier();
}

==================================================

// function name: io_fs__ptr_PathError_Error

//----- (0000000001092680) ----------------------------------------------------
// io/fs.(*PathError).Error
string __golang io_fs__ptr_PathError_Error(_ptr_fs_PathError a1)
{
  retval_10926A0 v1; // kr00_16
  string result; // 0:rax.8,8:rbx.8

  v1 = ((retval_10926A0 (__golang *)(void *))*((_QWORD *)a1->Err.tab + 3))(a1->Err.data);
  result.ptr = (char *)runtime_concatstring5(
                         0,
                         a1->Op.ptr,
                         a1->Op.len,
                         (unsigned int)&qword_10C5588,
                         1,
                         a1->Path.ptr,
                         a1->Path.len,
                         (unsigned int)": ",
                         2,
                         v1._r0,
                         v1._r1);
  return result;
}

==================================================

// function name: debugCall2048

//----- (000000000106AFC0) ----------------------------------------------------
// debugCall2048
void __gostk debugCall2048(char a1)
{
  char **v1; // r12
  __int64 v2; // [rsp-80h] [rbp-808h] BYREF

  v1 = *(char ***)(__readgsqword(0x30u) + 32);
  if ( v1 && *v1 == &a1 )
    *v1 = (char *)&v2;
  __debugbreak();
  __debugbreak();
}

==================================================

// function name: runtime_pthread_cond_wait_trampoline

//----- (000000000106F160) ----------------------------------------------------
// runtime.pthread_cond_wait_trampoline
int __golang runtime_pthread_cond_wait_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
{
  return pthread_cond_wait(*(pthread_cond_t **)a4, *(pthread_mutex_t **)(a4 + 8));
}

==================================================

// function name: runtime_gcWriteBarrier8

//----- (000000000106D4E0) ----------------------------------------------------
// runtime.gcWriteBarrier8
void runtime_gcWriteBarrier8()
{
  gcWriteBarrier();
}

==================================================

// function name: unicode_init

//----- (00000000010792E0) ----------------------------------------------------
// unicode.init
void unicode_init()
{
  __int64 v0; // rax
  __int64 v1; // rax
  __int64 v2; // rax
  _QWORD *v3; // rax
  _UNKNOWN **v4; // rcx
  _QWORD *v5; // r11
  __int64 (***v6)[84]; // rax
  __int64 (**v7)[84]; // rdx
  __int64 (***v8)[84]; // r11
  __int64 (***v9)[8]; // rax
  __int64 (**v10)[8]; // rdx
  __int64 (***v11)[8]; // r11
  __int64 (***v12)[84]; // rax
  __int64 (**v13)[84]; // rdx
  __int64 (***v14)[84]; // r11
  __int64 (***v15)[6]; // rax
  __int64 (**v16)[6]; // rdx
  __int64 (***v17)[6]; // r11
  _QWORD *v18; // rax
  _UNKNOWN **v19; // rdx
  __int64 v20; // rcx
  _QWORD *v21; // r11
  _QWORD *v22; // rax
  _UNKNOWN **v23; // rcx
  _QWORD *v24; // r11
  _QWORD *v25; // rax
  _UNKNOWN **v26; // rdx
  _QWORD *v27; // r11
  _QWORD *v28; // rax
  _UNKNOWN **v29; // rdx
  __int64 v30; // rcx
  _QWORD *v31; // r11
  __int64 v32; // [rsp+0h] [rbp-10h]
  __int64 v33; // [rsp+0h] [rbp-10h]

  v0 = ((__int64 (*)(void))runtime_mapinitnoop)();
  v1 = runtime_mapinitnoop(v0);
  v2 = runtime_mapinitnoop(v1);
  v32 = runtime_makemap_small(v2);
  v3 = (_QWORD *)runtime_mapassign_faststr(
                   (__int64)&RTYPE_map_string__ptr_unicode_RangeTable,
                   v32,
                   (const __m128i *)"L",
                   1u);
  v4 = unicode_foldL;
  if ( runtime_writeBarrier )
  {
    runtime_gcWriteBarrier2();
    *v5 = v4;
    v5[1] = *v3;
  }
  *v3 = v4;
  v6 = (__int64 (***)[84])runtime_mapassign_faststr(
                            (__int64)&RTYPE_map_string__ptr_unicode_RangeTable,
                            v32,
                            (const __m128i *)"Ll",
                            2u);
  v7 = unicode_foldLl;
  if ( runtime_writeBarrier )
  {
    runtime_gcWriteBarrier2();
    *v8 = v7;
    v8[1] = *v6;
  }
  *v6 = v7;
  v9 = (__int64 (***)[8])runtime_mapassign_faststr(
                           (__int64)&RTYPE_map_string__ptr_unicode_RangeTable,
                           v32,
                           (const __m128i *)"Lt",
                           2u);
  v10 = unicode_foldLt;
  if ( runtime_writeBarrier )
  {
    runtime_gcWriteBarrier2();
    *v11 = v10;
    v11[1] = *v9;
  }
  *v9 = v10;
  v12 = (__int64 (***)[84])runtime_mapassign_faststr(
                             (__int64)&RTYPE_map_string__ptr_unicode_RangeTable,
                             v32,
                             (const __m128i *)"Lu",
                             2u);
  v13 = unicode_foldLu;
  if ( runtime_writeBarrier )
  {
    runtime_gcWriteBarrier2();
    *v14 = v13;
    v14[1] = *v12;
  }
  *v12 = v13;
  v15 = (__int64 (***)[6])runtime_mapassign_faststr(
                            (__int64)&RTYPE_map_string__ptr_unicode_RangeTable,
                            v32,
                            (const __m128i *)"M",
                            1u);
  v16 = unicode_foldM;
  if ( runtime_writeBarrier )
  {
    runtime_gcWriteBarrier2();
    *v17 = v16;
    v17[1] = *v15;
  }
  *v15 = v16;
  v18 = (_QWORD *)runtime_mapassign_faststr(
                    (__int64)&RTYPE_map_string__ptr_unicode_RangeTable,
                    v32,
                    (const __m128i *)"Mn",
                    2u);
  v19 = unicode_foldMn[0];
  if ( runtime_writeBarrier )
  {
    runtime_gcWriteBarrier4();
    *v21 = v19;
    v21[1] = *v18;
    v20 = v32;
    v21[2] = v32;
    v21[3] = unicode_FoldCategory;
  }
  else
  {
    v20 = v32;
  }
  *v18 = v19;
  unicode_FoldCategory = v20;
  v33 = runtime_makemap_small(v18);
  v22 = (_QWORD *)runtime_mapassign_faststr(
                    (__int64)&RTYPE_map_string__ptr_unicode_RangeTable,
                    v33,
                    (const __m128i *)"Common",
                    6u);
  v23 = unicode_foldCommon[0];
  if ( runtime_writeBarrier )
  {
    runtime_gcWriteBarrier2();
    *v24 = v23;
    v24[1] = *v22;
  }
  *v22 = v23;
  v25 = (_QWORD *)runtime_mapassign_faststr(
                    (__int64)&RTYPE_map_string__ptr_unicode_RangeTable,
                    v33,
                    (const __m128i *)"Greek",
                    5u);
  v26 = unicode_foldGreek[0];
  if ( runtime_writeBarrier )
  {
    runtime_gcWriteBarrier2();
    *v27 = v26;
    v27[1] = *v25;
  }
  *v25 = v26;
  v28 = (_QWORD *)runtime_mapassign_faststr(
                    (__int64)&RTYPE_map_string__ptr_unicode_RangeTable,
                    v33,
                    (const __m128i *)"Inherited",
                    9u);
  v29 = unicode_foldInherited;
  if ( runtime_writeBarrier )
  {
    runtime_gcWriteBarrier4();
    *v31 = v29;
    v31[1] = *v28;
    v30 = v33;
    v31[2] = v33;
    v31[3] = unicode_FoldScript;
  }
  else
  {
    v30 = v33;
  }
  *v28 = v29;
  unicode_FoldScript = v30;
}

==================================================

// function name: runtime_mapinitnoop

__int64 __golang time_runtimeNano(__int64 a1);
// __int64 __golang runtime_write(_QWORD, _QWORD, _QWORD); weak
__int64 __golang runtime_traceAdvance(unsigned __int8 a1);
// __int64 __golang runtime_callers(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
__int64 __golang runtime_mapinitnoop(_QWORD); // weak
__int64 __golang gogo(__int64 a1, __int64 a2);
__int64 __golang callRet(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, int a6, int a7, int a8, int a9);
void __golang gosave_systemstack_switch(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, char a10);
void __golang setg_gcc(__int64 a1, __int64 a2, __int64 a3, unsigned __int64 a4);
unsigned __int64 __golang aeshashbody(const __m128i *a1, unsigned __int64 a2, unsigned __int64 a3);
// unsigned __int64 __usercall __spoils<rdx,rcx,rbx,rdi,rsi,r8,r9,r10,r12,r13,xmm0,xmm1,xmm2,xmm3,xmm4,xmm5,xmm6,xmm7,xmm8,xmm9,xmm10,xmm11,xmm12,xmm13,xmm14> gcWriteBarrier@<r11>();
void __gostk debugCall32(char a1);
void __gostk debugCall64(char a1);
void __gostk debugCall128(char a1);
void __gostk debugCall256(char a1);
void __gostk debugCall512(char a1);
void __gostk debugCall1024(char a1);
void __gostk debugCall2048(char a1);
void __gostk debugCall4096(char a1);
void __gostk debugCall8192(char a1);
void __gostk debugCall16384(char a1);
void __gostk debugCall32768(char a1);
void __gostk debugCall65536(char a1);
__int64 runtime_asminit(void); // weak
__int64 runtime_mstart(void); // weak
__int64 __golang runtime_gogo(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10);
void __golang __noreturn runtime_mcall(void (__golang **rax0)(_QWORD *), __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a1);
void __noreturn runtime_systemstack_switch(); // weak
unsigned __int64 __golang runtime_systemstack(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 (**a10)(void));
void __golang __noreturn runtime_switchToCrashStack0(__int64 (__fastcall **a1)(__int64, __int64, _QWORD), __int64 a2, __int64 a3, __int64 a4, __int64 a5);
void __golang __noreturn runtime_morestack(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, unsigned int *a6, unsigned int *a7, unsigned __int64 a8, __int64 a9, __int64 a10, char a11);
void __golang __noreturn runtime_morestack_noctxt(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, unsigned int *a6, unsigned int *a7, unsigned __int64 a8, __int64 a9);
__int64 __golang runtime_spillArgs(__int64 result, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, double a17, double a18, double a19, double a20, double a21, double a22, double a23, double a24);
retval_106B760 __golang runtime_unspillArgs();
__int64 __golang runtime_reflectcall(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, retval_106BA60 (__golang **a11)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double), const void *a12, __int64 a13, __int64 a14, __int64 a15);
__int64 __golang runtime_call16(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, retval_106BA60 (__golang **a11)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double), const void *a12, unsigned int a13, unsigned int a14);
__int64 __golang runtime_call32(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, retval_106BB00 (__golang **a11)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double), const void *a12, unsigned int a13, unsigned int a14);
__int64 __golang runtime_call64(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, retval_106BBA0 (__golang **a11)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double), const void *a12, unsigned int a13, unsigned int a14);
__int64 __golang runtime_call128(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, retval_106BC55 (__golang **a11)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double), const void *a12, unsigned int a13, unsigned int a14);
__int64 __golang runtime_call256(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, retval_106BD1B (__golang **a11)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double), const void *a12, unsigned int a13, unsigned int a14);
__int64 __golang runtime_call512(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, retval_106BDFB (__golang **a11)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double), const void *a12, unsigned int a13, unsigned int a14);
__int64 __golang runtime_call1024(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, retval_106BEDB (__golang **a11)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double), const void *a12, unsigned int a13, unsigned int a14);
__int64 __golang runtime_call2048(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, retval_106BFBB (__golang **a11)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double), const void *a12, unsigned int a13, unsigned int a14);
__int64 __golang runtime_call4096(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, retval_106C0A3 (__golang **a11)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double), const void *a12, unsigned int a13, unsigned int a14);
__int64 __golang runtime_call8192(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, retval_106C183 (__golang **a11)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double), const void *a12, unsigned int a13, unsigned int a14);
__int64 __golang runtime_call16384(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, retval_106C263 (__golang **a11)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double), const void *a12, unsigned int a13, unsigned int a14);
__int64 __golang runtime_call32768(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, retval_106C343 (__golang **a11)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double), const void *a12, unsigned int a13, unsigned int a14);
__int64 __golang runtime_call65536(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, retval_106C423 (__golang **a11)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double), const void *a12, unsigned int a13, unsigned int a14);
__int64 __golang runtime_call131072(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, retval_106C503 (__golang **a11)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double), const void *a12, unsigned int a13, unsigned int a14);
__int64 __golang runtime_call262144(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, retval_106C5E3 (__golang **a11)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double), const void *a12, unsigned int a13, unsigned int a14);
__int64 __golang runtime_call524288(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, retval_106C6C3 (__golang **a11)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double), const void *a12, unsigned int a13, unsigned int a14);
__int64 __golang runtime_call1048576(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64, __int64, __int64, _DWORD, _DWORD, __int64, __int64); // weak
__int64 __golang runtime_call2097152(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64, __int64, __int64, _DWORD, _DWORD, __int64, __int64); // weak
__int64 __golang runtime_call4194304(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64, __int64, __int64, _DWORD, _DWORD, __int64, __int64); // weak
__int64 __golang runtime_call8388608(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64, __int64, __int64, _DWORD, _DWORD, __int64, __int64); // weak
__int64 __golang runtime_call16777216(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64, __int64, __int64, _DWORD, _DWORD, __int64, __int64); // weak
__int64 __golang runtime_call33554432(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64, __int64, __int64, _DWORD, _DWORD, __int64, __int64); // weak
__int64 __golang runtime_call67108864(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64, __int64, __int64, _DWORD, _DWORD, __int64, __int64); // weak
__int64 __golang runtime_call134217728(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64, __int64, __int64, _DWORD, _DWORD, __int64, __int64); // weak
__int64 __golang runtime_call268435456(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64, __int64, __int64, _DWORD, _DWORD, __int64, __int64); // weak
__int64 __golang runtime_call536870912(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64, __int64, __int64, _DWORD, _DWORD, __int64, __int64); // weak
__int64 __golang runtime_call1073741824(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64, __int64, __int64, _DWORD, _DWORD, __int64, __int64); // weak
__int64 __golang runtime_procyield(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, int a10);
__int64 __golang runtime_publicationBarrier(_QWORD); // weak
__int64 __golang runtime_asmcgocall_no_g(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 (__fastcall *a10)(__int64, __int64, _QWORD *, __int64), __int64 a11);
__int64 __golang runtime_asmcgocall_landingpad(__int64 (__fastcall *a1)(__int64), __int64 a2);
retval_106D180 __golang runtime_asmcgocall(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 (__fastcall *a10)(__int64), __int64 a11);
void __gostk runtime_setg(unsigned __int64 a1);
void __golang __noreturn runtime_abort(_QWORD); // weak
retval_106D280 __golang runtime_cputicks(unsigned __int64 a1);
unsigned __int64 __golang runtime_memhash(const __m128i *a1, unsigned __int64 a2, unsigned __int64 a3);
unsigned __int64 __golang runtime_strhash(__int64 a1, unsigned __int64 a2);
__int64 __golang runtime_memhash32(unsigned int *a1, __int64 a2);
__int64 __golang runtime_memhash64(signed __int64 *a1, unsigned __int64 a2);
bool __gostk runtime_checkASM();
__int64 runtime_return0(void); // weak
void __golang __noreturn runtime_goexit(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __noreturn runtime_sigpanic0(); // weak
void runtime_gcWriteBarrier1();
void runtime_gcWriteBarrier2();
void runtime_gcWriteBarrier3();
void runtime_gcWriteBarrier4();
void runtime_gcWriteBarrier5();
void runtime_gcWriteBarrier6();
void runtime_gcWriteBarrier7();
void runtime_gcWriteBarrier8();
retval_106D500 __golang runtime_debugCallV2(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_debugCallPanicked(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, __int64 a11);
void __golang __noreturn runtime_panicIndex(int64 a1, _QWORD a2, signed __int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
void __golang __noreturn runtime_panicIndexU(int64 a1, __int64 a2, signed __int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
void __golang __noreturn runtime_panicSliceAlen(__int64 a1, __int64 a2, int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
void __golang __noreturn runtime_panicSliceAlenU(__int64 a1, __int64 a2, int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
void __golang __noreturn runtime_panicSliceAcap(__int64 a1, __int64 a2, int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
void __golang __noreturn runtime_panicSliceAcapU(__int64 a1, __int64 a2, int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
void __golang __noreturn runtime_panicSliceB(int64 a1, __int64 a2, signed __int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
void __golang __noreturn runtime_panicSliceBU(int64 a1, __int64 a2, signed __int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
void __golang __noreturn runtime_panicSlice3Alen(__int64 a1, signed __int64 a2, __int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
void __golang __noreturn runtime_panicSlice3C(int64 a1, __int64 a2, signed __int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
__int64 runtime_getfp(void); // weak
// _OWORD *__usercall runtime_duffzero@<rdi>();
retval_106DAA0 __golang runtime_duffcopy(__int64 a1, __int64 a2, __int64 a3, _OWORD *a4, __int128 *a5);
__int64 __golang runtime_memclrNoHeapPointers(_OWORD *a1, unsigned __int64 _RBX, double _XMM0_8);
char __golang runtime_memmove(__m128i *a1, const __m128i *a2, unsigned __int64 a3);
void __golang __noreturn runtime_asyncPreempt(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_106EA20 __golang runtime_sigprofNonGoWrapper(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang __noreturn runtime_exit_trampoline(__int64 a1, __int64 a2, __int64 a3, int *a4);
int __golang runtime_open_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
ssize_t __golang runtime_write_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
int __golang runtime_madvise_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
uint64_t runtime_nanotime_trampoline();
int __fastcall runtime_walltime_trampoline(timespec *__tp);
int __golang runtime_sigaction_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
int __golang runtime_sigprocmask_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
int __golang runtime_sigaltstack_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
int runtime_raiseproc_trampoline();
__int64 __golang runtime_sigfwd(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 (__fastcall *a10)(_QWORD, __int64, __int64), unsigned int a11, __int64 a12, __int64 a13);
void __golang runtime_sigtramp(__int64 a1, __int64 a2, __int64 a3, unsigned int a4, __int64 a5);
void __golang runtime_cgoSigtramp(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5);
void *__golang runtime_mmap_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
int __golang runtime_munmap_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
int __golang runtime_usleep_trampoline(__int64 a1, __int64 a2, __int64 a3, useconds_t *a4);
void runtime_settls();
int __golang runtime_sysctl_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
int runtime_kqueue_trampoline();
int __golang runtime_kevent_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
int __golang runtime_fcntl_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
retval_106EFC0 __golang runtime_mstart_stub(__int64 a1, __int64 a2, __int64 a3, unsigned __int64 *a4);
int __golang runtime_pthread_attr_init_trampoline(__int64 a1, __int64 a2, __int64 a3, pthread_attr_t **a4);
int __golang runtime_pthread_attr_getstacksize_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
int __golang runtime_pthread_attr_setdetachstate_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
int __golang runtime_pthread_create_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
int __golang runtime_raise_trampoline(__int64 a1, __int64 a2, __int64 a3, int *a4);
int __golang runtime_pthread_mutex_init_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
int __golang runtime_pthread_mutex_lock_trampoline(__int64 a1, __int64 a2, __int64 a3, pthread_mutex_t **a4);
int __golang runtime_pthread_mutex_unlock_trampoline(__int64 a1, __int64 a2, __int64 a3, pthread_mutex_t **a4);
int __golang runtime_pthread_cond_init_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
int __golang runtime_pthread_cond_wait_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
int __golang runtime_pthread_cond_timedwait_relative_np_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
int __golang runtime_pthread_cond_signal_trampoline(__int64 a1, __int64 a2, __int64 a3, pthread_cond_t **a4);
pthread_t runtime_pthread_self_trampoline();
int __golang runtime_pthread_kill_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
xpc_object_t runtime_osinit_hack_trampoline();
void __golang runtime_arc4random_buf_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
__int64 __golang runtime_syscall(__int64 a1, __int64 a2, __int64 a3, _QWORD *a4);
__int64 __golang runtime_syscallX(__int64 a1, __int64 a2, __int64 a3, _QWORD *a4);
__int64 __golang runtime_syscallPtr(__int64 a1, __int64 a2, __int64 a3, _QWORD *a4);
__int64 __golang runtime_syscall6(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
__int64 __golang runtime_syscall6X(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
int runtime_issetugid_trampoline();
string __golang runtime__ptr_lockRank_String(_ptr_runtime_lockRank);
string __golang runtime__ptr_plainError_Error(_ptr_runtime_plainError);
string __golang runtime__ptr_waitReason_String(_ptr_runtime_waitReason);
string __golang runtime__ptr_errorString_Error(_ptr_runtime_errorString);
string __golang runtime__ptr_errorAddressString_Error(_ptr_runtime_errorAddressString);
string __golang runtime__ptr_boundsError_Error(_ptr_runtime_boundsError);
__int64 __golang runtime_metricReader_compute_fm(__int64 a1, _QWORD *a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10);
__int64 __golang runtime__ptr_itabTableType_add_fm(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10);
unsigned __int128 __golang runtime_debugCallCheck_0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10);
void __golang __noreturn runtime_debugCallWrap_0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 (*a10)(void));
__int64 __golang runtime_reflectcallmove_0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, int a6, int a7, int a8, int a9, __int64 a10, __int64 a11, __int64 a12, __int64 a13, __int64 a14);
unsigned __int64 __golang runtime_wbBufFlush_0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 runtime_osinit_0(); // weak
void __golang __noreturn runtime_asyncPreempt2_0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __gostk __noreturn runtime_badmcall_0(__int64 a1);
void __gostk __noreturn runtime_badmcall2_0(__int64 a1);
void __noreturn runtime_badreflectcall_0(void); // weak
void __golang __noreturn runtime_badmorestackg0_0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, int a6, int a7, int a8, int a9);
__int64 runtime_badmorestackgsignal_0(void); // weak
void runtime_schedinit_0();
__int64 runtime_mstart0_0(void); // weak
void __golang __noreturn runtime_goexit1_0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
unsigned __int64 __golang runtime_newproc_0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 (*a10)(void));
__int64 __golang runtime_args_0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, unsigned int a10, __int64 a11);
void __golang __noreturn runtime_check_0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_sigprofNonGo_0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, unsigned int a10, __int64 a11, __int64 a12);
__int64 __golang runtime_newstack_0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, unsigned int *a6, unsigned int *a7, unsigned __int64 a8, __int64 a9);
void __golang __noreturn runtime_morestackc_0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_badsystemstack_0(_QWORD, _QWORD, _QWORD, _QWORD); // weak
__int64 __golang runtime_reflectcall_0(__int64 a1, retval_106BA60 (__golang **a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double), const void *a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, char a10);
__int64 __golang runtime_asmcgocall_0(__int64 (__fastcall *a1)(__int64), __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_106FC20 __golang runtime_fcntl_0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9);
unsigned int __gostk runtime_write_0(__int64 a1, __int64 a2, unsigned int a3);
bool __golang type__eq_runtime_Frame(__int64 a1, __int64 a2);
bool __golang type__eq_runtime_modulehash(__int64 a1, __int64 a2);
bool __golang type__eq_runtime_bitvector(__int64 a1, __int64 a2);
bool __golang type__eq_runtime__func(const __m128i *a1, const __m128i *a2);
__int64 type__eq_runtime_PanicNilError(); // weak
bool __golang type__eq_runtime_boundsError(__int64 a1, __int64 a2);
bool __golang type__eq_runtime__panic(__int64 a1, __int64 a2);
bool __golang type__eq_runtime_mcache(const __m128i *a1, const __m128i *a2);
bool __golang type__eq_runtime_mspan(__int64 a1, __int64 a2);
bool __golang type__eq_runtime_mSpanList(_QWORD *a1, _QWORD *a2);
bool __golang type__eq_runtime_gcBits(_BYTE *a1, _BYTE *a2);
bool __golang type__eq_runtime_special(__int64 a1, __int64 a2);
bool __golang type__eq_struct__runtime_gList_runtime_n_int32_(__int64 a1, __int64 a2);
bool __golang type__eq_runtime_hchan(__int64 a1, __int64 a2);
bool __golang type__eq_runtime_pTraceState(const __m128i *a1, const __m128i *a2);
__int64 __golang type__eq_runtime_traceSchedResourceState(const __m128i *a1, const __m128i *a2);
__int64 type__eq_runtime_notInHeap(); // weak
bool __golang type__eq_runtime_limiterEvent(_QWORD *a1, _QWORD *a2);
bool __golang type__eq_runtime_gcWork(const __m128i *a1, const __m128i *a2);
bool __golang type__eq_runtime_workbuf(const __m128i *a1, const __m128i *a2);
bool __golang type__eq_runtime_mTraceState(const __m128i *a1, const __m128i *a2);
bool __golang type__eq_runtime_traceBuf(const __m128i *a1, const __m128i *a2);
bool __golang type__eq_runtime_mOS(__int64 a1, __int64 a2);
__int64 __golang type__eq_runtime_gTraceState(const __m128i *a1, const __m128i *a2);
bool __golang type__eq_runtime_errorAddressString(__int64 a1, __int64 a2);
bool __golang type__eq_runtime_untracedG_4(const __m128i *a1, const __m128i *a2);
bool __golang type__eq_runtime_TypeAssertionError(__int64 a1, __int64 a2);
bool __golang type__eq_runtime_piController(__int64 a1, __int64 a2);
bool __golang type__eq__2_runtime_Frame(__int64 a1, __int64 a2);
retval_1070820 __golang sync_atomic__ptr_Uint32_Store(volatile __int32 *a1, __int32 a2);
__int64 __golang sync_atomic_SwapUintptr(volatile __int64 *a1, __int64 a2);
bool __golang sync_atomic_CompareAndSwapUintptr(volatile signed __int64 *a1, signed __int64 a2, signed __int64 a3);
retval_1070880 __golang sync_atomic_StoreUintptr(volatile __int64 *a1, __int64 a2);
bool __golang type__eq_sync_atomic_Bool(_DWORD *a1, _DWORD *a2);
bool __golang type__eq_sync_atomic_Uint32(_DWORD *a1, _DWORD *a2);
bool __golang type__eq_sync_atomic_Uint64(_QWORD *a1, _QWORD *a2);
// string __golang internal_reflectlite_rtype_String(reflectlite_rtype);
// string __golang internal_reflectlite_rtype_Name(reflectlite_rtype);
uintptr __golang internal_reflectlite_elem(reflectlite_rtype a1);
// reflectlite_Type __golang internal_reflectlite_rtype_Elem(reflectlite_rtype);
signed __int64 __golang internal_reflectlite_rtype_Len(reflectlite_rtype);
bool __golang internal_reflectlite_rtype_Comparable(reflectlite_rtype);
bool __golang internal_reflectlite__ptr_rtype_Comparable(_ptr_reflectlite_rtype);
reflectlite_Type __golang internal_reflectlite__ptr_rtype_Elem(_ptr_reflectlite_rtype);
signed __int64 __golang internal_reflectlite__ptr_rtype_Len(_ptr_reflectlite_rtype);
string __golang internal_reflectlite__ptr_rtype_Name(_ptr_reflectlite_rtype);
string __golang internal_reflectlite__ptr_rtype_String(_ptr_reflectlite_rtype);
string __golang errors__ptr_errorString_Error(_ptr_errors_errorString);
__int64 __golang errors_Is(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
__int64 __golang errors_is(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, double a6);
retval_1071260 __golang unicode_utf8_DecodeRune(unsigned __int8 *a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, int a8, int a9);
retval_1071400 __golang unicode_utf8_DecodeRuneInString(unsigned __int8 *a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, int a8, int a9);
retval_10715A0 __golang unicode_utf8_encodeRuneNonASCII(__int64 a1, unsigned __int64 a2, __int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
__int64 __golang unicode_utf8_appendRuneNonASCII(__int64 result, __int64 a2, unsigned __int64 a3, int a4);
// __int64 __golang strconv__ptr_decimal_Assign(_QWORD, _QWORD); weak
// __int64 __golang strconv__ptr_decimal_Shift(_QWORD, _QWORD); weak
// __int64 __golang strconv__ptr_decimal_Round(_QWORD, _QWORD); weak
retval_1071FC0 __golang strconv_genericFtoa(__int64 r0, __int64 a2, unsigned __int64 r2, unsigned __int8 a4, __int64 a5, __int64 a6, double a7);
__int64 __golang strconv_bigFtoa(int a1, int a2, int a3, __int64 a4, unsigned __int8 a5, unsigned __int8 a6, __int64 a7, __int64 a8, _QWORD *a9);
// __int64 __golang strconv_formatDigits(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64, __int64, __int64, __int64, __int64); weak
// __int64 __golang strconv_roundShortest(_QWORD, _QWORD, _QWORD, _QWORD); weak
__int64 __golang strconv_fmtE(__int64 result, __int64 r1, unsigned __int64 r2, char a4, char *a5, __int64 a6, unsigned __int64 a7, __int64 a8, __int64 a9, __int64 a10, char a11);
__int64 __golang strconv_fmtF(__int64 result, __int64 r1, unsigned __int64 r2, unsigned __int64 a4, const __m128i *a5, unsigned __int64 a6, unsigned __int64 a7, __int64 a8, __int64 a9, __int64 a10);
// __int64 __fastcall strconv_fmtB(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
__int64 __golang strconv_fmtX(__int64 r0, __int64 r1, unsigned __int64 r2, __int64 a4, unsigned __int8 a5, char a6, __int64 a7, __int64 a8, _QWORD *a9);
unsigned __int64 __golang strconv_ryuFtoaFixed32(unsigned __int64 result, unsigned int a2, __int64 a3, signed __int64 a4);
unsigned __int64 __golang strconv_ryuFtoaFixed64(unsigned __int64 result, unsigned __int64 a2, __int64 a3, signed __int64 a4);
unsigned __int64 __golang strconv_formatDecimal(char *a1, unsigned __int64 a2, char a3, char *a4, unsigned __int64 a5, int a6, unsigned __int64 a7, const char *a8, int a9);
// __int64 __golang strconv_ryuFtoaShortest(_QWORD, _QWORD, _QWORD, _QWORD); weak
__int64 *__golang strconv_ryuDigits32(__int64 *result, unsigned int a2, unsigned int a3, unsigned int a4, bool a5, __int64 a6, __int64 a7, __int64 a8, int a9);
// retval_10752C0 __golang strconv_mult64bitPow10(_QWORD, _QWORD, _QWORD); weak
// retval_10753A0 __golang strconv_mult128bitPow10(_QWORD, _QWORD, _QWORD); weak
retval_10754C0 __golang strconv_FormatInt(__int64 a1, unsigned __int64 a2, __int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
retval_10755A0 __golang strconv_formatBits(unsigned __int64 r0, __int64 a2, unsigned __int64 r2, unsigned __int64 a4, unsigned __int64 a5, char a6, char a7);
__m128i *__golang strconv_appendQuotedWith(__m128i *result, unsigned __int64 a2, unsigned __int64 a3, unsigned __int8 *a4, unsigned __int64 a5, __int64 a6, __int64 a7, unsigned int a8);
// __int64 __fastcall strconv_appendEscapedRune(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
// __int64 __golang strconv_IsPrint(_QWORD); weak
// void __golang internal_sync__ptr_Mutex_lockSlow(_ptr_sync_Mutex_0);
// __int64 __golang internal_sync__ptr_Mutex_unlockSlow(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
__int64 __golang sync__ptr_Once_doSlow(__int64 a1, void (**a2)(void));
// __int64 __golang sync__ptr_Once_doSlow_deferwrap2(int, int, int, int, int, int, int, int, int, char); weak
// __int64 __golang sync__ptr_Once_doSlow_deferwrap1(int, int, int, int, int, int, int, int, int, char); weak
// __int64 __golang sync__ptr_Pool_Put(_QWORD, _QWORD, _QWORD); weak
// interface_ __golang sync__ptr_Pool_Get(_ptr_sync_Pool);
retval_1077140 __golang sync__ptr_Pool_getSlow(__int64 *a1, unsigned __int64 a2);
// __int64 __golang sync__ptr_poolDequeue_pushHead(_QWORD); weak
// retval_1077760 __golang sync__ptr_poolDequeue_popHead(_QWORD); weak
__int64 __golang sync__ptr_poolChain_pushHead(sync_poolChainElt **a1);
retval_1077BA0 __golang sync__ptr_poolChain_popHead(__int64 *a1);
// __int64 __golang sync__ptr_poolChain_popTail(_QWORD); weak
__int64 __golang internal_sync__ptr_HashTrieMap_go_shape_interface__comma_go_shape_interface___iter(__int64 a1, __int64 a2, __int64 a3, unsigned __int8 (__golang **a4)(_QWORD, _QWORD, _QWORD, _QWORD));
__int64 __golang internal_sync__ptr_HashTrieMap_go_shape_interface__comma_go_shape_interface___Range(__int64 a1, __int64 a2, unsigned __int8 (__golang **a3)(_QWORD, _QWORD, _QWORD, _QWORD));
retval_10780E0 __golang internal_sync__ptr_HashTrieMap_go_shape_interface__comma_go_shape_interface___expand(__int64 a1, __int64 a2, __int64 a3, __int64 a4, unsigned __int64 a5, __int64 a6, sync_indirect_go_shape_interface__comma_go_shape_interface__ *a7);
retval_1078320 __golang internal_sync__ptr_HashTrieMap_go_shape_interface__comma_go_shape_interface___LoadOrStore(__int64 a1, __int64 a2, void *a3, void *a4, __int64 a5, __int64 a6);
// __int64 __golang internal_sync__ptr_HashTrieMap_go_shape_interface__comma_go_shape_interface___LoadOrStore_deferwrap1(int, int, int, int, int, int, int, int, int, char); weak
retval_1078A20 __golang internal_sync__ptr_HashTrieMap_go_shape_interface__comma_go_shape_interface___Load(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
__int64 __golang internal_sync__ptr_HashTrieMap_go_shape_interface__comma_go_shape_interface___initSlow(__int64 a1, __int64 a2);
// __int64 __golang internal_sync__ptr_HashTrieMap_go_shape_interface__comma_go_shape_interface___initSlow_deferwrap1(int, int, int, int, int, int, int, int, int, char); weak
__int64 __golang type__eq_sync_Mutex(_DWORD *a1, _DWORD *a2);
bool __golang type__eq_sync_atomic_Pointer_sync_poolChainElt_(_QWORD *a1, _QWORD *a2);
bool __golang type__eq_sync_poolLocal(const __m128i *a1, const __m128i *a2);
__int64 __golang type__eq_sync_poolLocalInternal(_QWORD *a1, _QWORD *a2);
bool __golang type__eq_sync_poolChain(_QWORD *a1, _QWORD *a2);
bool __golang type__eq_sync_atomic_Pointer_internal_sync_indirect_interface__comma_interface___(_QWORD *a1, _QWORD *a2);
__int64 __golang type__eq_internal_sync_indirect_interface__comma_interface__(__int64 a1, __int64 a2);
__int64 __golang type__eq_internal_sync_entry_interface__comma_interface__(__int64 a1, __int64 a2);
bool __golang type__eq_sync_atomic_Pointer_internal_sync_entry_interface__comma_interface___(_QWORD *a1, _QWORD *a2);
__int64 __golang type__eq__16_sync_atomic_Pointer_internal_sync_node_interface__comma_interface___(__int64 a1, __int64 a2);
bool __golang type__eq_sync_atomic_Pointer_internal_sync_node_interface__comma_interface___(_QWORD *a1, _QWORD *a2);
__int64 __golang type__eq_sync_Once(_DWORD *a1, _DWORD *a2);
__int64 __golang type__eq_internal_sync_entry_go_shape_interface__comma_go_shape_interface__(__int64 a1, __int64 a2);
bool __golang type__eq_sync_atomic_Pointer_internal_sync_entry_go_shape_interface__comma_go_shape_interface___(_QWORD *a1, _QWORD *a2);
__int64 __golang type__eq_internal_sync_indirect_go_shape_interface__comma_go_shape_interface__(__int64 a1, __int64 a2);
__int64 __golang type__eq__16_sync_atomic_Pointer_go_shape_struct__internal_sync_isEntry_bool__(__int64 a1, __int64 a2);
bool __golang type__eq_sync_atomic_Pointer_go_shape_struct__internal_sync_isEntry_bool__(_QWORD *a1, _QWORD *a2);
void unicode_init();
// retval_10795C0 __golang internal_itoa_Itoa(_QWORD, _QWORD, _QWORD); weak
void reflect_init();
__int64 __golang reflect__ptr_abiSeq_addArg(__int64 *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, int a8, _QWORD *a9);
// retval_1079B60 __golang reflect__ptr_abiSeq_addRcvr(_QWORD); weak
__int64 __golang reflect__ptr_abiSeq_regAssign(_QWORD *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, int a7, int a8, int a9);
__int64 __golang reflect__ptr_abiSeq_assignIntN(_QWORD *a1, __int64 a2, __int64 a3, unsigned __int64 a4, unsigned __int8 a5);
retval_107A620 __golang reflect_newAbiDesc(__int64 a1, __int64 a2);
// __int64 __fastcall reflect_intFromReg(_QWORD, _QWORD, _QWORD, _QWORD); weak
// __int64 __golang reflect_intToReg(_QWORD, _QWORD, _QWORD, _QWORD); weak
// __int64 __golang reflect_moveMakeFuncArgPtrs(_QWORD, _QWORD); weak
void __golang reflect_mapIterStart(__int64 a1, _QWORD *a2, __int64 *a3);
void __golang reflect_mapIterNext(__int64 *a1);
__int64 __golang reflect__ptr_MapIter_Key(_QWORD *a1);
__int64 __golang reflect__ptr_MapIter_Value(_QWORD *a1);
bool __golang reflect__ptr_MapIter_Next(__int64 *a1);
// void __golang reflect_flag_panicNotMap(reflect_flag);
retval_107B7C0 __golang reflect__ptr_rtype_exportedMethods(__int64 a1);
uintptr __golang reflect_elem(reflect_rtype *a1);
// string __golang reflect_ChanDir_String(reflect_ChanDir);
__int64 *__golang reflect__ptr_structType_Field(abi_Name *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, size_t len);
retval_107BBC0 __golang reflect_funcLayout(reflect_rtype *a1, reflect_rtype *a2);
// __int64 __golang reflect_funcLayout_func1(); weak
int *__golang reflect_addTypeBits(int *result, unsigned __int64 a2, __int64 a3, int a4, int a5, int a6, __int64 a7, int a8, _QWORD *a9);
__int64 __golang reflect_packEface(__int64 result, __int64 a2, __int16 a3);
// void __golang reflect_Value_panicNotBool(reflect_Value);
retval_107CD80 __golang reflect_Value_bytesSlow(__int64 a1, __int64 a2, __int16 a3, __int64 r3, __int64 a5, __int64 r5, __int64 r6, __int64 r7);
retval_107CF80 __golang reflect_methodReceiver(__int64 a1, __int64 a2, __int64 a3, __int64 *a4, __int64 a5, unsigned __int64 a6);
__int64 __golang reflect_callMethod(unsigned __int64 *a1, __int64 a2, _BYTE *a3, _QWORD *a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, unsigned __int64 *a10);
retval_107E2A0 __golang reflect_Value_Elem(abi_Type *a1, _QWORD *a2, char a3);
__int64 __golang reflect_Value_Field(__int64 a1, __int64 a2, char a3, unsigned __int64 a4);
// retval_107E580 __golang reflect_Value_Index(_QWORD, _QWORD, _QWORD); weak
signed __int64 __golang reflect_Value_lenNonSlice(reflect_Value);
// __int64 __golang reflect_copyVal(_QWORD, _QWORD); weak
// signed __int64 __golang reflect_Value_NumField(reflect_Value);
uintptr __golang reflect_Value_Pointer(reflect_Value);
string __golang reflect_Value_stringNonString(reflect_Value);
reflect_Type __golang reflect_Value_typeSlow(reflect_Value);
_ptr_abi_Type __golang reflect_Value_abiTypeSlow(reflect_Value);
retval_107F0A0 __golang reflect_Value_UnsafePointer(_QWORD *a1, _QWORD *a2, __int16 a3);
bool __golang reflect_Value_Comparable(reflect_Value);
// string __golang reflect__ptr_rtype_String(_ptr_reflect_rtype);
reflect_Kind __golang reflect__ptr_rtype_Kind(_ptr_reflect_rtype);
bool __golang reflect__ptr_rtype_Comparable(_ptr_reflect_rtype);
// __int64 __golang reflect_valueInterface(_QWORD, _QWORD, _QWORD, _QWORD); weak
retval_107FA40 __golang reflect_methodValueCall(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, double a17, double a18, double a19, double a20, double a21, double a22, double a23, double a24, char a25);
__int64 __golang type__eq_reflect_Method(__int64 a1, __int64 a2);
string __golang reflect__ptr_Kind_String(_ptr_reflect_Kind);
string __golang reflect__ptr_ChanDir_String(_ptr_reflect_ChanDir);
bool __golang reflect__ptr_Value_Comparable(_ptr_reflect_Value);
reflect_Kind __golang reflect__ptr_Value_Kind(_ptr_reflect_Value);
signed __int64 __golang reflect__ptr_Value_Len(_ptr_reflect_Value);
string __golang reflect__ptr_Value_String(_ptr_reflect_Value);
__int64 __golang reflect_moveMakeFuncArgPtrs_0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, __int64 a11);
__int64 __golang reflect_callMethod_0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, unsigned __int64 *a10, __int64 a11, _BYTE *a12, _QWORD *a13);
bool __golang type__eq_reflect_ValueError(__int64 a1, __int64 a2);
bool __golang type__eq_reflect_makeFuncCtxt(__int64 a1, __int64 a2);
__int64 __golang type__eq_reflect_methodValue(__int64 a1, __int64 a2);
retval_1080040 __golang internal_fmtsort_Sort(abi_Type *data, void *a2, reflect_flag a3);
__int64 __golang internal_fmtsort_compare(abi_Type *data, double *a2, reflect_flag a3, abi_Type *a4, double *a5, reflect_flag a6);
// retval_1081160 __golang internal_fmtsort_nilCompare(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
__int64 __golang internal_fmtsort_Sort_func1(abi_Type *a1, double *a2, reflect_flag a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, abi_Type *a10, double *a11, reflect_flag a12);
__int64 __golang slices_stableCmpFunc_go_shape_struct__Key_reflect_Value_Value_reflect_Value__(__int64 result, __int64 a2, unsigned __int64 a3, __int128 *a4, __int64 a5, _QWORD *a6);
unsigned __int64 __golang slices_symMergeCmpFunc_go_shape_struct__Key_reflect_Value_Value_reflect_Value__(unsigned __int64 result, __int64 a2, unsigned __int64 a3, _OWORD *a4, int64 a5, char *a6, char *a7, _QWORD *a8);
__int64 __golang slices_rotateCmpFunc_go_shape_struct__Key_reflect_Value_Value_reflect_Value__(__int64 a1, __int64 a2, unsigned __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, _OWORD *i, __int64 a9);
retval_1082C60 __golang internal_bisect_New(const char *a1, unsigned __int64 a2);
// __int64 __golang internal_bisect__ptr_Matcher_stack(_QWORD, _QWORD, _QWORD); weak
retval_1083A20 __golang internal_bisect_printStack(__int64 a1, __int64 a2, unsigned __int64 a3, uintptr *a4, size_t a5, size_t a6);
__int64 __golang internal_bisect_Hash(__int64 a1, __int64 r1);
string __golang internal_bisect__ptr_parseError_Error(_ptr_bisect_parseError);
bool __golang type__eq_internal_bisect_cond(__int64 a1, __int64 a2);
bool __golang type__eq_sync_atomic_Pointer_internal_bisect_dedup_(_QWORD *a1, _QWORD *a2);
void __golang internal_godebug__ptr_Setting_IncNonDefault(_ptr_godebug_Setting);
void __golang internal_godebug__ptr_Setting_register(_ptr_godebug_Setting);
string __golang internal_godebug__ptr_Setting_Value(_ptr_godebug_Setting);
// __int64 __golang internal_godebug__ptr_Setting_Value_func1(); weak
godebug_setting *__golang internal_godebug_lookup(const __m128i *a1, char *a2);
__int64 __golang internal_godebug_update(__int64 a1, unsigned __int64 a2, __int64 a3, unsigned __int64 a4);
// __int64 __golang internal_godebug_update_func1(); weak
// __int64 __golang internal_godebug_update_deferwrap1(int, int, int, int, int, int, int, int, int, char); weak
__int64 __golang internal_godebug_parse(__int64 result, __int64 a2, unsigned __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, int a8, int a9);
void __golang internal_godebug__ptr_Setting_IncNonDefault_fm(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, char a10);
__int64 __golang sync_atomic__ptr_Uint64_Load_fm(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, char a10);
void __golang internal_godebug__ptr_Setting_register_fm(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, char a10);
bool __golang type__eq_internal_godebug_setting(__int64 a1, __int64 a2);
bool __golang type__eq_sync_atomic_Pointer_internal_godebug_value_(_QWORD *a1, _QWORD *a2);
bool __golang type__eq_internal_godebug_value(__int64 a1, __int64 a2);
bool __golang type__eq_internal_godebug_Setting(__int64 a1, __int64 a2);
// retval_1085DA0 __golang syscall_Getenv(_QWORD, _QWORD); weak
retval_1086040 __golang syscall_SetNonblock(__int64 a1, char a2);
__int64 syscall_init_0(); // weak
__int64 __golang syscall_adjustFileLimit(_QWORD *a1);
// retval_10861E0 __golang syscall_ByteSliceFromString(_QWORD, _QWORD); weak
// retval_10862A0 __golang syscall_Getwd(); weak
// retval_10863C0 __golang syscall_SysctlUint32(_QWORD, _QWORD); weak
retval_1086480 __golang syscall_nametomib(__int64 a1, __int64 a2);
// string __golang syscall_Errno_Error(syscall_Errno);
bool __golang syscall_Errno_Is(syscall_Errno, error);
// __int64 __golang syscall_Close(_QWORD); weak
// retval_10868C0 __golang syscall_Dup(); weak
retval_1086980 __golang syscall_Getrlimit(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __fastcall syscall_Open(_QWORD, _QWORD, _QWORD, _QWORD); weak
// retval_1086B80 __golang syscall_read(_QWORD, _QWORD, _QWORD, _QWORD); weak
// retval_1086C80 __golang syscall_Seek(_QWORD, _QWORD, _QWORD); weak
retval_1086D60 __golang syscall_setrlimit(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// retval_1086E20 __golang syscall_write(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
retval_10871A0 __golang syscall_Fstat(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// retval_10875A0 __golang syscall_fcntl(_QWORD, _QWORD, _QWORD); weak
// __int64 __golang syscall_closedir(_QWORD); weak
retval_1087740 __golang syscall_readdir_r(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_10878C0 __golang syscall_sysctl(__int64 *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
int __cdecl syscall_libc_getrlimit_trampoline(int, rlimit *);
int __cdecl syscall_libc_readdir_r_trampoline(DIR *, dirent *, dirent **);
int __cdecl syscall_libc_setrlimit_trampoline(int, const rlimit *);
int __cdecl syscall_libc_sysctl_trampoline(int *, u_int, void *, size_t *, void *, size_t);
int __cdecl syscall_libc_fstat64_trampoline(int, stat64 *);
string __golang syscall__ptr_Errno_Error(_ptr_syscall_Errno);
bool __golang syscall__ptr_Errno_Is(_ptr_syscall_Errno, error);
retval_1087EC0 __golang time_appendInt(__int64 r0, __int64 r1, unsigned __int64 r2, unsigned __int64 a4, __int64 a5, double a6, __int64 a7, __int64 a8, int a9, int a10);
// retval_10882A0 __golang time_appendNano(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
string __golang time_Time_String(time_Time);
string __golang time_Time_GoString(time_Time);
retval_1088C60 __golang time_Time_Format(__int64 a1, __int64 a2, __int64 a3, const __m128i *a4, unsigned __int64 a5);
__int64 __golang time_Time_AppendFormat(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, unsigned __int64 a6, const __m128i *a7, unsigned __int64 a8);
retval_1088FA0 __golang time_Time_appendFormat(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, unsigned __int64 a6, __int64 a7, unsigned __int64 a8);
retval_108B440 __golang time_quote(__int64 a1, signed __int64 a2);
__int64 __golang time_Time_appendFormatRFC3339(int a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, unsigned __int64 a6, char a7);
retval_108BD60 __golang time_preadn(__int64 a1, __int64 a2, unsigned __int64 a3, __int64 a4, __int64 a5);
retval_108BEC0 __golang time_absDays_date(__int64 a1);
retval_108BF80 __golang time_absDays_yearYday(__int64 a1);
// __int64 __golang time_Time_absSec(_QWORD, _QWORD); weak
// retval_108C180 __golang time_Time_locabs(); weak
retval_108C6E0 __golang time_tzset(_BYTE *a1, __int64 a2, __int64 a3, __int64 a4, int a5, __int64 a6, __int64 a7, int a8, int a9);
retval_108CC80 __golang time_tzsetName(_BYTE *a1, __int64 a2, __int64 a3, int a4, int a5, __int64 a6, __int64 a7, int a8, int a9);
// retval_108CE60 __golang time_tzsetOffset(_QWORD, _QWORD); weak
// retval_108D3A0 __golang time_tzsetRule(_QWORD); weak
__int64 __golang time_tzruleTime(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7);
// retval_108E0E0 __golang time__ptr_dataIO_big8(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
retval_108E260 __golang time_LoadLocationFromTZData(__int64 a1, size_t a2, signed __int64 a3, signed __int64 a4, __int64 a5, __int64 a6, int a7, signed __int64 a8);
retval_108F740 __golang time_loadTzinfoFromZip(__int64 a1, __int64 a2, const __m128i *a3, __int64 a4, __int64 a5);
__int64 __golang time_loadTzinfoFromZip_deferwrap1(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, char a10);
// retval_1090320 __golang time_loadTzinfo(_QWORD, _QWORD, _QWORD, _QWORD); weak
retval_10903E0 __golang time_loadLocation(__int64 a1, size_t a2, _QWORD *a3, __int64 a4);
__int64 __golang time_readFile_deferwrap1(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, char a10);
const char *time_initLocal();
retval_1091000 __golang time_nextStdChunk(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, int a5, __int64 a6, __int64 a7, int a8, int a9);
string __golang time__ptr_Time_GoString(_ptr_time_Time);
string __golang time__ptr_Time_String(_ptr_time_Time);
string __golang time__ptr_fileSizeError_Error(_ptr_time_fileSizeError);
bool __golang type__eq_time_zone(__int64 a1, __int64 a2);
bool __golang type__eq_time_zoneTrans(__int64 a1, __int64 a2);
retval_1092260 __golang io_fs_FormatDirEntry(__int64 a1, __int64 a2);
// string __golang io_fs_FileMode_String(fs_FileMode);
bool __golang io_fs_FileMode_IsDir(fs_FileMode);
__int64 __golang io_fs_FileMode_Type(int a1);
string __golang io_fs__ptr_PathError_Error(_ptr_fs_PathError);
error __golang io_fs__ptr_PathError_Unwrap(_ptr_fs_PathError);
__int64 __golang type__eq_io_fs_PathError(__int64 a1, __int64 a2);
bool __golang io_fs__ptr_FileMode_IsDir(_ptr_fs_FileMode);
string __golang io_fs__ptr_FileMode_String(_ptr_fs_FileMode);
__int64 __golang io_fs__ptr_FileMode_Type(_DWORD *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, char a10);
// retval_10928C0 __golang internal_filepathlite_Base(_QWORD, _QWORD); weak
__int64 __golang internal_testlog_Getenv(__int64 result, __int64 a2);
__int64 __golang internal_testlog_Stat(__int64 result, __int64 a2);
// retval_1092A60 __golang internal_syscall_unix_Fcntl(_QWORD, _QWORD, _QWORD); weak
string __golang internal_poll__ptr_DeadlineExceededError_Error(_ptr_poll_DeadlineExceededError);
// __int64 __golang internal_poll__ptr_fdMutex_rwlock(_QWORD, _QWORD); weak
// error __golang internal_poll__ptr_FD_decref(_ptr_poll_FD);
// void __golang internal_poll__ptr_FD_writeUnlock(_ptr_poll_FD);
// retval_1092F80 __golang internal_poll__ptr_FD_OpenDir(); weak
// __int64 __golang internal_poll__ptr_pollDesc_prepare(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// __int64 __golang internal_poll__ptr_pollDesc_wait(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64, __int64); weak
// __int64 __golang internal_poll__ptr_FD_Init(_QWORD, _QWORD, _QWORD, _QWORD); weak
// error __golang internal_poll__ptr_FD_Close(_ptr_poll_FD);
retval_10D43A0 __golang internal_poll__ptr_FD_Write(_ptr_poll_FD, _slice_uint8);
void __golang internal_poll__ptr_FD_Write_deferwrap1(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, char a10);
retval_1093BE0 __golang internal_poll__ptr_FD_Fstat(volatile signed __int64 *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_1093D80 __golang internal_poll__ptr_FD_Fstat_deferwrap1(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, char a10);
// retval_1093DE0 __golang internal_poll_DupCloseOnExec(_QWORD); weak
retval_1093F00 __golang internal_poll__ptr_FD_Dup(volatile signed __int64 *a1);
retval_10940A0 __golang internal_poll__ptr_FD_Dup_deferwrap1(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, char a10);
retval_1094100 internal_poll_dupCloseOnExecOld();
// __int64 __golang internal_poll_dupCloseOnExecOld_deferwrap1(int, int, int, int, int, int, int, int, int, char); weak
string __golang internal_poll__ptr_errNetClosing_Error(_ptr_poll_errNetClosing);
bool __golang type__eq_internal_poll_FD(const __m128i *a1, const __m128i *a2);
// retval_1094640 __golang os__ptr_File_Readdirnames(_QWORD, _QWORD, _QWORD); weak
retval_10946E0 __golang os__ptr_File_readdir(__int64 a1, __int64 a2, __int64 a3);
// retval_10952A0 __golang os_Getenv(_QWORD, _QWORD); weak
string __golang os__ptr_SyscallError_Error(_ptr_os_SyscallError);
error __golang os__ptr_SyscallError_Unwrap(_ptr_os_SyscallError);
__int64 __golang os_underlyingErrorIs(__int64 a1, _QWORD *a2, RTYPE **a3, __int64 a4);
retval_10D43A0 __golang os__ptr_File_Write(_ptr_os_File, _slice_uint8);
retval_10957E0 __golang os__ptr_File_wrapErr(__int64 a1, char *a2, size_t a3, RTYPE **a4, __int64 a5);
os_File *__golang os_NewFile(signed __int64 a1, char *a2, size_t a3);
os_File *__golang os_newFile(signed __int64 a1, char *a2, size_t a3, __int64 a4, char a5);
retval_1095E20 __golang os_openDirNolog(char *a1, size_t a2, __int64 a3, __int64 a4, __int64 a5);
error __golang os__ptr_file_close(_ptr_os_file);
string __golang os__ptr_unixDirent_Name(_ptr_os_unixDirent);
bool __golang os__ptr_unixDirent_IsDir(_ptr_os_unixDirent);
fs_FileMode __golang os__ptr_unixDirent_Type(_ptr_os_unixDirent);
string __golang os__ptr_unixDirent_String(_ptr_os_unixDirent);
retval_10961A0 __golang os_newUnixDirent(char *a1, size_t a2, char *a3, size_t a4, fs_FileMode a5);
retval_1096340 os_Getwd();
__int64 __golang os_fillFileStatFromSys(__int64 a1, __int64 a2, __int64 a3);
retval_10D24E0 __golang os__ptr_File_Stat(_ptr_os_File);
// retval_10970C0 __golang os_statNolog(_QWORD, _QWORD); weak
// __int64 __golang os_lstatNolog(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
string __golang os__ptr_fileStat_Name(_ptr_os_fileStat);
fs_FileMode __golang os__ptr_fileStat_Mode(_ptr_os_fileStat);
bool __golang type__eq_os_fileStat(__int64 a1, __int64 a2);
bool __golang type__eq_os_file(__int64 a1, __int64 a2);
bool __golang type__eq_sync_atomic_Pointer_os_dirInfo_(_QWORD *a1, _QWORD *a2);
__int64 __golang type__eq_os_unixDirent(__int64 a1, __int64 a2);
__int64 __golang type__eq_os_LinkError(__int64 a1, __int64 a2);
__int64 __golang type__eq_os_SyscallError(__int64 a1, __int64 a2);
void __golang fmt__ptr_fmt_writePadding(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, int a7, int a8, int a9);
void __golang fmt__ptr_fmt_pad(__int64 a1, const __m128i *a2, signed __int64 a3, __int64 a4, __int64 a5, __int64 a6, int a7, int a8, int a9);
void __golang fmt__ptr_fmt_padString(__int64 **a1, const __m128i *a2, signed __int64 a3, __int64 a4, __int64 a5, __int64 a6, int a7, int a8, int a9);
void __golang fmt__ptr_fmt_fmtUnicode(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, int a7, __int64 a8, int a9);
// __int64 __golang fmt__ptr_fmt_fmtInteger(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
retval_1098900 __golang fmt__ptr_fmt_truncate(__int64 a1, __int64 a2, signed __int64 a3, unsigned __int64 a4, __int64 a5, __int64 a6, __int64 a7, int a8, int a9);
// __int64 __golang fmt__ptr_fmt_fmtS(_QWORD, _QWORD, _QWORD); weak
// __int64 __golang fmt__ptr_fmt_fmtBs(_QWORD); weak
void __golang fmt__ptr_fmt_fmtSbx(__int64 a1, __int64 a2, unsigned __int64 a3, __int64 a4, unsigned __int64 a5, __int64 a6, __int64 a7, unsigned __int64 a8, int a9);
// __int64 __golang fmt__ptr_fmt_fmtQ(_QWORD, _QWORD, _QWORD); weak
void __golang fmt__ptr_fmt_fmtC(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, int a7, int a8, int a9);
void __golang fmt__ptr_fmt_fmtFloat(__int64 a1, __int64 a2, int a3, __int64 a4, double a5);
// __int64 __golang fmt_Fprintln(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
// retval_1099FA0 __golang fmt_getField(_QWORD, _QWORD, _QWORD); weak
// __int64 fmt__ptr_pp_unknownType(void); weak
// __int64 __golang fmt__ptr_pp_badVerb(_QWORD, _QWORD); weak
// __int64 __golang fmt__ptr_pp_fmtBool(_QWORD, _QWORD, _QWORD); weak
__int64 __golang fmt__ptr_pp_fmt0x64(__int64 a1, __int64 a2, char a3);
// __int64 __fastcall fmt__ptr_pp_fmtInteger(_QWORD, _QWORD, _QWORD, _QWORD); weak
// __int64 __golang fmt__ptr_pp_fmtFloat(double); weak
// __int64 __golang fmt__ptr_pp_fmtComplex(double, double); weak
// __int64 __fastcall fmt__ptr_pp_fmtString(_QWORD, _QWORD, _QWORD, _QWORD); weak
void __golang fmt__ptr_pp_fmtBytes(_QWORD *a1, __int64 a2, signed __int64 a3, __int64 a4, __int64 a5, const __m128i *a6, unsigned __int64 a7, __int64 a8, int a9);
// __int64 __golang fmt__ptr_pp_fmtPointer(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
void __golang fmt__ptr_pp_catchPanic(__int64 *a1, __int64 a2, _QWORD *a3, unsigned int a4, const __m128i *a5, unsigned __int64 a6);
// __int64 __golang fmt__ptr_pp_handleMethods(_QWORD, _QWORD); weak
void __golang fmt__ptr_pp_printArg(_QWORD *a1, reflect_rtype *a2, unsigned __int8 *a3, __int64 a4, __int64 a5, __int64 a6, int a7, int a8, _QWORD *a9);
void __golang fmt__ptr_pp_printValue(_QWORD *a1, abi_Type *data, _QWORD *a3, reflect_flag a4, __int64 a5, __int64 a6);
bool __golang type__eq_fmt_fmt(__int64 a1, __int64 a2);
void __fastcall main_main();
__int64 go_textfipsstart(); // weak
void go_textfipsend();
void __cdecl __noreturn _exit(int);
// int open(const char *, int, ...);
// ssize_t __cdecl write(int __fd, const void *__buf, size_t __nbyte);
// int *__error(void);
// int __cdecl madvise(void *, size_t, int);
// uint64_t mach_absolute_time(void);
// kern_return_t __cdecl mach_timebase_info(mach_timebase_info_t info);
// int __cdecl clock_gettime(clockid_t __clock_id, timespec *__tp);
// int __cdecl sigaction(int, const sigaction *, sigaction *);
// int __cdecl pthread_sigmask(int, const sigset_t *, sigset_t *);
// int __cdecl sigaltstack(const stack_t *, stack_t *);
// pid_t getpid(void);
// int __cdecl kill(pid_t, int);
// void *__cdecl mmap(void *, size_t, int, int, int, off_t);
// int __cdecl munmap(void *, size_t);
// int __cdecl usleep(useconds_t);
// int __cdecl sysctl(int *, u_int, void *, size_t *, void *, size_t);
// int kqueue(void);
// int __cdecl kevent(int kq, const kevent *changelist, int nchanges, kevent *eventlist, int nevents, const timespec *timeout);
// int fcntl(int, int, ...);
// int __cdecl pthread_attr_init(pthread_attr_t *);
// int __cdecl pthread_attr_getstacksize(const pthread_attr_t *, size_t *);
// int __cdecl pthread_attr_setdetachstate(pthread_attr_t *, int);
// int __cdecl pthread_create(pthread_t *, const pthread_attr_t *, void *(__cdecl *)(void *), void *);
// int __cdecl raise(int);
// int __cdecl pthread_mutex_init(pthread_mutex_t *, const pthread_mutexattr_t *);
// int __cdecl pthread_mutex_lock(pthread_mutex_t *);
// int __cdecl pthread_mutex_unlock(pthread_mutex_t *);
// int __cdecl pthread_cond_init(pthread_cond_t *, const pthread_condattr_t *);
// int __cdecl pthread_cond_wait(pthread_cond_t *, pthread_mutex_t *);
// int __cdecl pthread_cond_timedwait_relative_np(pthread_cond_t *, pthread_mutex_t *, const timespec *);
// int __cdecl pthread_cond_signal(pthread_cond_t *);
// pthread_t pthread_self(void);
// int __cdecl pthread_kill(pthread_t, int);
// bool __cdecl notify_is_valid_token(int val);
// xpc_object_t xpc_date_create_from_current(void);
// void __cdecl arc4random_buf(void *__buf, size_t __nbytes);
// int issetugid(void);

//-------------------------------------------------------------------------
// Data declarations

int dword_1000000 = -17958193; // weak
_UNKNOWN loc_106B506; // weak
_UNKNOWN loc_106D3C1; // weak
char a0123456789abcd[16] = "0123456789abcdef"; // weak
char a0123456789abcd_1[17] = "0123456789ABCDEFX"; // weak
char a0123456789abcd_3[36] = "0123456789abcdefghijklmnopqrstuvwxyz"; // weak
char a00010203040506[201] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899"; // weak
__int64 qword_10C5090 = 2LL; // weak
__int64 qword_10C5098 = 9LL; // weak
__int64 qword_10C50F0 = 4LL; // weak
__int64 qword_10C52A0[4] = { 58LL, 136LL, 341LL, 16LL }; // weak

==================================================

// function name: io_fs_FormatDirEntry

//----- (0000000001092260) ----------------------------------------------------
// io/fs.FormatDirEntry
retval_1092260 __golang io_fs_FormatDirEntry(__int64 a1, __int64 a2)
{
  retval_109228E v2; // kr80_16
  fs_FileMode v3; // eax
  int v4; // edi
  int v5; // esi
  int v6; // r8d
  int v7; // r9d
  int v8; // r10d
  int v9; // r11d
  string v10; // kr90_16
  unsigned __int64 r1; // rcx
  __int64 r2; // rdx
  __m128i *r0; // rsi
  unsigned __int64 v14; // rbx
  unsigned __int64 v15; // rcx
  __m128i *v16; // rax
  unsigned __int64 v17; // rdi
  unsigned __int64 v18; // rdx
  unsigned __int64 v19; // rbx
  __m128i *v20; // rax
  unsigned __int128 v21; // kr68_16
  retval_1050BE0 v24; // krA0_16
  unsigned __int64 v25; // [rsp+10h] [rbp-38h]
  unsigned __int64 v26; // [rsp+10h] [rbp-38h]
  unsigned __int64 v27; // [rsp+10h] [rbp-38h]
  unsigned __int64 v28; // [rsp+18h] [rbp-30h]
  unsigned __int64 v29; // [rsp+18h] [rbp-30h]
  unsigned __int64 v30; // [rsp+18h] [rbp-30h]
  __m128i *v31; // [rsp+30h] [rbp-18h]
  __m128i *v32; // [rsp+30h] [rbp-18h]
  __int64 v33; // [rsp+38h] [rbp-10h]
  retval_1068120 v36; // 0:kr00_24.24
  retval_1068120 v37; // 0:kr28_24.24
  retval_1068120 v38; // 0:kr40_24.24
  retval_1092260 result; // 0:rax.8,8:rbx.8

  v2 = ((retval_109228E (__golang *)(__int64))*(_QWORD *)(a1 + 40))(a2);
  v28 = v2._r1 + 5LL;
  v33 = runtime_makeslice(&RTYPE_uint8_0, 0);
  v3 = (*(__int64 (__golang **)(__int64))(a1 + 48))(a2);
  v10 = io_fs_FileMode_String(v3);
  r1 = v10.len - 9;
  if ( v10.len < 9 )
    runtime_panicSliceAlen((__int64)v10.ptr, v10.len, r1, v4, v5, v6, v7, v8, v9);
  r2 = v2._r1 + 5LL;
  if ( r1 > v28 )
  {
    v36 = runtime_growslice(v33, v10.len - 9, v28, v10.len - 9, &RTYPE_uint8_0);
    r2 = v36._r2;
    r0 = (__m128i *)v36._r0;
    r1 = v36._r1;
    v10 = (string)__PAIR128__(v10.len - 9, (unsigned __int64)v10.ptr);
  }
  else
  {
    r0 = (__m128i *)v33;
  }
  v31 = r0;
  v25 = r1;
  v29 = r2;
  runtime_memmove(r0, (const __m128i *)v10.ptr, v10.len);
  v14 = v25 + 1;
  v15 = v29;
  if ( v29 < v25 + 1 )
  {
    v37 = runtime_growslice(v31, v14, v29, 1, &RTYPE_uint8_0);
    v16 = (__m128i *)v37._r0;
    v14 = v37._r1;
    v15 = v37._r2;
  }
  else
  {
    v16 = v31;
  }
  v16->i8[v14 - 1] = 32;
  v17 = v2._r1;
  v18 = v14 + v2._r1;
  if ( v15 < v14 + v2._r1 )
  {
    v26 = v14;
    v38 = runtime_growslice(v16, v14 + v2._r1, v15, v2._r1, &RTYPE_uint8_0);
    v16 = (__m128i *)v38._r0;
    v15 = v38._r2;
    v17 = v2._r1;
    v18 = v38._r1;
    v14 = v26;
  }
  v32 = v16;
  v27 = v18;
  v30 = v15;
  runtime_memmove((__m128i *)((char *)v16 + v14), (const __m128i *)v2._r0, v17);
  if ( (*(unsigned __int8 (__golang **)(__int64))(a1 + 32))(a2) )
  {
    v19 = v27 + 1;
    if ( v30 < v27 + 1 )
    {
      v21 = (unsigned __int128)runtime_growslice(v32, v19, v30, 1, &RTYPE_uint8_0);
      v20 = (__m128i *)v21;
      v19 = *((_QWORD *)&v21 + 1);
    }
    else
    {
      v20 = v32;
    }
    v20->i8[v19 - 1] = 47;
  }
  else
  {
    v19 = v27;
    v20 = v32;
  }
  v24 = runtime_slicebytetostring(0, v20, v19);
  result._r1 = v24._r1;
  result._r0 = v24._r0;
  return result;
}

==================================================

// function name: runtime_panicSliceAlen

//----- (000000000106D800) ----------------------------------------------------
// runtime.panicSliceAlen
void __golang __noreturn runtime_panicSliceAlen(
        __int64 a1,
        __int64 a2,
        int64 a3,
        int a4,
        int a5,
        int a6,
        int a7,
        int a8,
        int a9)
{
  signed __int64 v9; // rdx

  runtime_goPanicSliceAlen(a3, v9, a3, a4, a5, a6, a7, a8, a9);
}

==================================================

// function name: runtime_sigtramp

//----- (000000000106ECE0) ----------------------------------------------------
// runtime.sigtramp
void __golang runtime_sigtramp(__int64 a1, __int64 a2, __int64 a3, unsigned int a4, __int64 a5)
{
  __int64 v5; // rdx

  runtime_sigtrampgo(a4, a5, v5);
}

==================================================

// function name: runtime_panicSlice3C

// 106D8C3: variable 'v9' is possibly undefined

//----- (000000000106D8E0) ----------------------------------------------------
// runtime.panicSlice3C
void __golang __noreturn runtime_panicSlice3C(
        int64 a1,
        __int64 a2,
        signed __int64 a3,
        int a4,
        int a5,
        int a6,
        int a7,
        int a8,
        int a9)
{
  runtime_goPanicSlice3C(a1, a3, a3, a4, a5, a6, a7, a8, a9);
}

==================================================

// function name: runtime_badmorestackgsignal_0

//----- (000000000106F9C0) ----------------------------------------------------
// runtime.badmorestackgsignal
__int64 runtime_badmorestackgsignal_0()
{
  return runtime_badmorestackgsignal();
}

==================================================

// function name: runtime_reflectcallmove_0

//----- (000000000106F860) ----------------------------------------------------
// runtime.reflectcallmove
__int64 __golang runtime_reflectcallmove_0(
        __int64 a1,
        __int64 a2,
        __int64 a3,
        __int64 a4,
        __int64 a5,
        int a6,
        int a7,
        int a8,
        int a9,
        __int64 a10,
        __int64 a11,
        __int64 a12,
        __int64 a13,
        __int64 a14)
{
  return runtime_reflectcallmove(a10, a11, a12, a13, a14, a6, a7, a8, a9);
}

==================================================

// function name: runtime_issetugid_trampoline

// 106F3F4: variable 'v5' is possibly undefined

//----- (000000000106F420) ----------------------------------------------------
// runtime.issetugid_trampoline
int runtime_issetugid_trampoline()
{
  return issetugid();
}

==================================================

// function name: runtime_sigfwd

// 106EC8F: variable 'v1' is possibly undefined

//----- (000000000106ECA0) ----------------------------------------------------
// runtime.sigfwd
__int64 __golang runtime_sigfwd(
        __int64 a1,
        __int64 a2,
        __int64 a3,
        __int64 a4,
        __int64 a5,
        __int64 a6,
        __int64 a7,
        __int64 a8,
        __int64 a9,
        __int64 (__fastcall *a10)(_QWORD, __int64, __int64),
        unsigned int a11,
        __int64 a12,
        __int64 a13)
{
  return a10(a11, a12, a13);
}

==================================================

// function name: runtime_panicIndexU

//----- (000000000106D7E0) ----------------------------------------------------
// runtime.panicIndexU
void __golang __noreturn runtime_panicIndexU(
        int64 a1,
        __int64 a2,
        signed __int64 a3,
        int a4,
        int a5,
        int a6,
        int a7,
        int a8,
        int a9)
{
  runtime_goPanicIndexU(a1, a3, a3, a4, a5, a6, a7, a8, a9);
}

==================================================

// function name: runtime_cputicks

// 106D260: using guessed type void __noreturn runtime_abort();

//----- (000000000106D280) ----------------------------------------------------
// runtime.cputicks
retval_106D280 __golang runtime_cputicks(unsigned __int64 a1)
{
  __int64 v1; // rdx

  if ( byte_11966AF == 1 )
  {
    __asm { rdtscp }
  }
  else
  {
    _mm_mfence();
    _mm_lfence();
    a1 = __rdtsc();
    LODWORD(v1) = HIDWORD(a1);
    a1 = (unsigned int)a1;
    v1 = (unsigned int)v1;
  }
  return (retval_106D280)((v1 << 32) + a1);
}

==================================================

// function name: sync_atomic_SwapUintptr

//----- (0000000001070840) ----------------------------------------------------
// sync/atomic.SwapUintptr
__int64 __golang sync_atomic_SwapUintptr(volatile __int64 *a1, __int64 a2)
{
  return _InterlockedExchange64(a1, a2);
}

==================================================

// function name: runtime_asmcgocall_landingpad

//----- (000000000106D160) ----------------------------------------------------
// runtime.asmcgocall_landingpad
__int64 __golang runtime_asmcgocall_landingpad(__int64 (__fastcall *a1)(__int64), __int64 a2)
{
  return a1(a2);
}

==================================================

// function name: runtime_osinit_0

//----- (000000000106F8C0) ----------------------------------------------------
// runtime.osinit
__int64 runtime_osinit_0()
{
  return runtime_osinit();
}

==================================================

// function name: runtime_pthread_attr_setdetachstate_trampoline

//----- (000000000106F060) ----------------------------------------------------
// runtime.pthread_attr_setdetachstate_trampoline
int __golang runtime_pthread_attr_setdetachstate_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
{
  return pthread_attr_setdetachstate(*(pthread_attr_t **)a4, *(_QWORD *)(a4 + 8));
}

==================================================

// function name: debugCall256

//----- (000000000106AEA0) ----------------------------------------------------
// debugCall256
void __gostk debugCall256(char a1)
{
  char **v1; // r12
  __int64 v2; // [rsp-80h] [rbp-108h] BYREF

  v1 = *(char ***)(__readgsqword(0x30u) + 32);
  if ( v1 && *v1 == &a1 )
    *v1 = (char *)&v2;
  __debugbreak();
  __debugbreak();
}

==================================================

// function name: runtime_panicSliceAlenU

// 106D806: variable 'v9' is possibly undefined

//----- (000000000106D820) ----------------------------------------------------
// runtime.panicSliceAlenU
void __golang __noreturn runtime_panicSliceAlenU(
        __int64 a1,
        __int64 a2,
        int64 a3,
        int a4,
        int a5,
        int a6,
        int a7,
        int a8,
        int a9)
{
  signed __int64 v9; // rdx

  runtime_goPanicSliceAlenU(a3, v9, a3, a4, a5, a6, a7, a8, a9);
}

==================================================

// function name: runtime_pthread_attr_getstacksize_trampoline

//----- (000000000106F040) ----------------------------------------------------
// runtime.pthread_attr_getstacksize_trampoline
int __golang runtime_pthread_attr_getstacksize_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
{
  return pthread_attr_getstacksize(*(const pthread_attr_t **)a4, *(size_t **)(a4 + 8));
}

==================================================

// function name: runtime_gcWriteBarrier3

//----- (000000000106D440) ----------------------------------------------------
// runtime.gcWriteBarrier3
void runtime_gcWriteBarrier3()
{
  gcWriteBarrier();
}

==================================================

// function name: runtime_syscall6X

// 106F394: variable 'v5' is possibly undefined

//----- (000000000106F3C0) ----------------------------------------------------
// runtime.syscall6X
__int64 __golang runtime_syscall6X(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
{
  __int64 v4; // rax
  __int64 v5; // rdx

  v4 = (*(__int64 (__golang **)(_QWORD, __int64, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))a4)(
         0,
         a2,
         *(_QWORD *)(a4 + 32),
         *(_QWORD *)(a4 + 8),
         *(_QWORD *)(a4 + 16),
         *(_QWORD *)(a4 + 40),
         *(_QWORD *)(a4 + 48));
  *(_QWORD *)(a4 + 56) = v4;
  *(_QWORD *)(a4 + 64) = v5;
  if ( v4 == -1 )
    *(_QWORD *)(a4 + 72) = *__error();
  return 0;
}

==================================================

// function name: runtime_asyncPreempt

// 1195F10: using guessed type char runtime_memmoveBits;

//----- (000000000106E840) ----------------------------------------------------
// runtime.asyncPreempt
void __golang __noreturn runtime_asyncPreempt(
        __int64 a1,
        __int64 a2,
        __int64 a3,
        __int64 a4,
        __int64 a5,
        __int64 a6,
        __int64 a7,
        __int64 a8,
        __int64 a9)
{
  __readeflags();
  runtime_asyncPreempt2_0(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

==================================================

// function name: runtime_debugCallWrap_0

return (unsigned __int128)runtime_debugCallCheck(a10, a2, a3, a4, a5, a6, a7, a8, a9);

//----- (000000000106F820) ----------------------------------------------------
// runtime.debugCallWrap
void __golang __noreturn runtime_debugCallWrap_0(
        __int64 a1,
        __int64 a2,
        __int64 a3,
        __int64 a4,
        __int64 a5,
        __int64 a6,
        __int64 a7,
        __int64 a8,
        __int64 a9,
        __int64 (*a10)(void))
{
  runtime_debugCallWrap(a10, a2, a3, a4, a5, a6, a7, a8, a9);
}

==================================================

// function name: runtime_morestackc_0

//----- (000000000106FB40) ----------------------------------------------------
// runtime.morestackc
void __golang __noreturn runtime_morestackc_0(
        __int64 a1,
        __int64 a2,
        __int64 a3,
        __int64 a4,
        __int64 a5,
        __int64 a6,
        __int64 a7,
        __int64 a8,
        __int64 a9)
{
  __asm { xorps   xmm15, xmm15 }
}

==================================================

// function name: runtime_duffcopy

// 106D920: variable 'v3' is possibly undefined

//----- (000000000106DAA0) ----------------------------------------------------
// runtime.duffcopy
retval_106DAA0 __golang runtime_duffcopy(__int64 a1, __int64 a2, __int64 a3, _OWORD *a4, __int128 *a5)
{
  __int128 v5; // xmm0
  __int128 *v6; // rsi
  _OWORD *v7; // rdi
  __int128 v8; // xmm0
  __int128 v9; // xmm0
  __int128 v10; // xmm0
  __int128 v11; // xmm0
  __int128 v12; // xmm0
  __int128 v13; // xmm0
  __int128 v14; // xmm0
  __int128 v15; // xmm0
  __int128 v16; // xmm0
  __int128 v17; // xmm0
  __int128 v18; // xmm0
  __int128 v19; // xmm0
  __int128 v20; // xmm0
  __int128 v21; // xmm0
  __int128 v22; // xmm0
  __int128 v23; // xmm0
  __int128 v24; // xmm0
  __int128 v25; // xmm0
  __int128 v26; // xmm0
  __int128 v27; // xmm0
  __int128 v28; // xmm0
  __int128 v29; // xmm0
  __int128 v30; // xmm0
  __int128 v31; // xmm0
  __int128 v32; // xmm0
  __int128 v33; // xmm0
  __int128 v34; // xmm0
  __int128 v35; // xmm0
  __int128 v36; // xmm0
  __int128 v37; // xmm0
  __int128 v38; // xmm0
  __int128 v39; // xmm0
  __int128 v40; // xmm0
  __int128 v41; // xmm0
  __int128 v42; // xmm0
  __int128 v43; // xmm0
  __int128 v44; // xmm0
  __int128 v45; // xmm0
  __int128 v46; // xmm0
  __int128 v47; // xmm0
  __int128 v48; // xmm0
  __int128 v49; // xmm0
  __int128 v50; // xmm0
  __int128 v51; // xmm0
  __int128 v52; // xmm0
  __int128 v53; // xmm0
  __int128 v54; // xmm0
  __int128 v55; // xmm0
  __int128 v56; // xmm0
  __int128 v57; // xmm0
  __int128 v58; // xmm0
  __int128 v59; // xmm0
  __int128 v60; // xmm0
  __int128 v61; // xmm0
  __int128 v62; // xmm0
  __int128 v63; // xmm0
  __int128 v64; // xmm0
  __int128 v65; // xmm0
  __int128 v66; // xmm0
  __int128 v67; // xmm0
  __int128 v68; // xmm0
  __int128 v69; // xmm0
  __int128 v70; // xmm0
  retval_106DAA0 result; // 0:rax.8,8:rbx.8,16:rcx.8,24:rdi.16

  v5 = *a5;
  v6 = a5 + 1;
  *a4 = v5;
  v7 = a4 + 1;
  v8 = *v6++;
  *v7++ = v8;
  v9 = *v6++;
  *v7++ = v9;
  v10 = *v6++;
  *v7++ = v10;
  v11 = *v6++;
  *v7++ = v11;
  v12 = *v6++;
  *v7++ = v12;
  v13 = *v6++;
  *v7++ = v13;
  v14 = *v6++;
  *v7++ = v14;
  v15 = *v6++;
  *v7++ = v15;
  v16 = *v6++;
  *v7++ = v16;
  v17 = *v6++;
  *v7++ = v17;
  v18 = *v6++;
  *v7++ = v18;
  v19 = *v6++;
  *v7++ = v19;
  v20 = *v6++;
  *v7++ = v20;
  v21 = *v6++;
  *v7++ = v21;
  v22 = *v6++;
  *v7++ = v22;
  v23 = *v6++;
  *v7++ = v23;
  v24 = *v6++;
  *v7++ = v24;
  v25 = *v6++;
  *v7++ = v25;
  v26 = *v6++;
  *v7++ = v26;
  v27 = *v6++;
  *v7++ = v27;
  v28 = *v6++;
  *v7++ = v28;
  v29 = *v6++;
  *v7++ = v29;
  v30 = *v6++;
  *v7++ = v30;
  v31 = *v6++;
  *v7++ = v31;
  v32 = *v6++;
  *v7++ = v32;
  v33 = *v6++;
  *v7++ = v33;
  v34 = *v6++;
  *v7++ = v34;
  v35 = *v6++;
  *v7++ = v35;
  v36 = *v6++;
  *v7++ = v36;
  v37 = *v6++;
  *v7++ = v37;
  v38 = *v6++;
  *v7++ = v38;
  v39 = *v6++;
  *v7++ = v39;
  v40 = *v6++;
  *v7++ = v40;
  v41 = *v6++;
  *v7++ = v41;
  v42 = *v6++;
  *v7++ = v42;
  v43 = *v6++;
  *v7++ = v43;
  v44 = *v6++;
  *v7++ = v44;
  v45 = *v6++;
  *v7++ = v45;
  v46 = *v6++;
  *v7++ = v46;
  v47 = *v6++;
  *v7++ = v47;
  v48 = *v6++;
  *v7++ = v48;
  v49 = *v6++;
  *v7++ = v49;
  v50 = *v6++;
  *v7++ = v50;
  v51 = *v6++;
  *v7++ = v51;
  v52 = *v6++;
  *v7++ = v52;
  v53 = *v6++;
  *v7++ = v53;
  v54 = *v6++;
  *v7++ = v54;
  v55 = *v6++;
  *v7++ = v55;
  v56 = *v6++;
  *v7++ = v56;
  v57 = *v6++;
  *v7++ = v57;
  v58 = *v6++;
  *v7++ = v58;
  v59 = *v6++;
  *v7++ = v59;
  v60 = *v6++;
  *v7++ = v60;
  v61 = *v6++;
  *v7++ = v61;
  v62 = *v6++;
  *v7++ = v62;
  v63 = *v6++;
  *v7++ = v63;
  v64 = *v6++;
  *v7++ = v64;
  v65 = *v6++;
  *v7++ = v65;
  v66 = *v6++;
  *v7++ = v66;
  v67 = *v6++;
  *v7++ = v67;
  v68 = *v6++;
  *v7++ = v68;
  v69 = *v6++;
  *v7++ = v69;
  v70 = *v6;
  result._r4 = v6 + 1;
  *v7 = v70;
  result._r3 = v7 + 1;
  return result;
}

==================================================

// function name: runtime_mcall

//----- (000000000106B4A0) ----------------------------------------------------
// runtime.mcall
void __golang __noreturn runtime_mcall(
        void (__golang **rax0)(_QWORD *),
        __int64 a2,
        __int64 a3,
        __int64 a4,
        __int64 a5,
        __int64 a6,
        __int64 a7,
        __int64 a8,
        __int64 a9,
        __int64 a1)
{
  _QWORD *v10; // r14
  unsigned __int64 *v11; // rbx
  __int64 vars0; // [rsp+0h] [rbp+0h]
  _UNKNOWN *retaddr; // [rsp+8h] [rbp+8h]

  v10[8] = retaddr;
  v10[7] = &a1;
  v10[13] = vars0;
  v11 = (unsigned __int64 *)v10[6];
  if ( (_QWORD *)*v11 == v10 )
    runtime_badmcall_0(a1);
  __writegsqword(0x30u, *v11);
  (*rax0)(v10);
  runtime_badmcall2_0(a1);
}

==================================================

// function name: runtime_badmcall_0

//----- (000000000106F900) ----------------------------------------------------
// runtime.badmcall
void __gostk __noreturn runtime_badmcall_0(__int64 a1)
{
  runtime_badmcall(a1);
}

==================================================

// function name: runtime_badmcall2_0

// 1038A80: using guessed type void __golang __noreturn runtime_badmcall(_QWORD);

//----- (000000000106F940) ----------------------------------------------------
// runtime.badmcall2
void __gostk __noreturn runtime_badmcall2_0(__int64 a1)
{
  runtime_badmcall2(a1);
}

==================================================

// function name: runtime_return0

unsigned __int64 __golang runtime_memhash(const __m128i *a1, unsigned __int64 a2, unsigned __int64 a3);
unsigned __int64 __golang runtime_strhash(__int64 a1, unsigned __int64 a2);
__int64 __golang runtime_memhash32(unsigned int *a1, __int64 a2);
__int64 __golang runtime_memhash64(signed __int64 *a1, unsigned __int64 a2);
__int64 runtime_return0(void); // weak
void __golang __noreturn runtime_goexit(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __noreturn runtime_sigpanic0(); // weak
void runtime_gcWriteBarrier1();
void runtime_gcWriteBarrier2();
void runtime_gcWriteBarrier3();
void runtime_gcWriteBarrier4();
void runtime_gcWriteBarrier5();
void runtime_gcWriteBarrier6();
void runtime_gcWriteBarrier7();
void runtime_gcWriteBarrier8();
retval_106D500 __golang runtime_debugCallV2(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_debugCallPanicked(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, __int64 a11);
void __golang __noreturn runtime_panicIndex(int64 a1, _QWORD a2, signed __int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
void __golang __noreturn runtime_panicIndexU(int64 a1, __int64 a2, signed __int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
void __golang __noreturn runtime_panicSliceAlen(__int64 a1, __int64 a2, int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
void __golang __noreturn runtime_panicSliceAlenU(__int64 a1, __int64 a2, int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
void __golang __noreturn runtime_panicSliceAcap(__int64 a1, __int64 a2, int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
void __golang __noreturn runtime_panicSliceAcapU(__int64 a1, __int64 a2, int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
void __golang __noreturn runtime_panicSliceB(int64 a1, __int64 a2, signed __int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
void __golang __noreturn runtime_panicSliceBU(int64 a1, __int64 a2, signed __int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
void __golang __noreturn runtime_panicSlice3Alen(__int64 a1, signed __int64 a2, __int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
void __golang __noreturn runtime_panicSlice3C(int64 a1, __int64 a2, signed __int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
__int64 runtime_getfp(void); // weak
// _OWORD *__usercall runtime_duffzero@<rdi>();
retval_106DAA0 __golang runtime_duffcopy(__int64 a1, __int64 a2, __int64 a3, _OWORD *a4, __int128 *a5);
__int64 __golang runtime_memclrNoHeapPointers(_OWORD *a1, unsigned __int64 _RBX, double _XMM0_8);
char __golang runtime_memmove(__m128i *a1, const __m128i *a2, unsigned __int64 a3);
void __golang __noreturn runtime_asyncPreempt(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_106EA20 __golang runtime_sigprofNonGoWrapper(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang __noreturn runtime_exit_trampoline(__int64 a1, __int64 a2, __int64 a3, int *a4);
int __golang runtime_open_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
ssize_t __golang runtime_write_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
int __golang runtime_madvise_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
uint64_t runtime_nanotime_trampoline();
int __fastcall runtime_walltime_trampoline(timespec *__tp);
int __golang runtime_sigaction_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
int __golang runtime_sigprocmask_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
int __golang runtime_sigaltstack_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
int runtime_raiseproc_trampoline();
__int64 __golang runtime_sigfwd(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 (__fastcall *a10)(_QWORD, __int64, __int64), unsigned int a11, __int64 a12, __int64 a13);
void __golang runtime_sigtramp(__int64 a1, __int64 a2, __int64 a3, unsigned int a4, __int64 a5);
void __golang runtime_cgoSigtramp(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5);
void *__golang runtime_mmap_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
int __golang runtime_munmap_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
int __golang runtime_usleep_trampoline(__int64 a1, __int64 a2, __int64 a3, useconds_t *a4);
void runtime_settls();
int __golang runtime_sysctl_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
int runtime_kqueue_trampoline();
int __golang runtime_kevent_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
int __golang runtime_fcntl_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
retval_106EFC0 __golang runtime_mstart_stub(__int64 a1, __int64 a2, __int64 a3, unsigned __int64 *a4);
int __golang runtime_pthread_attr_init_trampoline(__int64 a1, __int64 a2, __int64 a3, pthread_attr_t **a4);
int __golang runtime_pthread_attr_getstacksize_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
int __golang runtime_pthread_attr_setdetachstate_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
int __golang runtime_pthread_create_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
int __golang runtime_raise_trampoline(__int64 a1, __int64 a2, __int64 a3, int *a4);
int __golang runtime_pthread_mutex_init_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
int __golang runtime_pthread_mutex_lock_trampoline(__int64 a1, __int64 a2, __int64 a3, pthread_mutex_t **a4);
int __golang runtime_pthread_mutex_unlock_trampoline(__int64 a1, __int64 a2, __int64 a3, pthread_mutex_t **a4);
int __golang runtime_pthread_cond_init_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
int __golang runtime_pthread_cond_wait_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
int __golang runtime_pthread_cond_timedwait_relative_np_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
int __golang runtime_pthread_cond_signal_trampoline(__int64 a1, __int64 a2, __int64 a3, pthread_cond_t **a4);
pthread_t runtime_pthread_self_trampoline();
int __golang runtime_pthread_kill_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
xpc_object_t runtime_osinit_hack_trampoline();
void __golang runtime_arc4random_buf_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
__int64 __golang runtime_syscall(__int64 a1, __int64 a2, __int64 a3, _QWORD *a4);
__int64 __golang runtime_syscallX(__int64 a1, __int64 a2, __int64 a3, _QWORD *a4);
__int64 __golang runtime_syscallPtr(__int64 a1, __int64 a2, __int64 a3, _QWORD *a4);
__int64 __golang runtime_syscall6(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
__int64 __golang runtime_syscall6X(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
int runtime_issetugid_trampoline();
string __golang runtime__ptr_lockRank_String(_ptr_runtime_lockRank);
string __golang runtime__ptr_plainError_Error(_ptr_runtime_plainError);
string __golang runtime__ptr_waitReason_String(_ptr_runtime_waitReason);
string __golang runtime__ptr_errorString_Error(_ptr_runtime_errorString);
string __golang runtime__ptr_errorAddressString_Error(_ptr_runtime_errorAddressString);
string __golang runtime__ptr_boundsError_Error(_ptr_runtime_boundsError);
__int64 __golang runtime_metricReader_compute_fm(__int64 a1, _QWORD *a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10);
__int64 __golang runtime__ptr_itabTableType_add_fm(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10);
unsigned __int128 __golang runtime_debugCallCheck_0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10);
void __golang __noreturn runtime_debugCallWrap_0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 (*a10)(void));
__int64 __golang runtime_reflectcallmove_0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, int a6, int a7, int a8, int a9, __int64 a10, __int64 a11, __int64 a12, __int64 a13, __int64 a14);
unsigned __int64 __golang runtime_wbBufFlush_0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 runtime_osinit_0(); // weak
void __golang __noreturn runtime_asyncPreempt2_0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __gostk __noreturn runtime_badmcall_0(__int64 a1);
void __gostk __noreturn runtime_badmcall2_0(__int64 a1);
void __noreturn runtime_badreflectcall_0(void); // weak
void __golang __noreturn runtime_badmorestackg0_0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, int a6, int a7, int a8, int a9);
__int64 runtime_badmorestackgsignal_0(void); // weak
void runtime_schedinit_0();
__int64 runtime_mstart0_0(void); // weak
void __golang __noreturn runtime_goexit1_0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
unsigned __int64 __golang runtime_newproc_0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 (*a10)(void));
__int64 __golang runtime_args_0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, unsigned int a10, __int64 a11);
void __golang __noreturn runtime_check_0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_sigprofNonGo_0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, unsigned int a10, __int64 a11, __int64 a12);
__int64 __golang runtime_newstack_0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, unsigned int *a6, unsigned int *a7, unsigned __int64 a8, __int64 a9);
void __golang __noreturn runtime_morestackc_0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_badsystemstack_0(_QWORD, _QWORD, _QWORD, _QWORD); // weak
__int64 __golang runtime_reflectcall_0(__int64 a1, retval_106BA60 (__golang **a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double), const void *a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, char a10);
__int64 __golang runtime_asmcgocall_0(__int64 (__fastcall *a1)(__int64), __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_106FC20 __golang runtime_fcntl_0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9);
unsigned int __gostk runtime_write_0(__int64 a1, __int64 a2, unsigned int a3);
bool __golang type__eq_runtime_Frame(__int64 a1, __int64 a2);
bool __golang type__eq_runtime_modulehash(__int64 a1, __int64 a2);
bool __golang type__eq_runtime_bitvector(__int64 a1, __int64 a2);
bool __golang type__eq_runtime__func(const __m128i *a1, const __m128i *a2);
__int64 type__eq_runtime_PanicNilError(); // weak
bool __golang type__eq_runtime_boundsError(__int64 a1, __int64 a2);
bool __golang type__eq_runtime__panic(__int64 a1, __int64 a2);
bool __golang type__eq_runtime_mcache(const __m128i *a1, const __m128i *a2);
bool __golang type__eq_runtime_mspan(__int64 a1, __int64 a2);
bool __golang type__eq_runtime_mSpanList(_QWORD *a1, _QWORD *a2);
bool __golang type__eq_runtime_gcBits(_BYTE *a1, _BYTE *a2);
bool __golang type__eq_runtime_special(__int64 a1, __int64 a2);
bool __golang type__eq_struct__runtime_gList_runtime_n_int32_(__int64 a1, __int64 a2);
bool __golang type__eq_runtime_hchan(__int64 a1, __int64 a2);
bool __golang type__eq_runtime_pTraceState(const __m128i *a1, const __m128i *a2);
__int64 __golang type__eq_runtime_traceSchedResourceState(const __m128i *a1, const __m128i *a2);
__int64 type__eq_runtime_notInHeap(); // weak
bool __golang type__eq_runtime_limiterEvent(_QWORD *a1, _QWORD *a2);
bool __golang type__eq_runtime_gcWork(const __m128i *a1, const __m128i *a2);
bool __golang type__eq_runtime_workbuf(const __m128i *a1, const __m128i *a2);
bool __golang type__eq_runtime_mTraceState(const __m128i *a1, const __m128i *a2);
bool __golang type__eq_runtime_traceBuf(const __m128i *a1, const __m128i *a2);
bool __golang type__eq_runtime_mOS(__int64 a1, __int64 a2);
__int64 __golang type__eq_runtime_gTraceState(const __m128i *a1, const __m128i *a2);
bool __golang type__eq_runtime_errorAddressString(__int64 a1, __int64 a2);
bool __golang type__eq_runtime_untracedG_4(const __m128i *a1, const __m128i *a2);
bool __golang type__eq_runtime_TypeAssertionError(__int64 a1, __int64 a2);
bool __golang type__eq_runtime_piController(__int64 a1, __int64 a2);
bool __golang type__eq__2_runtime_Frame(__int64 a1, __int64 a2);
retval_1070820 __golang sync_atomic__ptr_Uint32_Store(volatile __int32 *a1, __int32 a2);
__int64 __golang sync_atomic_SwapUintptr(volatile __int64 *a1, __int64 a2);
bool __golang sync_atomic_CompareAndSwapUintptr(volatile signed __int64 *a1, signed __int64 a2, signed __int64 a3);
retval_1070880 __golang sync_atomic_StoreUintptr(volatile __int64 *a1, __int64 a2);
bool __golang type__eq_sync_atomic_Bool(_DWORD *a1, _DWORD *a2);
bool __golang type__eq_sync_atomic_Uint32(_DWORD *a1, _DWORD *a2);
bool __golang type__eq_sync_atomic_Uint64(_QWORD *a1, _QWORD *a2);
// string __golang internal_reflectlite_rtype_String(reflectlite_rtype);
// string __golang internal_reflectlite_rtype_Name(reflectlite_rtype);
uintptr __golang internal_reflectlite_elem(reflectlite_rtype a1);
// reflectlite_Type __golang internal_reflectlite_rtype_Elem(reflectlite_rtype);
signed __int64 __golang internal_reflectlite_rtype_Len(reflectlite_rtype);
bool __golang internal_reflectlite_rtype_Comparable(reflectlite_rtype);
bool __golang internal_reflectlite__ptr_rtype_Comparable(_ptr_reflectlite_rtype);
reflectlite_Type __golang internal_reflectlite__ptr_rtype_Elem(_ptr_reflectlite_rtype);
signed __int64 __golang internal_reflectlite__ptr_rtype_Len(_ptr_reflectlite_rtype);
string __golang internal_reflectlite__ptr_rtype_Name(_ptr_reflectlite_rtype);
string __golang internal_reflectlite__ptr_rtype_String(_ptr_reflectlite_rtype);
string __golang errors__ptr_errorString_Error(_ptr_errors_errorString);
__int64 __golang errors_Is(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
__int64 __golang errors_is(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, double a6);
retval_1071260 __golang unicode_utf8_DecodeRune(unsigned __int8 *a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, int a8, int a9);
retval_1071400 __golang unicode_utf8_DecodeRuneInString(unsigned __int8 *a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, int a8, int a9);
retval_10715A0 __golang unicode_utf8_encodeRuneNonASCII(__int64 a1, unsigned __int64 a2, __int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
__int64 __golang unicode_utf8_appendRuneNonASCII(__int64 result, __int64 a2, unsigned __int64 a3, int a4);
// __int64 __golang strconv__ptr_decimal_Assign(_QWORD, _QWORD); weak
// __int64 __golang strconv__ptr_decimal_Shift(_QWORD, _QWORD); weak
// __int64 __golang strconv__ptr_decimal_Round(_QWORD, _QWORD); weak
retval_1071FC0 __golang strconv_genericFtoa(__int64 r0, __int64 a2, unsigned __int64 r2, unsigned __int8 a4, __int64 a5, __int64 a6, double a7);
__int64 __golang strconv_bigFtoa(int a1, int a2, int a3, __int64 a4, unsigned __int8 a5, unsigned __int8 a6, __int64 a7, __int64 a8, _QWORD *a9);
// __int64 __golang strconv_formatDigits(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64, __int64, __int64, __int64, __int64); weak
// __int64 __golang strconv_roundShortest(_QWORD, _QWORD, _QWORD, _QWORD); weak
__int64 __golang strconv_fmtE(__int64 result, __int64 r1, unsigned __int64 r2, char a4, char *a5, __int64 a6, unsigned __int64 a7, __int64 a8, __int64 a9, __int64 a10, char a11);
__int64 __golang strconv_fmtF(__int64 result, __int64 r1, unsigned __int64 r2, unsigned __int64 a4, const __m128i *a5, unsigned __int64 a6, unsigned __int64 a7, __int64 a8, __int64 a9, __int64 a10);
// __int64 __fastcall strconv_fmtB(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
__int64 __golang strconv_fmtX(__int64 r0, __int64 r1, unsigned __int64 r2, __int64 a4, unsigned __int8 a5, char a6, __int64 a7, __int64 a8, _QWORD *a9);
unsigned __int64 __golang strconv_ryuFtoaFixed32(unsigned __int64 result, unsigned int a2, __int64 a3, signed __int64 a4);
unsigned __int64 __golang strconv_ryuFtoaFixed64(unsigned __int64 result, unsigned __int64 a2, __int64 a3, signed __int64 a4);
unsigned __int64 __golang strconv_formatDecimal(char *a1, unsigned __int64 a2, char a3, char *a4, unsigned __int64 a5, int a6, unsigned __int64 a7, const char *a8, int a9);
// __int64 __golang strconv_ryuFtoaShortest(_QWORD, _QWORD, _QWORD, _QWORD); weak
__int64 *__golang strconv_ryuDigits32(__int64 *result, unsigned int a2, unsigned int a3, unsigned int a4, bool a5, __int64 a6, __int64 a7, __int64 a8, int a9);
// retval_10752C0 __golang strconv_mult64bitPow10(_QWORD, _QWORD, _QWORD); weak
// retval_10753A0 __golang strconv_mult128bitPow10(_QWORD, _QWORD, _QWORD); weak
retval_10754C0 __golang strconv_FormatInt(__int64 a1, unsigned __int64 a2, __int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
retval_10755A0 __golang strconv_formatBits(unsigned __int64 r0, __int64 a2, unsigned __int64 r2, unsigned __int64 a4, unsigned __int64 a5, char a6, char a7);
__m128i *__golang strconv_appendQuotedWith(__m128i *result, unsigned __int64 a2, unsigned __int64 a3, unsigned __int8 *a4, unsigned __int64 a5, __int64 a6, __int64 a7, unsigned int a8);
// __int64 __fastcall strconv_appendEscapedRune(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
// __int64 __golang strconv_IsPrint(_QWORD); weak
// void __golang internal_sync__ptr_Mutex_lockSlow(_ptr_sync_Mutex_0);
// __int64 __golang internal_sync__ptr_Mutex_unlockSlow(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
__int64 __golang sync__ptr_Once_doSlow(__int64 a1, void (**a2)(void));
// __int64 __golang sync__ptr_Once_doSlow_deferwrap2(int, int, int, int, int, int, int, int, int, char); weak
// __int64 __golang sync__ptr_Once_doSlow_deferwrap1(int, int, int, int, int, int, int, int, int, char); weak
// __int64 __golang sync__ptr_Pool_Put(_QWORD, _QWORD, _QWORD); weak
// interface_ __golang sync__ptr_Pool_Get(_ptr_sync_Pool);
retval_1077140 __golang sync__ptr_Pool_getSlow(__int64 *a1, unsigned __int64 a2);
// __int64 __golang sync__ptr_poolDequeue_pushHead(_QWORD); weak
// retval_1077760 __golang sync__ptr_poolDequeue_popHead(_QWORD); weak
__int64 __golang sync__ptr_poolChain_pushHead(sync_poolChainElt **a1);
retval_1077BA0 __golang sync__ptr_poolChain_popHead(__int64 *a1);
// __int64 __golang sync__ptr_poolChain_popTail(_QWORD); weak
__int64 __golang internal_sync__ptr_HashTrieMap_go_shape_interface__comma_go_shape_interface___iter(__int64 a1, __int64 a2, __int64 a3, unsigned __int8 (__golang **a4)(_QWORD, _QWORD, _QWORD, _QWORD));
__int64 __golang internal_sync__ptr_HashTrieMap_go_shape_interface__comma_go_shape_interface___Range(__int64 a1, __int64 a2, unsigned __int8 (__golang **a3)(_QWORD, _QWORD, _QWORD, _QWORD));
retval_10780E0 __golang internal_sync__ptr_HashTrieMap_go_shape_interface__comma_go_shape_interface___expand(__int64 a1, __int64 a2, __int64 a3, __int64 a4, unsigned __int64 a5, __int64 a6, sync_indirect_go_shape_interface__comma_go_shape_interface__ *a7);
retval_1078320 __golang internal_sync__ptr_HashTrieMap_go_shape_interface__comma_go_shape_interface___LoadOrStore(__int64 a1, __int64 a2, void *a3, void *a4, __int64 a5, __int64 a6);
// __int64 __golang internal_sync__ptr_HashTrieMap_go_shape_interface__comma_go_shape_interface___LoadOrStore_deferwrap1(int, int, int, int, int, int, int, int, int, char); weak
retval_1078A20 __golang internal_sync__ptr_HashTrieMap_go_shape_interface__comma_go_shape_interface___Load(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
__int64 __golang internal_sync__ptr_HashTrieMap_go_shape_interface__comma_go_shape_interface___initSlow(__int64 a1, __int64 a2);
// __int64 __golang internal_sync__ptr_HashTrieMap_go_shape_interface__comma_go_shape_interface___initSlow_deferwrap1(int, int, int, int, int, int, int, int, int, char); weak
__int64 __golang type__eq_sync_Mutex(_DWORD *a1, _DWORD *a2);
bool __golang type__eq_sync_atomic_Pointer_sync_poolChainElt_(_QWORD *a1, _QWORD *a2);
bool __golang type__eq_sync_poolLocal(const __m128i *a1, const __m128i *a2);
__int64 __golang type__eq_sync_poolLocalInternal(_QWORD *a1, _QWORD *a2);
bool __golang type__eq_sync_poolChain(_QWORD *a1, _QWORD *a2);
bool __golang type__eq_sync_atomic_Pointer_internal_sync_indirect_interface__comma_interface___(_QWORD *a1, _QWORD *a2);
__int64 __golang type__eq_internal_sync_indirect_interface__comma_interface__(__int64 a1, __int64 a2);
__int64 __golang type__eq_internal_sync_entry_interface__comma_interface__(__int64 a1, __int64 a2);
bool __golang type__eq_sync_atomic_Pointer_internal_sync_entry_interface__comma_interface___(_QWORD *a1, _QWORD *a2);
__int64 __golang type__eq__16_sync_atomic_Pointer_internal_sync_node_interface__comma_interface___(__int64 a1, __int64 a2);
bool __golang type__eq_sync_atomic_Pointer_internal_sync_node_interface__comma_interface___(_QWORD *a1, _QWORD *a2);
__int64 __golang type__eq_sync_Once(_DWORD *a1, _DWORD *a2);
__int64 __golang type__eq_internal_sync_entry_go_shape_interface__comma_go_shape_interface__(__int64 a1, __int64 a2);
bool __golang type__eq_sync_atomic_Pointer_internal_sync_entry_go_shape_interface__comma_go_shape_interface___(_QWORD *a1, _QWORD *a2);
__int64 __golang type__eq_internal_sync_indirect_go_shape_interface__comma_go_shape_interface__(__int64 a1, __int64 a2);
__int64 __golang type__eq__16_sync_atomic_Pointer_go_shape_struct__internal_sync_isEntry_bool__(__int64 a1, __int64 a2);
bool __golang type__eq_sync_atomic_Pointer_go_shape_struct__internal_sync_isEntry_bool__(_QWORD *a1, _QWORD *a2);
void unicode_init();
// retval_10795C0 __golang internal_itoa_Itoa(_QWORD, _QWORD, _QWORD); weak
void reflect_init();
__int64 __golang reflect__ptr_abiSeq_addArg(__int64 *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, int a8, _QWORD *a9);
// retval_1079B60 __golang reflect__ptr_abiSeq_addRcvr(_QWORD); weak
__int64 __golang reflect__ptr_abiSeq_regAssign(_QWORD *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, int a7, int a8, int a9);
__int64 __golang reflect__ptr_abiSeq_assignIntN(_QWORD *a1, __int64 a2, __int64 a3, unsigned __int64 a4, unsigned __int8 a5);
retval_107A620 __golang reflect_newAbiDesc(__int64 a1, __int64 a2);
// __int64 __fastcall reflect_intFromReg(_QWORD, _QWORD, _QWORD, _QWORD); weak
// __int64 __golang reflect_intToReg(_QWORD, _QWORD, _QWORD, _QWORD); weak
// __int64 __golang reflect_moveMakeFuncArgPtrs(_QWORD, _QWORD); weak
void __golang reflect_mapIterStart(__int64 a1, _QWORD *a2, __int64 *a3);
void __golang reflect_mapIterNext(__int64 *a1);
__int64 __golang reflect__ptr_MapIter_Key(_QWORD *a1);
__int64 __golang reflect__ptr_MapIter_Value(_QWORD *a1);
bool __golang reflect__ptr_MapIter_Next(__int64 *a1);
// void __golang reflect_flag_panicNotMap(reflect_flag);
retval_107B7C0 __golang reflect__ptr_rtype_exportedMethods(__int64 a1);
uintptr __golang reflect_elem(reflect_rtype *a1);
// string __golang reflect_ChanDir_String(reflect_ChanDir);
__int64 *__golang reflect__ptr_structType_Field(abi_Name *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, size_t len);
retval_107BBC0 __golang reflect_funcLayout(reflect_rtype *a1, reflect_rtype *a2);
// __int64 __golang reflect_funcLayout_func1(); weak
int *__golang reflect_addTypeBits(int *result, unsigned __int64 a2, __int64 a3, int a4, int a5, int a6, __int64 a7, int a8, _QWORD *a9);
__int64 __golang reflect_packEface(__int64 result, __int64 a2, __int16 a3);
// void __golang reflect_Value_panicNotBool(reflect_Value);
retval_107CD80 __golang reflect_Value_bytesSlow(__int64 a1, __int64 a2, __int16 a3, __int64 r3, __int64 a5, __int64 r5, __int64 r6, __int64 r7);
retval_107CF80 __golang reflect_methodReceiver(__int64 a1, __int64 a2, __int64 a3, __int64 *a4, __int64 a5, unsigned __int64 a6);
__int64 __golang reflect_callMethod(unsigned __int64 *a1, __int64 a2, _BYTE *a3, _QWORD *a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, unsigned __int64 *a10);
retval_107E2A0 __golang reflect_Value_Elem(abi_Type *a1, _QWORD *a2, char a3);
__int64 __golang reflect_Value_Field(__int64 a1, __int64 a2, char a3, unsigned __int64 a4);
// retval_107E580 __golang reflect_Value_Index(_QWORD, _QWORD, _QWORD); weak
signed __int64 __golang reflect_Value_lenNonSlice(reflect_Value);
// __int64 __golang reflect_copyVal(_QWORD, _QWORD); weak
// signed __int64 __golang reflect_Value_NumField(reflect_Value);
uintptr __golang reflect_Value_Pointer(reflect_Value);
string __golang reflect_Value_stringNonString(reflect_Value);
reflect_Type __golang reflect_Value_typeSlow(reflect_Value);
_ptr_abi_Type __golang reflect_Value_abiTypeSlow(reflect_Value);
retval_107F0A0 __golang reflect_Value_UnsafePointer(_QWORD *a1, _QWORD *a2, __int16 a3);
bool __golang reflect_Value_Comparable(reflect_Value);
// string __golang reflect__ptr_rtype_String(_ptr_reflect_rtype);
reflect_Kind __golang reflect__ptr_rtype_Kind(_ptr_reflect_rtype);
bool __golang reflect__ptr_rtype_Comparable(_ptr_reflect_rtype);
// __int64 __golang reflect_valueInterface(_QWORD, _QWORD, _QWORD, _QWORD); weak
retval_107FA40 __golang reflect_methodValueCall(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, double a17, double a18, double a19, double a20, double a21, double a22, double a23, double a24, char a25);
__int64 __golang type__eq_reflect_Method(__int64 a1, __int64 a2);
string __golang reflect__ptr_Kind_String(_ptr_reflect_Kind);
string __golang reflect__ptr_ChanDir_String(_ptr_reflect_ChanDir);
bool __golang reflect__ptr_Value_Comparable(_ptr_reflect_Value);
reflect_Kind __golang reflect__ptr_Value_Kind(_ptr_reflect_Value);
signed __int64 __golang reflect__ptr_Value_Len(_ptr_reflect_Value);
string __golang reflect__ptr_Value_String(_ptr_reflect_Value);
__int64 __golang reflect_moveMakeFuncArgPtrs_0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, __int64 a11);
__int64 __golang reflect_callMethod_0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, unsigned __int64 *a10, __int64 a11, _BYTE *a12, _QWORD *a13);
bool __golang type__eq_reflect_ValueError(__int64 a1, __int64 a2);
bool __golang type__eq_reflect_makeFuncCtxt(__int64 a1, __int64 a2);
__int64 __golang type__eq_reflect_methodValue(__int64 a1, __int64 a2);
retval_1080040 __golang internal_fmtsort_Sort(abi_Type *data, void *a2, reflect_flag a3);
__int64 __golang internal_fmtsort_compare(abi_Type *data, double *a2, reflect_flag a3, abi_Type *a4, double *a5, reflect_flag a6);
// retval_1081160 __golang internal_fmtsort_nilCompare(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
__int64 __golang internal_fmtsort_Sort_func1(abi_Type *a1, double *a2, reflect_flag a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, abi_Type *a10, double *a11, reflect_flag a12);
__int64 __golang slices_stableCmpFunc_go_shape_struct__Key_reflect_Value_Value_reflect_Value__(__int64 result, __int64 a2, unsigned __int64 a3, __int128 *a4, __int64 a5, _QWORD *a6);
unsigned __int64 __golang slices_symMergeCmpFunc_go_shape_struct__Key_reflect_Value_Value_reflect_Value__(unsigned __int64 result, __int64 a2, unsigned __int64 a3, _OWORD *a4, int64 a5, char *a6, char *a7, _QWORD *a8);
__int64 __golang slices_rotateCmpFunc_go_shape_struct__Key_reflect_Value_Value_reflect_Value__(__int64 a1, __int64 a2, unsigned __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, _OWORD *i, __int64 a9);
retval_1082C60 __golang internal_bisect_New(const char *a1, unsigned __int64 a2);
// __int64 __golang internal_bisect__ptr_Matcher_stack(_QWORD, _QWORD, _QWORD); weak
retval_1083A20 __golang internal_bisect_printStack(__int64 a1, __int64 a2, unsigned __int64 a3, uintptr *a4, size_t a5, size_t a6);
__int64 __golang internal_bisect_Hash(__int64 a1, __int64 r1);
string __golang internal_bisect__ptr_parseError_Error(_ptr_bisect_parseError);
bool __golang type__eq_internal_bisect_cond(__int64 a1, __int64 a2);
bool __golang type__eq_sync_atomic_Pointer_internal_bisect_dedup_(_QWORD *a1, _QWORD *a2);
void __golang internal_godebug__ptr_Setting_IncNonDefault(_ptr_godebug_Setting);
void __golang internal_godebug__ptr_Setting_register(_ptr_godebug_Setting);
string __golang internal_godebug__ptr_Setting_Value(_ptr_godebug_Setting);
// __int64 __golang internal_godebug__ptr_Setting_Value_func1(); weak
godebug_setting *__golang internal_godebug_lookup(const __m128i *a1, char *a2);
__int64 __golang internal_godebug_update(__int64 a1, unsigned __int64 a2, __int64 a3, unsigned __int64 a4);
// __int64 __golang internal_godebug_update_func1(); weak
// __int64 __golang internal_godebug_update_deferwrap1(int, int, int, int, int, int, int, int, int, char); weak
__int64 __golang internal_godebug_parse(__int64 result, __int64 a2, unsigned __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, int a8, int a9);
void __golang internal_godebug__ptr_Setting_IncNonDefault_fm(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, char a10);
__int64 __golang sync_atomic__ptr_Uint64_Load_fm(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, char a10);
void __golang internal_godebug__ptr_Setting_register_fm(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, char a10);
bool __golang type__eq_internal_godebug_setting(__int64 a1, __int64 a2);
bool __golang type__eq_sync_atomic_Pointer_internal_godebug_value_(_QWORD *a1, _QWORD *a2);
bool __golang type__eq_internal_godebug_value(__int64 a1, __int64 a2);
bool __golang type__eq_internal_godebug_Setting(__int64 a1, __int64 a2);
// retval_1085DA0 __golang syscall_Getenv(_QWORD, _QWORD); weak
retval_1086040 __golang syscall_SetNonblock(__int64 a1, char a2);
__int64 syscall_init_0(); // weak
__int64 __golang syscall_adjustFileLimit(_QWORD *a1);
// retval_10861E0 __golang syscall_ByteSliceFromString(_QWORD, _QWORD); weak
// retval_10862A0 __golang syscall_Getwd(); weak
// retval_10863C0 __golang syscall_SysctlUint32(_QWORD, _QWORD); weak
retval_1086480 __golang syscall_nametomib(__int64 a1, __int64 a2);
// string __golang syscall_Errno_Error(syscall_Errno);
bool __golang syscall_Errno_Is(syscall_Errno, error);
// __int64 __golang syscall_Close(_QWORD); weak
// retval_10868C0 __golang syscall_Dup(); weak
retval_1086980 __golang syscall_Getrlimit(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __fastcall syscall_Open(_QWORD, _QWORD, _QWORD, _QWORD); weak
// retval_1086B80 __golang syscall_read(_QWORD, _QWORD, _QWORD, _QWORD); weak
// retval_1086C80 __golang syscall_Seek(_QWORD, _QWORD, _QWORD); weak
retval_1086D60 __golang syscall_setrlimit(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// retval_1086E20 __golang syscall_write(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
retval_10871A0 __golang syscall_Fstat(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// retval_10875A0 __golang syscall_fcntl(_QWORD, _QWORD, _QWORD); weak
// __int64 __golang syscall_closedir(_QWORD); weak
retval_1087740 __golang syscall_readdir_r(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_10878C0 __golang syscall_sysctl(__int64 *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
int __cdecl syscall_libc_getrlimit_trampoline(int, rlimit *);
int __cdecl syscall_libc_readdir_r_trampoline(DIR *, dirent *, dirent **);
int __cdecl syscall_libc_setrlimit_trampoline(int, const rlimit *);
int __cdecl syscall_libc_sysctl_trampoline(int *, u_int, void *, size_t *, void *, size_t);
int __cdecl syscall_libc_fstat64_trampoline(int, stat64 *);
string __golang syscall__ptr_Errno_Error(_ptr_syscall_Errno);
bool __golang syscall__ptr_Errno_Is(_ptr_syscall_Errno, error);
retval_1087EC0 __golang time_appendInt(__int64 r0, __int64 r1, unsigned __int64 r2, unsigned __int64 a4, __int64 a5, double a6, __int64 a7, __int64 a8, int a9, int a10);
// retval_10882A0 __golang time_appendNano(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
string __golang time_Time_String(time_Time);
string __golang time_Time_GoString(time_Time);
retval_1088C60 __golang time_Time_Format(__int64 a1, __int64 a2, __int64 a3, const __m128i *a4, unsigned __int64 a5);
__int64 __golang time_Time_AppendFormat(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, unsigned __int64 a6, const __m128i *a7, unsigned __int64 a8);
retval_1088FA0 __golang time_Time_appendFormat(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, unsigned __int64 a6, __int64 a7, unsigned __int64 a8);
retval_108B440 __golang time_quote(__int64 a1, signed __int64 a2);
__int64 __golang time_Time_appendFormatRFC3339(int a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, unsigned __int64 a6, char a7);
retval_108BD60 __golang time_preadn(__int64 a1, __int64 a2, unsigned __int64 a3, __int64 a4, __int64 a5);
retval_108BEC0 __golang time_absDays_date(__int64 a1);
retval_108BF80 __golang time_absDays_yearYday(__int64 a1);
// __int64 __golang time_Time_absSec(_QWORD, _QWORD); weak
// retval_108C180 __golang time_Time_locabs(); weak
retval_108C6E0 __golang time_tzset(_BYTE *a1, __int64 a2, __int64 a3, __int64 a4, int a5, __int64 a6, __int64 a7, int a8, int a9);
retval_108CC80 __golang time_tzsetName(_BYTE *a1, __int64 a2, __int64 a3, int a4, int a5, __int64 a6, __int64 a7, int a8, int a9);
// retval_108CE60 __golang time_tzsetOffset(_QWORD, _QWORD); weak
// retval_108D3A0 __golang time_tzsetRule(_QWORD); weak
__int64 __golang time_tzruleTime(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7);
// retval_108E0E0 __golang time__ptr_dataIO_big8(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
retval_108E260 __golang time_LoadLocationFromTZData(__int64 a1, size_t a2, signed __int64 a3, signed __int64 a4, __int64 a5, __int64 a6, int a7, signed __int64 a8);
retval_108F740 __golang time_loadTzinfoFromZip(__int64 a1, __int64 a2, const __m128i *a3, __int64 a4, __int64 a5);
__int64 __golang time_loadTzinfoFromZip_deferwrap1(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, char a10);
// retval_1090320 __golang time_loadTzinfo(_QWORD, _QWORD, _QWORD, _QWORD); weak
retval_10903E0 __golang time_loadLocation(__int64 a1, size_t a2, _QWORD *a3, __int64 a4);
__int64 __golang time_readFile_deferwrap1(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, char a10);
const char *time_initLocal();
retval_1091000 __golang time_nextStdChunk(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, int a5, __int64 a6, __int64 a7, int a8, int a9);
string __golang time__ptr_Time_GoString(_ptr_time_Time);
string __golang time__ptr_Time_String(_ptr_time_Time);
string __golang time__ptr_fileSizeError_Error(_ptr_time_fileSizeError);
bool __golang type__eq_time_zone(__int64 a1, __int64 a2);
bool __golang type__eq_time_zoneTrans(__int64 a1, __int64 a2);
retval_1092260 __golang io_fs_FormatDirEntry(__int64 a1, __int64 a2);
// string __golang io_fs_FileMode_String(fs_FileMode);
bool __golang io_fs_FileMode_IsDir(fs_FileMode);
__int64 __golang io_fs_FileMode_Type(int a1);
string __golang io_fs__ptr_PathError_Error(_ptr_fs_PathError);
error __golang io_fs__ptr_PathError_Unwrap(_ptr_fs_PathError);
__int64 __golang type__eq_io_fs_PathError(__int64 a1, __int64 a2);
bool __golang io_fs__ptr_FileMode_IsDir(_ptr_fs_FileMode);
string __golang io_fs__ptr_FileMode_String(_ptr_fs_FileMode);
__int64 __golang io_fs__ptr_FileMode_Type(_DWORD *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, char a10);
// retval_10928C0 __golang internal_filepathlite_Base(_QWORD, _QWORD); weak
__int64 __golang internal_testlog_Getenv(__int64 result, __int64 a2);
__int64 __golang internal_testlog_Stat(__int64 result, __int64 a2);
// retval_1092A60 __golang internal_syscall_unix_Fcntl(_QWORD, _QWORD, _QWORD); weak
string __golang internal_poll__ptr_DeadlineExceededError_Error(_ptr_poll_DeadlineExceededError);
// __int64 __golang internal_poll__ptr_fdMutex_rwlock(_QWORD, _QWORD); weak
// error __golang internal_poll__ptr_FD_decref(_ptr_poll_FD);
// void __golang internal_poll__ptr_FD_writeUnlock(_ptr_poll_FD);
// retval_1092F80 __golang internal_poll__ptr_FD_OpenDir(); weak
// __int64 __golang internal_poll__ptr_pollDesc_prepare(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// __int64 __golang internal_poll__ptr_pollDesc_wait(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64, __int64); weak
// __int64 __golang internal_poll__ptr_FD_Init(_QWORD, _QWORD, _QWORD, _QWORD); weak
// error __golang internal_poll__ptr_FD_Close(_ptr_poll_FD);
retval_10D43A0 __golang internal_poll__ptr_FD_Write(_ptr_poll_FD, _slice_uint8);
void __golang internal_poll__ptr_FD_Write_deferwrap1(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, char a10);
retval_1093BE0 __golang internal_poll__ptr_FD_Fstat(volatile signed __int64 *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_1093D80 __golang internal_poll__ptr_FD_Fstat_deferwrap1(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, char a10);
// retval_1093DE0 __golang internal_poll_DupCloseOnExec(_QWORD); weak
retval_1093F00 __golang internal_poll__ptr_FD_Dup(volatile signed __int64 *a1);
retval_10940A0 __golang internal_poll__ptr_FD_Dup_deferwrap1(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, char a10);
retval_1094100 internal_poll_dupCloseOnExecOld();
// __int64 __golang internal_poll_dupCloseOnExecOld_deferwrap1(int, int, int, int, int, int, int, int, int, char); weak
string __golang internal_poll__ptr_errNetClosing_Error(_ptr_poll_errNetClosing);
bool __golang type__eq_internal_poll_FD(const __m128i *a1, const __m128i *a2);
// retval_1094640 __golang os__ptr_File_Readdirnames(_QWORD, _QWORD, _QWORD); weak
retval_10946E0 __golang os__ptr_File_readdir(__int64 a1, __int64 a2, __int64 a3);
// retval_10952A0 __golang os_Getenv(_QWORD, _QWORD); weak
string __golang os__ptr_SyscallError_Error(_ptr_os_SyscallError);
error __golang os__ptr_SyscallError_Unwrap(_ptr_os_SyscallError);
__int64 __golang os_underlyingErrorIs(__int64 a1, _QWORD *a2, RTYPE **a3, __int64 a4);
retval_10D43A0 __golang os__ptr_File_Write(_ptr_os_File, _slice_uint8);
retval_10957E0 __golang os__ptr_File_wrapErr(__int64 a1, char *a2, size_t a3, RTYPE **a4, __int64 a5);
os_File *__golang os_NewFile(signed __int64 a1, char *a2, size_t a3);
os_File *__golang os_newFile(signed __int64 a1, char *a2, size_t a3, __int64 a4, char a5);
retval_1095E20 __golang os_openDirNolog(char *a1, size_t a2, __int64 a3, __int64 a4, __int64 a5);
error __golang os__ptr_file_close(_ptr_os_file);
string __golang os__ptr_unixDirent_Name(_ptr_os_unixDirent);
bool __golang os__ptr_unixDirent_IsDir(_ptr_os_unixDirent);
fs_FileMode __golang os__ptr_unixDirent_Type(_ptr_os_unixDirent);
string __golang os__ptr_unixDirent_String(_ptr_os_unixDirent);
retval_10961A0 __golang os_newUnixDirent(char *a1, size_t a2, char *a3, size_t a4, fs_FileMode a5);
retval_1096340 os_Getwd();
__int64 __golang os_fillFileStatFromSys(__int64 a1, __int64 a2, __int64 a3);
retval_10D24E0 __golang os__ptr_File_Stat(_ptr_os_File);
// retval_10970C0 __golang os_statNolog(_QWORD, _QWORD); weak
// __int64 __golang os_lstatNolog(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
string __golang os__ptr_fileStat_Name(_ptr_os_fileStat);
fs_FileMode __golang os__ptr_fileStat_Mode(_ptr_os_fileStat);
bool __golang type__eq_os_fileStat(__int64 a1, __int64 a2);
bool __golang type__eq_os_file(__int64 a1, __int64 a2);
bool __golang type__eq_sync_atomic_Pointer_os_dirInfo_(_QWORD *a1, _QWORD *a2);
__int64 __golang type__eq_os_unixDirent(__int64 a1, __int64 a2);
__int64 __golang type__eq_os_LinkError(__int64 a1, __int64 a2);
__int64 __golang type__eq_os_SyscallError(__int64 a1, __int64 a2);
void __golang fmt__ptr_fmt_writePadding(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, int a7, int a8, int a9);
void __golang fmt__ptr_fmt_pad(__int64 a1, const __m128i *a2, signed __int64 a3, __int64 a4, __int64 a5, __int64 a6, int a7, int a8, int a9);
void __golang fmt__ptr_fmt_padString(__int64 **a1, const __m128i *a2, signed __int64 a3, __int64 a4, __int64 a5, __int64 a6, int a7, int a8, int a9);
void __golang fmt__ptr_fmt_fmtUnicode(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, int a7, __int64 a8, int a9);
// __int64 __golang fmt__ptr_fmt_fmtInteger(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
retval_1098900 __golang fmt__ptr_fmt_truncate(__int64 a1, __int64 a2, signed __int64 a3, unsigned __int64 a4, __int64 a5, __int64 a6, __int64 a7, int a8, int a9);
// __int64 __golang fmt__ptr_fmt_fmtS(_QWORD, _QWORD, _QWORD); weak
// __int64 __golang fmt__ptr_fmt_fmtBs(_QWORD); weak
void __golang fmt__ptr_fmt_fmtSbx(__int64 a1, __int64 a2, unsigned __int64 a3, __int64 a4, unsigned __int64 a5, __int64 a6, __int64 a7, unsigned __int64 a8, int a9);
// __int64 __golang fmt__ptr_fmt_fmtQ(_QWORD, _QWORD, _QWORD); weak
void __golang fmt__ptr_fmt_fmtC(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, int a7, int a8, int a9);
void __golang fmt__ptr_fmt_fmtFloat(__int64 a1, __int64 a2, int a3, __int64 a4, double a5);
// __int64 __golang fmt_Fprintln(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
// retval_1099FA0 __golang fmt_getField(_QWORD, _QWORD, _QWORD); weak
// __int64 fmt__ptr_pp_unknownType(void); weak
// __int64 __golang fmt__ptr_pp_badVerb(_QWORD, _QWORD); weak
// __int64 __golang fmt__ptr_pp_fmtBool(_QWORD, _QWORD, _QWORD); weak
__int64 __golang fmt__ptr_pp_fmt0x64(__int64 a1, __int64 a2, char a3);
// __int64 __fastcall fmt__ptr_pp_fmtInteger(_QWORD, _QWORD, _QWORD, _QWORD); weak
// __int64 __golang fmt__ptr_pp_fmtFloat(double); weak
// __int64 __golang fmt__ptr_pp_fmtComplex(double, double); weak
// __int64 __fastcall fmt__ptr_pp_fmtString(_QWORD, _QWORD, _QWORD, _QWORD); weak
void __golang fmt__ptr_pp_fmtBytes(_QWORD *a1, __int64 a2, signed __int64 a3, __int64 a4, __int64 a5, const __m128i *a6, unsigned __int64 a7, __int64 a8, int a9);
// __int64 __golang fmt__ptr_pp_fmtPointer(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
void __golang fmt__ptr_pp_catchPanic(__int64 *a1, __int64 a2, _QWORD *a3, unsigned int a4, const __m128i *a5, unsigned __int64 a6);
// __int64 __golang fmt__ptr_pp_handleMethods(_QWORD, _QWORD); weak
void __golang fmt__ptr_pp_printArg(_QWORD *a1, reflect_rtype *a2, unsigned __int8 *a3, __int64 a4, __int64 a5, __int64 a6, int a7, int a8, _QWORD *a9);
void __golang fmt__ptr_pp_printValue(_QWORD *a1, abi_Type *data, _QWORD *a3, reflect_flag a4, __int64 a5, __int64 a6);
bool __golang type__eq_fmt_fmt(__int64 a1, __int64 a2);
void __fastcall main_main();
__int64 go_textfipsstart(); // weak
void go_textfipsend();
void __cdecl __noreturn _exit(int);
// int open(const char *, int, ...);
// ssize_t __cdecl write(int __fd, const void *__buf, size_t __nbyte);
// int *__error(void);
// int __cdecl madvise(void *, size_t, int);
// uint64_t mach_absolute_time(void);
// kern_return_t __cdecl mach_timebase_info(mach_timebase_info_t info);
// int __cdecl clock_gettime(clockid_t __clock_id, timespec *__tp);
// int __cdecl sigaction(int, const sigaction *, sigaction *);
// int __cdecl pthread_sigmask(int, const sigset_t *, sigset_t *);
// int __cdecl sigaltstack(const stack_t *, stack_t *);
// pid_t getpid(void);
// int __cdecl kill(pid_t, int);
// void *__cdecl mmap(void *, size_t, int, int, int, off_t);
// int __cdecl munmap(void *, size_t);
// int __cdecl usleep(useconds_t);
// int __cdecl sysctl(int *, u_int, void *, size_t *, void *, size_t);
// int kqueue(void);
// int __cdecl kevent(int kq, const kevent *changelist, int nchanges, kevent *eventlist, int nevents, const timespec *timeout);
// int fcntl(int, int, ...);
// int __cdecl pthread_attr_init(pthread_attr_t *);
// int __cdecl pthread_attr_getstacksize(const pthread_attr_t *, size_t *);
// int __cdecl pthread_attr_setdetachstate(pthread_attr_t *, int);
// int __cdecl pthread_create(pthread_t *, const pthread_attr_t *, void *(__cdecl *)(void *), void *);
// int __cdecl raise(int);
// int __cdecl pthread_mutex_init(pthread_mutex_t *, const pthread_mutexattr_t *);
// int __cdecl pthread_mutex_lock(pthread_mutex_t *);
// int __cdecl pthread_mutex_unlock(pthread_mutex_t *);
// int __cdecl pthread_cond_init(pthread_cond_t *, const pthread_condattr_t *);
// int __cdecl pthread_cond_wait(pthread_cond_t *, pthread_mutex_t *);
// int __cdecl pthread_cond_timedwait_relative_np(pthread_cond_t *, pthread_mutex_t *, const timespec *);
// int __cdecl pthread_cond_signal(pthread_cond_t *);
// pthread_t pthread_self(void);
// int __cdecl pthread_kill(pthread_t, int);
// bool __cdecl notify_is_valid_token(int val);
// xpc_object_t xpc_date_create_from_current(void);
// void __cdecl arc4random_buf(void *__buf, size_t __nbytes);
// int issetugid(void);

//-------------------------------------------------------------------------
// Data declarations

int dword_1000000 = -17958193; // weak
_UNKNOWN loc_106B506; // weak
_UNKNOWN loc_106D3C1; // weak
char a0123456789abcd[16] = "0123456789abcdef"; // weak
char a0123456789abcd_1[17] = "0123456789ABCDEFX"; // weak
char a0123456789abcd_3[36] = "0123456789abcdefghijklmnopqrstuvwxyz"; // weak
char a00010203040506[201] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899"; // weak
__int64 qword_10C5090 = 2LL; // weak
__int64 qword_10C5098 = 9LL; // weak
__int64 qword_10C50F0 = 4LL; // weak
__int64 qword_10C52A0[4] = { 58LL, 136LL, 341LL, 16LL }; // weak

==================================================

// function name: internal_runtime_maps__ptr_Iter_Next

//----- (0000000001005020) ----------------------------------------------------
// internal/runtime/maps.(*Iter).Next
void __golang internal_runtime_maps__ptr_Iter_Next(__int64 *a1)
{
  __int64 v1; // rdx
  __int64 v2; // rsi
  char v3; // di
  char v4; // cl
  unsigned __int8 v5; // cl
  __int64 v6; // rdi
  __int64 v7; // rcx
  _QWORD *v8; // r11
  __int64 v9; // rdx
  __int64 v10; // rsi
  __int64 v11; // rdi
  __int64 v12; // r8
  __int64 v13; // rdi
  __int64 v14; // rdx
  __int64 v15; // rsi
  __int64 *v16; // r11
  __int64 v17; // rdx
  unsigned __int64 v18; // rcx
  unsigned __int64 v19; // rsi
  unsigned __int64 v20; // rdi
  __int64 v21; // rsi
  unsigned __int64 v22; // r8
  unsigned __int64 *v23; // r11
  __int64 v24; // rdx
  __int64 v25; // rdi
  __int64 v26; // r8
  int v27; // r9d
  __int64 r0; // r10
  unsigned __int64 v29; // rdx
  __int64 v30; // rdx
  _QWORD *v31; // r11
  __int64 v32; // rcx
  __int64 *v33; // r11
  __int64 v34; // rcx
  _QWORD *v35; // r11
  unsigned __int64 v36; // rsi
  unsigned __int64 v37; // rdi
  __int64 v38; // rsi
  unsigned __int64 v39; // r9
  unsigned __int64 *v40; // r11
  unsigned __int64 v41; // rbx
  __int64 v42; // rcx
  __int64 v43; // rdi
  __int64 v44; // r8
  unsigned __int64 v45; // rdi
  __int64 v46; // rsi
  __int64 v47; // rdi
  __int64 v48; // r9
  int v49; // r10d
  __int64 v50; // r11
  unsigned __int64 v51; // rsi
  __int64 v52; // rcx
  unsigned __int64 v53; // rdx
  unsigned __int64 v54; // rcx
  __int64 v55; // rcx
  __int64 *v56; // r11
  unsigned __int64 v57; // rdx
  __int64 v58; // rdx
  __int64 v59; // rsi
  __int64 v60; // rbx
  __int64 v61; // rdi
  int v62; // r8d
  __int64 v63; // r9
  __int64 v64; // r10
  __int64 *v65; // rsi
  char v66; // al
  __int64 v67; // rax
  _QWORD *v68; // rcx
  __int64 v69; // rcx
  __int64 v70; // rdx
  __int64 *v71; // r11
  __int64 v72; // rcx
  _QWORD *v73; // r11
  __int64 r1; // rbx
  __int64 v75; // rbx
  __int64 v76; // rax
  __int64 v77; // [rsp+0h] [rbp-30h]
  __int64 v78; // [rsp+8h] [rbp-28h]
  unsigned __int64 v79; // [rsp+10h] [rbp-20h]
  unsigned __int64 v80; // [rsp+18h] [rbp-18h]
  __int64 v81; // [rsp+20h] [rbp-10h]
  __int64 *v82; // [rsp+38h] [rbp+8h]
  retval_1004F20 v83; // 0:kr00_24.24
  retval_1004F20 v84; // 0:kr28_24.24
  retval_1003800 v85; // 0:kr40_24.24

  v1 = a1[3];
  if ( !v1 )
  {
    if ( runtime_writeBarrier )
    {
      runtime_gcWriteBarrier2();
      *v8 = v7;
      v8[1] = a1[1];
    }
    *(_OWORD *)a1 = 0;
    return;
  }
  if ( *(_BYTE *)(v1 + 34) )
  {
    internal_runtime_maps_fatal((__int64 (*)(void))"concurrent map iteration and map write", (__int64 (*)(void))0x26);
    return;
  }
  v82 = a1;
  v2 = a1[8];
  if ( v2 >= 0 )
  {
    v3 = *((_BYTE *)a1 + 56);
    v4 = *(_BYTE *)(v1 + 32);
    if ( v4 != v3 )
    {
      v5 = v4 - v3;
      v6 = -(__int64)(v5 < 0x40u);
      a1[8] = v6 & (v2 << v5);
      a1[5] = v6 & (a1[5] << v5);
      *((_BYTE *)a1 + 56) = *(_BYTE *)(a1[3] + 32);
    }
    while ( 1 )
    {
      v9 = a1[8];
      v10 = a1[3];
      v11 = *(_QWORD *)(v10 + 24);
      if ( v11 <= v9 )
      {
        if ( runtime_writeBarrier )
        {
          runtime_gcWriteBarrier2();
          *v35 = v34;
          v35[1] = a1[1];
        }
        *(_OWORD *)a1 = 0;
        return;
      }
      if ( !a1[9] )
      {
        v12 = a1[5];
        v13 = (v12 + v9) & (v11 - 1);
        v14 = *(_QWORD *)(*(_QWORD *)(v10 + 16) + 8 * v13);
        v15 = *(_QWORD *)(v14 + 8);
        if ( v15 != v13 )
          a1[5] = v12 - (v13 - v15);
        if ( runtime_writeBarrier )
        {
          runtime_gcWriteBarrier2();
          *v16 = v14;
          v16[1] = a1[9];
        }
        a1[9] = v14;
      }
      v17 = a1[9];
      v18 = *(unsigned __int16 *)(v17 + 2) - 1LL;
      v19 = a1[11];
      if ( v19 <= v18 )
        break;
LABEL_31:
      a1[8] += -(__int64)((unsigned __int8)(*(_BYTE *)(a1[3] + 32) - *(_BYTE *)(a1[9] + 6)) < 0x40u)
             & (1LL << (*(_BYTE *)(a1[3] + 32) - *(_BYTE *)(a1[9] + 6)));
      if ( runtime_writeBarrier )
      {
        runtime_gcWriteBarrier2();
        *v31 = v30;
        v31[1] = a1[10];
      }
      *(_OWORD *)(a1 + 9) = 0;
      a1[11] = 0;
    }
    v20 = v18 & (a1[4] + v19);
    v21 = v20 & 7;
    if ( (v20 & 7) == 0 || !a1[10] )
    {
      v22 = *(_QWORD *)(v17 + 16) + (v20 >> 3) * *(_QWORD *)(a1[2] + 80);
      if ( runtime_writeBarrier )
      {
        runtime_gcWriteBarrier2();
        *v23 = v22;
        v23[1] = a1[10];
      }
      a1[10] = v22;
    }
    v80 = v18;
    v24 = a1[10];
    if ( *(char *)(v21 + v24) >= 0 )
    {
      v25 = a1[2];
      v26 = v21 * *(_QWORD *)(v25 + 88);
      v27 = *(_DWORD *)(v25 + 104);
      r0 = v26 + v24 + 8;
      if ( (v27 & 4) != 0 )
        r0 = *(_QWORD *)(v26 + v24 + 8);
      if ( *(_QWORD *)(a1[9] + 8) == -1 )
      {
        v83 = internal_runtime_maps__ptr_Iter_grownKeyElem(a1, r0, v21);
        r1 = v83._r1;
        if ( !LOBYTE(v83._r2) )
        {
          a1 = v82;
          v18 = v80;
          goto LABEL_30;
        }
        r0 = v83._r0;
        a1 = v82;
      }
      else
      {
        v32 = v26 + *(_QWORD *)(v25 + 96);
        r1 = v24 + v32 + 8;
        if ( (v27 & 8) != 0 )
          r1 = *(_QWORD *)(v32 + v24 + 8);
      }
      ++a1[11];
      if ( runtime_writeBarrier )
      {
        runtime_gcWriteBarrier4();
        *v33 = r0;
        v33[1] = *a1;
        v33[2] = r1;
        v33[3] = a1[1];
      }
      *a1 = r0;
      a1[1] = r1;
      return;
    }
LABEL_30:
    ++a1[11];
    v29 = 0;
    while ( 1 )
    {
      v36 = a1[11];
      if ( v36 > v18 )
        goto LABEL_31;
      v37 = v18 & (a1[4] + v36);
      v38 = v37 & 7;
      if ( (v37 & 7) == 0 || !a1[10] )
      {
        v39 = *(_QWORD *)(a1[9] + 16) + (v37 >> 3) * *(_QWORD *)(a1[2] + 80);
        if ( runtime_writeBarrier )
        {
          runtime_gcWriteBarrier2();
          *v40 = v39;
          v40[1] = a1[10];
        }
        a1[10] = v39;
      }
      if ( v29 )
        break;
      v29 = (unsigned __int8)~_mm_movemask_epi8((__m128i)*(unsigned __int64 *)a1[10]);
      if ( v38 )
      {
        v41 = v18;
        v42 = v38;
        v29 &= -(__int64)(unsigned int)(1 << v38);
      }
      else
      {
        v42 = 0;
        v41 = v80;
      }
      if ( !v29 )
      {
        a1[11] = a1[11] - v42 + 8;
        goto LABEL_42;
      }
      _BitScanForward64((unsigned __int64 *)&v43, v29);
      v44 = v43;
      v45 = a1[11] + v43 - v42;
      a1[11] = v45;
      if ( v45 <= v41 )
        goto LABEL_58;
LABEL_42:
      v18 = v41;
    }
    v44 = v38;
LABEL_58:
    v46 = a1[2];
    v47 = v44 * *(_QWORD *)(v46 + 88);
    v48 = a1[10];
    v49 = *(_DWORD *)(v46 + 104);
    v50 = v48 + v47 + 8;
    if ( (v49 & 4) != 0 )
      v50 = *(_QWORD *)(v47 + v48 + 8);
    if ( *(_QWORD *)(a1[9] + 8) != -1 )
    {
      v52 = v47 + *(_QWORD *)(v46 + 96);
      v75 = v48 + v52 + 8;
      if ( (v49 & 8) != 0 )
        v75 = *(_QWORD *)(v52 + v48 + 8);
      goto LABEL_69;
    }
    v77 = v44;
    v79 = v29;
    v84 = internal_runtime_maps__ptr_Iter_grownKeyElem(a1, v50, v44);
    v75 = v84._r1;
    if ( LOBYTE(v84._r2) )
    {
      v29 = v79;
      v44 = v77;
      v50 = v84._r0;
      a1 = v82;
LABEL_69:
      v53 = (v29 - 1) & v29;
      if ( v53 )
      {
        _BitScanForward64(&v54, v53);
        a1[11] += v54 - v44;
      }
      else
      {
        a1[11] = a1[11] - v44 + 8;
      }
      if ( runtime_writeBarrier )
      {
        runtime_gcWriteBarrier4();
        *v56 = v55;
        v56[1] = *a1;
        v56[2] = v75;
        v56[3] = a1[1];
        v50 = v55;
      }
      *a1 = v50;
      a1[1] = v75;
      return;
    }
    v29 = (v79 - 1) & v79;
    if ( v29 )
    {
      _BitScanForward64(&v51, v29);
      a1 = v82;
      v82[11] += v51 - v77;
    }
    else
    {
      a1 = v82;
      v82[11] = v82[11] - v77 + 8;
    }
    v41 = v80;
    goto LABEL_42;
  }
  while ( 1 )
  {
    v57 = a1[11];
    if ( v57 >= 8 )
      break;
    v58 = ((unsigned __int8)a1[4] + (_BYTE)v57) & 7;
    v59 = a1[10];
    if ( *(char *)(v58 + v59) >= 0 )
    {
      v60 = a1[2];
      v61 = v58 * *(_QWORD *)(v60 + 88);
      v62 = *(_DWORD *)(v60 + 104);
      v63 = v59 + v61 + 8;
      if ( (v62 & 4) != 0 )
        v63 = *(_QWORD *)(v59 + v61 + 8);
      v64 = a1[3];
      if ( *(__int64 *)(v64 + 24) <= 0 )
      {
        v69 = v61 + *(_QWORD *)(v60 + 96);
        v70 = v59 + v69 + 8;
        if ( (v62 & 8) != 0 )
          v70 = *(_QWORD *)(v69 + v59 + 8);
        v65 = a1;
        v76 = v63;
        v68 = (_QWORD *)v70;
        goto LABEL_94;
      }
      v78 = v58;
      v81 = v63;
      v85 = internal_runtime_maps__ptr_Map_getWithKey(v64, v60, v63);
      v76 = v85._r0;
      if ( LOBYTE(v85._r2) )
      {
        v65 = v82;
        v68 = (_QWORD *)v85._r1;
LABEL_94:
        ++v65[11];
        if ( runtime_writeBarrier )
        {
          runtime_gcWriteBarrier4();
          *v71 = v76;
          v71[1] = *v65;
          v71[2] = (__int64)v68;
          v71[3] = v65[1];
        }
        *v65 = v76;
        v65[1] = (__int64)v68;
        return;
      }
      v65 = v82;
      if ( *(_QWORD *)(v82[3] + 40) == v82[6] )
      {
        v66 = (**(__int64 (__golang ***)(__int64, __int64))(*(_QWORD *)(v82[2] + 48) + 24LL))(v81, v81) ^ 1;
        v65 = v82;
      }
      else
      {
        v66 = 0;
      }
      if ( v66 )
      {
        v67 = v65[2];
        v68 = (_QWORD *)(v65[10] + *(_QWORD *)(v67 + 96) + v78 * *(_QWORD *)(v67 + 88) + 8);
        if ( (*(_DWORD *)(v67 + 104) & 8) != 0 )
          v68 = (_QWORD *)*v68;
        v76 = v81;
        goto LABEL_94;
      }
      a1 = v65;
    }
    ++a1[11];
  }
  if ( runtime_writeBarrier )
  {
    runtime_gcWriteBarrier2();
    *v73 = v72;
    v73[1] = a1[1];
  }
  *(_OWORD *)a1 = 0;
}

==================================================

// function name: runtime_gcWriteBarrier4

//----- (000000000106D460) ----------------------------------------------------
// runtime.gcWriteBarrier4
void runtime_gcWriteBarrier4()
{
  gcWriteBarrier();
}

==================================================

// function name: runtime_pthread_cond_timedwait_relative_np_trampoline

//----- (000000000106F180) ----------------------------------------------------
// runtime.pthread_cond_timedwait_relative_np_trampoline
int __golang runtime_pthread_cond_timedwait_relative_np_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
{
  return pthread_cond_timedwait_relative_np(
           *(pthread_cond_t **)a4,
           *(pthread_mutex_t **)(a4 + 8),
           *(const timespec **)(a4 + 16));
}

==================================================

// function name: runtime_sysctl_trampoline

//----- (000000000106EEE0) ----------------------------------------------------
// runtime.sysctl_trampoline
int __golang runtime_sysctl_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
{
  return sysctl(
           *(int **)a4,
           *(_DWORD *)(a4 + 8),
           *(void **)(a4 + 16),
           *(size_t **)(a4 + 24),
           *(void **)(a4 + 32),
           *(_QWORD *)(a4 + 40));
}

==================================================

// function name: runtime_open_trampoline

//----- (000000000106EAC0) ----------------------------------------------------
// runtime.open_trampoline
int __golang runtime_open_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
{
  return open(*(const char **)a4, *(_DWORD *)(a4 + 8), *(unsigned int *)(a4 + 12));
}

==================================================

// function name: runtime_strhash

// 1195F0B: using guessed type char runtime_useAeshash;

//----- (000000000106D2E0) ----------------------------------------------------
// runtime.strhash
unsigned __int64 __golang runtime_strhash(__int64 a1, unsigned __int64 a2)
{
  if ( runtime_useAeshash )
    return aeshashbody(*(const __m128i **)a1, a2, *(_QWORD *)(a1 + 8));
  else
    return runtime_strhashFallback();
}

==================================================

// function name: runtime_gcWriteBarrier5

//----- (000000000106D480) ----------------------------------------------------
// runtime.gcWriteBarrier5
void runtime_gcWriteBarrier5()
{
  gcWriteBarrier();
}

==================================================

// function name: runtime_syscall6

// 106F327: variable 'v5' is possibly undefined

//----- (000000000106F360) ----------------------------------------------------
// runtime.syscall6
__int64 __golang runtime_syscall6(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
{
  __int64 v4; // rax
  __int64 v5; // rdx

  v4 = (*(__int64 (__golang **)(_QWORD, __int64, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))a4)(
         0,
         a2,
         *(_QWORD *)(a4 + 32),
         *(_QWORD *)(a4 + 8),
         *(_QWORD *)(a4 + 16),
         *(_QWORD *)(a4 + 40),
         *(_QWORD *)(a4 + 48));
  *(_QWORD *)(a4 + 56) = v4;
  *(_QWORD *)(a4 + 64) = v5;
  if ( (_DWORD)v4 == -1 )
    *(_QWORD *)(a4 + 72) = *__error();
  return 0;
}

==================================================

// function name: runtime_arc4random_buf_trampoline

//----- (000000000106F220) ----------------------------------------------------
// runtime.arc4random_buf_trampoline
void __golang runtime_arc4random_buf_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
{
  arc4random_buf(*(void **)a4, *(unsigned int *)(a4 + 8));
}

==================================================

// function name: errors_Is

//----- (0000000001070E60) ----------------------------------------------------
// errors.Is
__int64 __golang errors_Is(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
{
  __int64 v4; // rdx
  RTYPE **v5; // rsi
  double v6; // xmm0_8
  unsigned int v7; // eax

  if ( a1 && a3 )
  {
    v4 = *(_QWORD *)(a3 + 8);
    if ( v4 )
    {
      v5 = go_itab_internal_reflectlite_rtype_comma_internal_reflectlite_Type;
    }
    else
    {
      v5 = 0;
      v4 = 0;
    }
    v6 = ((double (__golang *)(__int64))v5[4])(v4);
    return errors_is(a1, a2, a3, a4, v7, v6);
  }
  else if ( a3 == a1 )
  {
    return runtime_ifaceeq(a1, a2, a4);
  }
  else
  {
    return 0;
  }
}

==================================================

// function name: sync_atomic_StoreUintptr

return a2 == _InterlockedCompareExchange64(a1, a3, a2);

//----- (0000000001070880) ----------------------------------------------------
// sync/atomic.StoreUintptr
retval_1070880 __golang sync_atomic_StoreUintptr(volatile __int64 *a1, __int64 a2)
{
  retval_1070880 result; // 0:rax.8,8:rbx.8

  result._r1 = _InterlockedExchange64(a1, a2);
  result._r0 = a1;
  return result;
}

==================================================

// function name: runtime_sigaction_trampoline

//----- (000000000106EBC0) ----------------------------------------------------
// runtime.sigaction_trampoline
int __golang runtime_sigaction_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
{
  int result; // eax

  result = sigaction(*(_DWORD *)a4, *(const sigaction **)(a4 + 8), *(sigaction **)(a4 + 16));
  if ( result )
    MEMORY[0xF1] = 241;
  return result;
}

==================================================

// function name: runtime_panicSliceAcap

// 106D826: variable 'v9' is possibly undefined

//----- (000000000106D840) ----------------------------------------------------
// runtime.panicSliceAcap
void __golang __noreturn runtime_panicSliceAcap(
        __int64 a1,
        __int64 a2,
        int64 a3,
        int a4,
        int a5,
        int a6,
        int a7,
        int a8,
        int a9)
{
  signed __int64 v9; // rdx

  runtime_goPanicSliceAcap(a3, v9, a3, a4, a5, a6, a7, a8, a9);
}

==================================================

// function name: runtime_newstack_0

// 104B7C0: using guessed type __int64 __golang runtime_sigprofNonGo(_QWORD, _QWORD, _QWORD);

//----- (000000000106FB20) ----------------------------------------------------
// runtime.newstack
__int64 __golang runtime_newstack_0(
        __int64 a1,
        __int64 a2,
        __int64 a3,
        __int64 a4,
        __int64 a5,
        unsigned int *a6,
        unsigned int *a7,
        unsigned __int64 a8,
        __int64 a9)
{
  return runtime_newstack(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

==================================================

// function name: runtime_pthread_create_trampoline

//----- (000000000106F080) ----------------------------------------------------
// runtime.pthread_create_trampoline
int __golang runtime_pthread_create_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
{
  pthread_t v5; // [rsp+0h] [rbp-10h] BYREF

  return pthread_create(&v5, *(const pthread_attr_t **)a4, *(void *(__cdecl **)(void *))(a4 + 8), *(void **)(a4 + 16));
}

==================================================

// function name: internal_sync__ptr_HashTrieMap_go_shape_interface__comma_go_shape_interface___iter

// 1077760: using guessed type retval_1077760 __golang sync__ptr_poolDequeue_popHead(_QWORD);

//----- (0000000001077F00) ----------------------------------------------------
// internal/sync.(*HashTrieMap[go.shape.interface {},go.shape.interface {}]).iter
__int64 __golang internal_sync__ptr_HashTrieMap_go_shape_interface__comma_go_shape_interface___iter(
        __int64 a1,
        __int64 a2,
        __int64 a3,
        unsigned __int8 (__golang **a4)(_QWORD, _QWORD, _QWORD, _QWORD))
{
  __int64 i; // rdx
  __int64 v5; // rsi
  __int64 v7; // [rsp+0h] [rbp-18h]
  __int64 v8; // [rsp+8h] [rbp-10h]
  __int64 v9; // [rsp+20h] [rbp+8h]
  __int64 v10; // [rsp+28h] [rbp+10h]
  __int64 v11; // [rsp+30h] [rbp+18h]
  unsigned __int8 (__golang **v12)(_QWORD, _QWORD, _QWORD, _QWORD); // [rsp+38h] [rbp+20h]

  v9 = a1;
  v10 = a2;
  v11 = a3;
  v12 = a4;
  for ( i = 0; i < 16; ++i )
  {
    v5 = *(_QWORD *)(a3 + 8 * i + 24);
    if ( v5 )
    {
      v7 = i;
      if ( *(_BYTE *)v5 )
      {
        while ( v5 )
        {
          v8 = v5;
          if ( !(*a4)(*(_QWORD *)(v5 + 16), *(_QWORD *)(v5 + 24), *(_QWORD *)(v5 + 32), *(_QWORD *)(v5 + 40)) )
            return 0;
          v5 = *(_QWORD *)(v8 + 8);
          a1 = v9;
          a3 = v11;
          i = v7;
          a2 = v10;
          a4 = v12;
        }
      }
      else
      {
        if ( !(unsigned __int8)internal_sync__ptr_HashTrieMap_go_shape_interface__comma_go_shape_interface___iter(
                                 a1,
                                 *(_QWORD *)(a2 + 384),
                                 v5) )
          return 0;
        a1 = v9;
        a3 = v11;
        i = v7;
        a2 = v10;
        a4 = v12;
      }
    }
  }
  return 1;
}

==================================================

// function name: runtime_fcntl_trampoline

//----- (000000000106EF80) ----------------------------------------------------
// runtime.fcntl_trampoline
int __golang runtime_fcntl_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
{
  __int64 v4; // rax
  __int64 v5; // rbx
  int v6; // edx

  LODWORD(v4) = fcntl(*(_DWORD *)a4, *(_DWORD *)(a4 + 4), *(unsigned int *)(a4 + 8));
  v6 = 0;
  if ( v4 == -1 )
  {
    v6 = *__error();
    LODWORD(v4) = -1;
  }
  *(_DWORD *)(v5 + 12) = v4;
  *(_DWORD *)(v5 + 16) = v6;
  return v4;
}

==================================================

// function name: runtime_write_trampoline

return open(*(const char **)a4, *(_DWORD *)(a4 + 8), *(unsigned int *)(a4 + 12));

//----- (000000000106EAE0) ----------------------------------------------------
// runtime.write_trampoline
ssize_t __golang runtime_write_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
{
  ssize_t result; // rax

  result = write(*(_QWORD *)a4, *(const void **)(a4 + 8), *(unsigned int *)(a4 + 16));
  if ( (int)result < 0 )
    return (unsigned int)-*__error();
  return result;
}

==================================================

// function name: runtime_panicSliceB

// 106D866: variable 'v9' is possibly undefined

//----- (000000000106D880) ----------------------------------------------------
// runtime.panicSliceB
void __golang __noreturn runtime_panicSliceB(
        int64 a1,
        __int64 a2,
        signed __int64 a3,
        int a4,
        int a5,
        int a6,
        int a7,
        int a8,
        int a9)
{
  runtime_goPanicSliceB(a1, a3, a3, a4, a5, a6, a7, a8, a9);
}

==================================================

// function name: internal_testlog_Stat

// 1175F08: using guessed type __int64 internal_testlog_logger;

//----- (00000000010929E0) ----------------------------------------------------
// internal/testlog.Stat
__int64 __golang internal_testlog_Stat(__int64 result, __int64 a2)
{
  __int64 v2; // rsi
  __int64 v3; // rdx

  if ( internal_testlog_logger )
  {
    v2 = *(_QWORD *)internal_testlog_logger;
    v3 = *(_QWORD *)(internal_testlog_logger + 8);
  }
  else
  {
    v2 = 0;
    v3 = 0;
  }
  if ( v2 )
    return (*(__int64 (__golang **)(__int64, __int64, __int64))(v2 + 48))(v3, result, a2);
  return result;
}

==================================================

// function name: runtime_pthread_mutex_unlock_trampoline

//----- (000000000106F120) ----------------------------------------------------
// runtime.pthread_mutex_unlock_trampoline
int __golang runtime_pthread_mutex_unlock_trampoline(__int64 a1, __int64 a2, __int64 a3, pthread_mutex_t **a4)
{
  return pthread_mutex_unlock(*a4);
}

==================================================

// function name: internal_godebug__ptr_Setting_register

_InterlockedExchangeAdd64((volatile signed __int64 *)&a1->setting->nonDefault, 1u);

//----- (0000000001084C40) ----------------------------------------------------
// internal/godebug.(*Setting).register
void __golang internal_godebug__ptr_Setting_register(_ptr_godebug_Setting a1)
{
  _ptr_godebugs_Info info; // rdx
  size_t len; // rcx
  char *ptr; // rdx
  __int64 (__golang **v4)(__int64, __int64, __int64, __int64, __int64, __int64, __int64, __int64, __int64, char); // rax
  atomic_Uint64 *p_nonDefault; // rcx
  atomic_Uint64 **v6; // r11
  unsigned __int128 v7; // kr40_16
  __int64 r0; // rax
  __int64 v9; // rax
  size_t v10; // [rsp+30h] [rbp-20h]
  char *v11; // [rsp+38h] [rbp-18h]
  __int64 v12; // [rsp+40h] [rbp-10h]

  info = a1->setting->info;
  if ( !info || info->Opaque )
  {
    r0 = runtime_concatstring2(0, "godebug: unexpected IncNonDefault of ", 37, a1->name.ptr, a1->name.len)._r0;
    v9 = runtime_convTstring(r0);
    runtime_gopanic(&RTYPE_string, v9);
  }
  len = a1->name.len;
  ptr = a1->name.ptr;
  if ( len && *ptr == 35 )
    ptr += (-(__int64)--len >> 63) & 1;
  v11 = ptr;
  v10 = len;
  v4 = (__int64 (__golang **)(__int64, __int64, __int64, __int64, __int64, __int64, __int64, __int64, __int64, char))runtime_newobject((const RTYPE *)qword_10D9860);
  *v4 = sync_atomic__ptr_Uint64_Load_fm;
  p_nonDefault = &a1->setting->nonDefault;
  if ( runtime_writeBarrier )
  {
    runtime_gcWriteBarrier1();
    *v6 = p_nonDefault;
  }
  v12 = (__int64)v4;
  v4[1] = (__int64 (__golang *)(__int64, __int64, __int64, __int64, __int64, __int64, __int64, __int64, __int64, char))p_nonDefault;
  v7 = (unsigned __int128)runtime_concatstring3(0, "/godebug/non-default-behavior/", 30, v11, v10, ":events", 7);
  internal_godebug_registerMetric((const __m128i *)v7, *((unsigned __int64 *)&v7 + 1), v12);
}

==================================================

// function name: internal_godebug_registerMetric

// 1065B4F: variable 'v9' is possibly undefined

//----- (0000000001065D00) ----------------------------------------------------
// internal/godebug.registerMetric
__int64 __golang internal_godebug_registerMetric(const __m128i *a1, unsigned __int64 a2, __int64 a3)
{
  retval_1007020 v3; // kr00_16
  _QWORD *v4; // rax
  __int64 v5; // rdx
  _QWORD *v6; // r11
  _QWORD *v7; // rax
  int v8; // edi
  __int64 v9; // rsi
  int v10; // r8d
  int v11; // r9d
  int v12; // r10d
  _QWORD *v13; // r11
  _QWORD *v14; // rdx
  retval_1050860 v16; // kr10_16
  __int64 v17; // rcx
  __int64 v18; // rdi
  __int64 v19; // rsi
  __int64 v20; // r8
  __int64 v21; // r9
  __int64 v22; // r10
  __int64 v23; // r11
  __int64 v24; // [rsp+20h] [rbp-18h]
  _QWORD *v25; // [rsp+28h] [rbp-10h]
  retval_1049920 v29; // 0:kr40_72.72

  v29 = runtime_semacquire1(&runtime_metricsSema, 1, 0, 0, 18);
  runtime_initMetrics(v29._r0, v29._r1, v29._r2, v29._r3, v29._r4, v29._r5, v29._r6, v29._r7, v29._r8);
  v3 = runtime_mapaccess2_faststr((__int64)&RTYPE_map_string_runtime_metricData, runtime_metrics, a1, a2);
  if ( !LOBYTE(v3._r1) )
  {
    v16 = runtime_concatstring2(0, "runtime: unexpected metric registration for ", 44, a1, a2);
    runtime_throw((__int64 (*)(void))v16._r0, (__int64 (*)(void))v16._r1, v17, v18, v19, v20, v21, v22, v23);
  }
  v24 = *(_QWORD *)v3._r0;
  v4 = runtime_newobject((const RTYPE *)qword_10D94E0);
  *v4 = runtime_metricReader_compute_fm;
  if ( runtime_writeBarrier )
  {
    runtime_gcWriteBarrier1();
    v5 = a3;
    *v6 = a3;
  }
  else
  {
    v5 = a3;
  }
  v25 = v4;
  v4[1] = v5;
  v7 = (_QWORD *)runtime_mapassign_faststr((__int64)&RTYPE_map_string_runtime_metricData, runtime_metrics, a1, a2);
  *v7 = v24;
  if ( runtime_writeBarrier )
  {
    runtime_gcWriteBarrier2();
    v14 = v25;
    *v13 = v25;
    v9 = v7[1];
    v13[1] = v9;
  }
  else
  {
    v14 = v25;
  }
  v7[1] = v14;
  return runtime_semrelease1((unsigned int)&runtime_metricsSema, 0, 0, v8, v9, v10, v11, v12, (_DWORD)v13);
}

==================================================

// function name: runtime_mapassign_faststr

// 1197140: using guessed type __int64 runtime_zeroVal[128];

//----- (00000000010072C0) ----------------------------------------------------
// runtime.mapassign_faststr
__int64 __golang runtime_mapassign_faststr(__int64 a1, __int64 a2, const __m128i *a3, unsigned __int64 a4)
{
  unsigned __int64 v4; // rax
  __int64 v5; // rcx
  _QWORD *v6; // rbx
  __int64 result; // rax
  __int64 v8; // rdx
  unsigned __int64 v9; // rdx
  __int64 v10; // rdx
  __int64 v11; // rsi
  unsigned __int64 v12; // rdi
  unsigned __int64 v13; // rax
  __int64 v14; // r8
  unsigned __int64 *v15; // r9
  __int64 v16; // r10
  __int64 v17; // rax
  unsigned __int64 v18; // r12
  unsigned __int64 v19; // r11
  unsigned __int64 v20; // r13
  __int64 v21; // r15
  __int64 v22; // rdi
  const __m128i **v23; // r15
  const __m128i **v24; // rdx
  const __m128i *v25; // rcx
  const __m128i **v26; // r11
  __int64 v27; // rdx
  const __m128i **v28; // rsi
  const __m128i *v29; // rdi
  const __m128i **v30; // r11
  __int64 v31; // rsi
  unsigned __int64 *v32; // rdi
  RTYPE *v33; // rcx
  char v34; // [rsp+20h] [rbp-88h]
  unsigned __int64 v35; // [rsp+28h] [rbp-80h]
  __int64 v36; // [rsp+30h] [rbp-78h]
  unsigned __int64 v37; // [rsp+38h] [rbp-70h]
  __int64 v38; // [rsp+40h] [rbp-68h]
  unsigned __int64 v39; // [rsp+48h] [rbp-60h]
  __int64 v40; // [rsp+50h] [rbp-58h]
  __int64 v41; // [rsp+58h] [rbp-50h]
  __int64 v42; // [rsp+68h] [rbp-40h]
  __int64 v43; // [rsp+70h] [rbp-38h]
  _QWORD v44[2]; // [rsp+78h] [rbp-30h] BYREF
  unsigned __int64 *v45; // [rsp+88h] [rbp-20h]
  unsigned __int64 *v46; // [rsp+90h] [rbp-18h]
  __int64 v47; // [rsp+98h] [rbp-10h]
  __int64 v48; // [rsp+B0h] [rbp+8h]
  __int64 v49; // [rsp+B8h] [rbp+10h]
  const __m128i *v50; // [rsp+C0h] [rbp+18h]
  unsigned __int64 v51; // [rsp+C8h] [rbp+20h]

  if ( !a2 )
  {
    v33 = (RTYPE *)internal_runtime_maps_errNilAssign;
    if ( internal_runtime_maps_errNilAssign )
      v33 = internal_runtime_maps_errNilAssign[1];
    runtime_gopanic(v33, off_11714B8);
  }
  v48 = a1;
  v49 = a2;
  v51 = a4;
  v50 = a3;
  if ( *(_BYTE *)(a2 + 34) )
  {
    internal_runtime_maps_fatal((__int64 (*)(void))"concurrent map writes", (__int64 (*)(void))0x15);
    a1 = v48;
    a3 = v50;
    a2 = v49;
    a4 = v51;
  }
  v44[0] = a3;
  v44[1] = a4;
  v4 = (**(__int64 (__golang ***)(_QWORD *, _QWORD))(a1 + 72))(v44, *(_QWORD *)(a2 + 8));
  v39 = v4;
  v5 = v49;
  *(_BYTE *)(v49 + 34) ^= 1u;
  if ( !*(_QWORD *)(v49 + 16) )
  {
    internal_runtime_maps__ptr_Map_growToSmall(v49, v48);
    v4 = v39;
    v5 = v49;
  }
  if ( !*(_QWORD *)(v5 + 24) )
  {
    if ( *(_QWORD *)v5 < 8u )
    {
      result = internal_runtime_maps__ptr_Map_putSlotSmallFastStr((_QWORD *)v5, v48, v4, v50, v51);
      v8 = v49;
      if ( !*(_BYTE *)(v49 + 34) )
      {
        v47 = result;
        internal_runtime_maps_fatal((__int64 (*)(void))"concurrent map writes", (__int64 (*)(void))0x15);
        result = v47;
        v8 = v49;
      }
      *(_BYTE *)(v8 + 34) ^= 1u;
      return result;
    }
    internal_runtime_maps__ptr_Map_growToTable(v5, v48);
    v4 = v39;
    v5 = v49;
  }
  v6 = (_QWORD *)v48;
  while ( 2 )
  {
    if ( *(_QWORD *)(v5 + 24) == 1 )
      v9 = 0;
    else
      v9 = v4 >> *(_BYTE *)(v5 + 33);
    v10 = *(_QWORD *)(*(_QWORD *)(v5 + 16) + 8 * v9);
    v42 = v10;
    v11 = *(_QWORD *)(v10 + 24);
    v38 = v11;
    v12 = v4;
    v13 = v11 & (v4 >> 7);
    v14 = 0;
    v15 = 0;
    v16 = 0;
    while ( 2 )
    {
      v36 = v14;
      v35 = v13;
      v46 = v15;
      v40 = v16;
      v18 = v12;
      v34 = v12 & 0x7F;
      v45 = (unsigned __int64 *)(*(_QWORD *)(v10 + 16) + v13 * v6[10]);
      v19 = (unsigned __int8)_mm_movemask_epi8(
                               _mm_cmpeq_epi8(
                                 _mm_shufflelo_epi16(_mm_unpacklo_epi8((__m128i)(v12 & 0x7F), (__m128i)(v12 & 0x7F)), 0),
                                 (__m128i)*v45));
      v20 = v51;
      while ( v19 )
      {
        _BitScanForward64((unsigned __int64 *)&v22, v19);
        v23 = (const __m128i **)((char *)v45 + v22 * v6[11] + 8);
        if ( v23[1] == (const __m128i *)v20 )
        {
          v37 = v19;
          v41 = v22;
          if ( runtime_memequal(v50, *v23, v20) )
          {
            v24 = v23;
            v23[1] = (const __m128i *)v51;
            if ( runtime_writeBarrier )
            {
              runtime_gcWriteBarrier2();
              v25 = v50;
              *v26 = v50;
              v26[1] = *v24;
            }
            else
            {
              v25 = v50;
            }
            *v24 = v25;
            v27 = (__int64)v45 + *(_QWORD *)(v48 + 96) + v41 * *(_QWORD *)(v48 + 88) + 8;
            v5 = v49;
            goto LABEL_42;
          }
          v13 = v35;
          v5 = v49;
          v10 = v42;
          v6 = (_QWORD *)v48;
          v11 = v38;
          v14 = v36;
          v15 = v46;
          v16 = v40;
          v19 = v37;
          v18 = v39;
          v20 = v51;
        }
        v19 &= v19 - 1;
      }
      LODWORD(v21) = _mm_movemask_epi8((__m128i)*v45);
      if ( !(_DWORD)v21 )
      {
LABEL_23:
        v17 = v14 + v13 + 1;
        ++v14;
        v13 = v11 & v17;
        v12 = v18;
        continue;
      }
      break;
    }
    _BitScanForward64((unsigned __int64 *)&v21, (unsigned int)v21);
    if ( *((_BYTE *)v45 + v21) == 0xFE )
    {
      if ( !v15 )
      {
        v15 = v45;
        v16 = v21;
      }
      goto LABEL_23;
    }
    if ( v15 )
    {
      v45 = v15;
      ++*(_WORD *)(v10 + 4);
    }
    else
    {
      v16 = v21;
    }
    if ( !*(_WORD *)(v10 + 4) )
    {
      internal_runtime_maps__ptr_table_rehash(v10, (__int64)v6, v5);
      v5 = v49;
      v6 = (_QWORD *)v48;
      v4 = v39;
      continue;
    }
    break;
  }
  v28 = (const __m128i **)((char *)v45 + v16 * v6[11] + 8);
  v28[1] = (const __m128i *)v20;
  if ( runtime_writeBarrier )
  {
    runtime_gcWriteBarrier2();
    v29 = v50;
    *v30 = v50;
    v30[1] = *v28;
  }
  else
  {
    v29 = v50;
  }
  *v28 = v29;
  v31 = v6[12] + v16 * v6[11];
  v32 = v45;
  *((_BYTE *)v45 + v16) = v34;
  --*(_WORD *)(v10 + 4);
  ++*(_WORD *)v10;
  ++*(_QWORD *)v5;
  v27 = (__int64)v32 + v31 + 8;
LABEL_42:
  if ( !*(_BYTE *)(v5 + 34) )
  {
    v43 = v27;
    internal_runtime_maps_fatal((__int64 (*)(void))"concurrent map writes", (__int64 (*)(void))0x15);
    v5 = v49;
    v27 = v43;
  }
  *(_BYTE *)(v5 + 34) ^= 1u;
  return v27;
}

==================================================

// function name: internal_runtime_maps__ptr_Map_putSlotSmallFastStr

//----- (00000000010045E0) ----------------------------------------------------
// internal/runtime/maps.(*Map).putSlotSmallFastStr
__int64 __golang internal_runtime_maps__ptr_Map_putSlotSmallFastStr(
        _QWORD *a1,
        __int64 a2,
        char a3,
        const __m128i *a4,
        unsigned __int64 a5)
{
  unsigned int v5; // ecx
  unsigned __int64 i; // rdx
  __int64 v7; // r9
  char *v8; // r8
  const __m128i **v9; // rdx
  const __m128i *v10; // rcx
  const __m128i **v11; // r11
  unsigned __int64 v13; // rdx
  const __m128i **v15; // r8
  const __m128i **v16; // r11
  unsigned __int64 v17; // rsi
  char v18; // [rsp+2h] [rbp-30h]
  unsigned __int64 v19; // [rsp+Ah] [rbp-28h]
  __int64 v20; // [rsp+12h] [rbp-20h]
  const __m128i **v21; // [rsp+1Ah] [rbp-18h]
  unsigned __int64 *v22; // [rsp+22h] [rbp-10h]
  _QWORD *v23; // [rsp+3Ah] [rbp+8h]
  __int64 v24; // [rsp+42h] [rbp+10h]
  const __m128i *v25; // [rsp+52h] [rbp+20h]
  unsigned __int64 v26; // [rsp+5Ah] [rbp+28h]

  v23 = a1;
  v24 = a2;
  v26 = a5;
  v25 = a4;
  v22 = (unsigned __int64 *)a1[2];
  v5 = a3 & 0x7F;
  v18 = v5;
  for ( i = (unsigned __int8)_mm_movemask_epi8(
                               _mm_cmpeq_epi8(
                                 _mm_shufflelo_epi16(_mm_unpacklo_epi8((__m128i)v5, (__m128i)v5), 0),
                                 (__m128i)*v22)); i; i &= i - 1 )
  {
    _BitScanForward64((unsigned __int64 *)&v7, i);
    v8 = (char *)v22 + v7 * *(_QWORD *)(a2 + 88) + 8;
    if ( *((_QWORD *)v8 + 1) == a5 )
    {
      v19 = i;
      v20 = v7;
      v21 = (const __m128i **)((char *)v22 + v7 * *(_QWORD *)(a2 + 88) + 8);
      if ( runtime_memequal(a4, *(const __m128i **)v8, a5) )
      {
        v9 = v21;
        v21[1] = (const __m128i *)v26;
        if ( runtime_writeBarrier )
        {
          runtime_gcWriteBarrier2();
          v10 = v25;
          *v11 = v25;
          v11[1] = *v9;
        }
        else
        {
          v10 = v25;
        }
        *v9 = v10;
        return (__int64)v22 + *(_QWORD *)(v24 + 96) + v20 * *(_QWORD *)(v24 + 88) + 8;
      }
      a1 = v23;
      LOBYTE(v5) = v18;
      i = v19;
      a2 = v24;
      a5 = v26;
      a4 = v25;
    }
  }
  v13 = (unsigned int)_mm_movemask_epi8((__m128i)*v22);
  if ( !(_DWORD)v13 )
  {
    internal_runtime_maps_fatal(
      (__int64 (*)(void))"small map with no empty slot (concurrent map writes?)",
      (__int64 (*)(void))0x35);
    a1 = v23;
    LOBYTE(v5) = v18;
    v13 = 0;
    a2 = v24;
    a5 = v26;
    a4 = v25;
  }
  if ( !_BitScanForward64(&v13, v13) )
    v13 = 64;
  v15 = (const __m128i **)((char *)v22 + v13 * *(_QWORD *)(a2 + 88) + 8);
  v15[1] = (const __m128i *)a5;
  if ( runtime_writeBarrier )
  {
    runtime_gcWriteBarrier2();
    *v16 = a4;
    v16[1] = *v15;
  }
  *v15 = a4;
  v17 = *(_QWORD *)(a2 + 96) + v13 * *(_QWORD *)(a2 + 88);
  *((_BYTE *)v22 + v13) = v5;
  ++*a1;
  return (__int64)v22 + v17 + 8;
}

==================================================

// function name: runtime_mapaccess2_faststr

// 1197140: using guessed type __int64 runtime_zeroVal[128];

//----- (0000000001007020) ----------------------------------------------------
// runtime.mapaccess2_faststr
retval_1007020 __golang runtime_mapaccess2_faststr(__int64 a1, __int64 a2, const __m128i *a3, __int64 a4)
{
  unsigned __int64 v4; // rax
  __int64 v5; // rcx
  unsigned __int64 v6; // rdx
  __int64 v7; // rdx
  __int64 v8; // rsi
  unsigned __int64 v9; // rdi
  unsigned __int64 v10; // rax
  __int64 v11; // rcx
  __int64 v14; // rax
  __int64 v15; // r8
  unsigned __int64 v16; // r10
  unsigned __int64 v17; // rdi
  unsigned __int64 v18; // r9
  __int64 v19; // r12
  char *v20; // r11
  unsigned __int64 v21; // [rsp+0h] [rbp-58h]
  __int64 v22; // [rsp+8h] [rbp-50h]
  unsigned __int64 v23; // [rsp+10h] [rbp-48h]
  __int64 v24; // [rsp+18h] [rbp-40h]
  unsigned __int64 v25; // [rsp+20h] [rbp-38h]
  char *v26; // [rsp+28h] [rbp-30h]
  __int64 v27; // [rsp+30h] [rbp-28h]
  _QWORD v28[2]; // [rsp+38h] [rbp-20h] BYREF
  unsigned __int64 *v29; // [rsp+48h] [rbp-10h]
  retval_1007020 result; // 0:rax.8,8:rbx.8

  if ( a2 && *(_QWORD *)a2 )
  {
    if ( *(_BYTE *)(a2 + 34) )
    {
      internal_runtime_maps_fatal((__int64 (*)(void))"concurrent map read and map write", (__int64 (*)(void))0x21);
      result._r0 = 0;
      result._r1 = 0;
    }
    else if ( *(__int64 *)(a2 + 24) <= 0 )
    {
      result._r0 = internal_runtime_maps__ptr_Map_getWithoutKeySmallFastStr(a2, a1, a3, a4);
      if ( result._r0 )
      {
        result._r1 = 1;
      }
      else
      {
        result._r0 = runtime_zeroVal;
        result._r1 = 0;
      }
    }
    else
    {
      v28[0] = a3;
      v28[1] = a4;
      v4 = (**(__int64 (__golang ***)(_QWORD *, _QWORD))(a1 + 72))(v28, *(_QWORD *)(a2 + 8));
      v5 = a2;
      if ( *(_QWORD *)(a2 + 24) == 1 )
      {
        v6 = 0;
      }
      else
      {
        v5 = a2;
        v6 = v4 >> *(_BYTE *)(a2 + 33);
      }
      v25 = v4;
      v7 = *(_QWORD *)(*(_QWORD *)(v5 + 16) + 8 * v6);
      v27 = v7;
      v8 = *(_QWORD *)(v7 + 24);
      v24 = v8;
      v9 = v4;
      v10 = v8 & (v4 >> 7);
      v11 = 0;
      while ( 2 )
      {
        v22 = v11;
        v21 = v10;
        v15 = a1;
        v16 = v9;
        v29 = (unsigned __int64 *)(*(_QWORD *)(v7 + 16) + v10 * *(_QWORD *)(a1 + 80));
        v17 = (unsigned __int8)_mm_movemask_epi8(
                                 _mm_cmpeq_epi8(
                                   _mm_shufflelo_epi16(_mm_unpacklo_epi8((__m128i)(v9 & 0x7F), (__m128i)(v9 & 0x7F)), 0),
                                   (__m128i)*v29));
        v18 = a4;
        while ( v17 )
        {
          _BitScanForward64((unsigned __int64 *)&v19, v17);
          v20 = (char *)v29 + v19 * *(_QWORD *)(v15 + 88) + 8;
          if ( *((_QWORD *)v20 + 1) == v18 )
          {
            v23 = v17;
            v26 = (char *)v29 + v19 * *(_QWORD *)(v15 + 88) + 8;
            if ( runtime_memequal(a3, *(const __m128i **)v20, v18) )
            {
              result._r0 = v26 + 16;
              result._r1 = 1;
              return result;
            }
            v10 = v21;
            v11 = v22;
            v7 = v27;
            v8 = v24;
            v17 = v23;
            v15 = a1;
            v18 = a4;
            v16 = v25;
          }
          v17 &= v17 - 1;
        }
        if ( !(unsigned __int8)_mm_movemask_epi8(_mm_cmpeq_epi8((__m128i)0x8080808080808080LL, (__m128i)*v29)) )
        {
          v14 = v11 + v10 + 1;
          ++v11;
          v10 = v8 & v14;
          v9 = v16;
          continue;
        }
        break;
      }
      result._r0 = runtime_zeroVal;
      result._r1 = 0;
    }
  }
  else
  {
    result._r0 = runtime_zeroVal;
    result._r1 = 0;
  }
  return result;
}

==================================================

// function name: runtime_syscallX

// 106F267: variable 'v5' is possibly undefined

//----- (000000000106F2A0) ----------------------------------------------------
// runtime.syscallX
__int64 __golang runtime_syscallX(__int64 a1, __int64 a2, __int64 a3, _QWORD *a4)
{
  __int64 v4; // rax
  __int64 v5; // rdx

  v4 = ((__int64 (__golang *)(_QWORD, __int64, _QWORD, _QWORD, _QWORD))*a4)(0, a2, *a4, a4[1], a4[2]);
  a4[4] = v4;
  a4[5] = v5;
  if ( v4 == -1 )
    a4[6] = *__error();
  return 0;
}

==================================================

// function name: runtime_pthread_mutex_lock_trampoline

//----- (000000000106F100) ----------------------------------------------------
// runtime.pthread_mutex_lock_trampoline
int __golang runtime_pthread_mutex_lock_trampoline(__int64 a1, __int64 a2, __int64 a3, pthread_mutex_t **a4)
{
  return pthread_mutex_lock(*a4);
}

==================================================

// function name: runtime_sigprocmask_trampoline

//----- (000000000106EC00) ----------------------------------------------------
// runtime.sigprocmask_trampoline
int __golang runtime_sigprocmask_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
{
  int result; // eax

  result = pthread_sigmask(*(_DWORD *)a4, *(const sigset_t **)(a4 + 8), *(sigset_t **)(a4 + 16));
  if ( result )
    MEMORY[0xF1] = 241;
  return result;
}

==================================================

// function name: runtime_exit_trampoline

// 106EA57: variable 'v9' is possibly undefined

//----- (000000000106EAA0) ----------------------------------------------------
// runtime.exit_trampoline
void __golang __noreturn runtime_exit_trampoline(__int64 a1, __int64 a2, __int64 a3, int *a4)
{
  _exit(*a4);
}

==================================================

// function name: syscall_SetNonblock

//----- (0000000001086040) ----------------------------------------------------
// syscall.SetNonblock
retval_1086040 __golang syscall_SetNonblock(__int64 a1, char a2)
{
  __int64 v2; // rcx
  retval_10875A0 v3; // kr00_16
  unsigned __int64 v6; // rcx
  __int64 v7; // rcx
  retval_1086040 result; // 0:rax.8,8:rbx.8

  v3 = syscall_fcntl(a1, 3, 0);
  if ( v3._r1 )
  {
    result._r0 = v3._r1;
    result._r1 = v2;
  }
  else if ( a2 == ((v3._r0 & 4) != 0) )
  {
    result._r0 = 0;
    result._r1 = 0;
  }
  else
  {
    v6 = v3._r0 & 0xFFFFFFFFFFFFFFFBLL;
    if ( a2 )
      v6 = v3._r0 | 4LL;
    result._r0 = syscall_fcntl(a1, 4, v6)._r1;
    result._r1 = v7;
  }
  return result;
}

==================================================

// function name: runtime_syscall

arc4random_buf(*(void **)a4, *(unsigned int *)(a4 + 8));

//----- (000000000106F240) ----------------------------------------------------
// runtime.syscall
__int64 __golang runtime_syscall(__int64 a1, __int64 a2, __int64 a3, _QWORD *a4)
{
  __int64 v4; // rax
  __int64 v5; // rdx

  v4 = ((__int64 (__golang *)(_QWORD, __int64, _QWORD, _QWORD, _QWORD))*a4)(0, a2, *a4, a4[1], a4[2]);
  a4[4] = v4;
  a4[5] = v5;
  if ( (_DWORD)v4 == -1 )
    a4[6] = *__error();
  return 0;
}

==================================================

// function name: runtime_panicSliceAcapU

// 106D846: variable 'v9' is possibly undefined

//----- (000000000106D860) ----------------------------------------------------
// runtime.panicSliceAcapU
void __golang __noreturn runtime_panicSliceAcapU(
        __int64 a1,
        __int64 a2,
        int64 a3,
        int a4,
        int a5,
        int a6,
        int a7,
        int a8,
        int a9)
{
  signed __int64 v9; // rdx

  runtime_goPanicSliceAcapU(a3, v9, a3, a4, a5, a6, a7, a8, a9);
}

==================================================

// function name: internal_fmtsort_Sort

return (unsigned int)v2;

//----- (0000000001080040) ----------------------------------------------------
// internal/fmtsort.Sort
retval_1080040 __golang internal_fmtsort_Sort(abi_Type *data, void *a2, reflect_flag a3)
{
  RTYPE **tab; // rdx
  reflect_Type v4; // kr40_16
  signed __int64 v5; // rdi
  __int64 r0; // rax
  __int128 *r2; // rcx
  unsigned __int64 i; // rdx
  _OWORD *v12; // rdi
  __int64 v13; // rbx
  reflect_flag v14; // rcx
  __int64 v15; // rax
  __int64 v16; // rbx
  __int64 v17; // rcx
  unsigned __int64 r1; // rbx
  __int64 v19; // rdx
  _OWORD *v20; // rsi
  signed __int64 v21; // [rsp+50h] [rbp-120h]
  unsigned __int64 v22; // [rsp+58h] [rbp-118h]
  __int128 *v23; // [rsp+60h] [rbp-110h]
  __int128 *v24; // [rsp+68h] [rbp-108h]
  unsigned __int64 v25; // [rsp+70h] [rbp-100h]
  __int64 v26; // [rsp+78h] [rbp-F8h]
  reflect_flag v27; // [rsp+80h] [rbp-F0h]
  reflect_flag v29; // [rsp+88h] [rbp-E8h]
  __int64 v30; // [rsp+90h] [rbp-E0h]
  __int64 v31; // [rsp+98h] [rbp-D8h]
  __int64 v32; // [rsp+A0h] [rbp-D0h]
  __int64 v33; // [rsp+A8h] [rbp-C8h]
  _OWORD v34[2]; // [rsp+B0h] [rbp-C0h] BYREF
  __int128 v35; // [rsp+D0h] [rbp-A0h]
  __int128 v36; // [rsp+E0h] [rbp-90h]
  _OWORD v37[8]; // [rsp+F0h] [rbp-80h] BYREF
  retval_1068120 v38; // 0:kr00_24.24
  reflect_Value v39; // 0:kr28_24.24
  reflect_Value v40; // 0:rax.8,8:rbx.8,16:rcx.8
  retval_1080040 result; // 0:rax.8,8:rbx.8,16:rcx.8

  *((_QWORD *)&v34[0] + 1) = a2;
  *(_QWORD *)&v34[0] = data;
  if ( !a3 || (a3 & 0x200) != 0 )
  {
    v39.typ_ = data;
    v39.ptr = a2;
    v39.flag = a3;
    v4 = reflect_Value_typeSlow(v39);
    tab = (RTYPE **)v4.tab;
    data = (abi_Type *)v4.data;
  }
  else
  {
    tab = go_itab__ptr_reflect_rtype_comma_reflect_Type;
  }
  if ( ((__int64 (__golang *)(abi_Type *))tab[21])(data) == 21 )
  {
    v40.flag = a3;
    v27 = a3 & 0x1F;
    if ( v27 == 23 )
    {
      v5 = *(_QWORD *)(*((_QWORD *)&v34[0] + 1) + 8LL);
    }
    else
    {
      *(_OWORD *)&v40.typ_ = v34[0];
      v5 = reflect_Value_lenNonSlice(v40);
    }
    v21 = v5;
    r0 = runtime_makeslice(&RTYPE_fmtsort_KeyValue, 0);
    if ( v27 != 21 )
    {
      v33 = r0;
      reflect_flag_panicNotMap(a3);
      r0 = v33;
    }
    memset((char *)v37 + 8, 0, 112);
    *(_QWORD *)&v37[1] = a3;
    v37[0] = v34[0];
    r2 = (__int128 *)v21;
    for ( i = 0; ; i = r1 )
    {
      v23 = r2;
      v22 = i;
      v30 = r0;
      if ( !reflect__ptr_MapIter_Next((__int64 *)v37) )
        break;
      *(_QWORD *)&v34[0] = reflect__ptr_MapIter_Key(v37);
      *((_QWORD *)&v34[0] + 1) = v13;
      v29 = v14;
      v15 = reflect__ptr_MapIter_Value(v37);
      v34[1] = v34[0];
      *(_QWORD *)&v35 = v29;
      *((_QWORD *)&v35 + 1) = v15;
      *(_QWORD *)&v36 = v16;
      *((_QWORD *)&v36 + 1) = v17;
      r1 = v22 + 1;
      r2 = v23;
      if ( (unsigned __int64)v23 < v22 + 1 )
      {
        v38 = runtime_growslice(v30, r1, v23, 1, &RTYPE_fmtsort_KeyValue);
        r0 = v38._r0;
        r1 = v38._r1;
        r2 = (__int128 *)v38._r2;
      }
      else
      {
        r0 = v30;
      }
      v19 = 48 * r1;
      v20 = (_OWORD *)(48 * r1 + r0 - 48);
      if ( runtime_writeBarrier )
      {
        v26 = 48 * r1;
        v32 = r0;
        v25 = r1;
        v24 = r2;
        v31 = 48 * r1 + r0 - 48;
        runtime_wbMove(&RTYPE_fmtsort_KeyValue, v20, &v34[1]);
        r0 = v32;
        r2 = v24;
        v19 = v26;
        r1 = v25;
        v20 = (_OWORD *)v31;
      }
      v12 = (_OWORD *)(v19 + r0 - 32);
      *v20 = v34[1];
      *v12 = v35;
      v12[1] = v36;
    }
    slices_stableCmpFunc_go_shape_struct__Key_reflect_Value_Value_reflect_Value__(
      (__int64)&slices__dict_stableCmpFunc_internal_fmtsort_KeyValue_,
      v30,
      v22,
      v23,
      v22,
      &off_10EA930);
    result._r0 = v30;
    result._r1 = v22;
    result._r2 = v23;
  }
  else
  {
    result._r0 = 0;
    result._r1 = 0;
    result._r2 = 0;
  }
  return result;
}

==================================================

// function name: slices_stableCmpFunc_go_shape_struct__Key_reflect_Value_Value_reflect_Value__

//----- (00000000010814A0) ----------------------------------------------------
// slices.stableCmpFunc[go.shape.struct { Key reflect.Value; Value reflect.Value }]
// local variable allocation has failed, the output may be wrong!
__int64 __golang slices_stableCmpFunc_go_shape_struct__Key_reflect_Value_Value_reflect_Value__(
        __int64 result,
        __int64 a2,
        unsigned __int64 a3,
        __int128 *a4,
        __int64 a5,
        _QWORD *a6)
{
  _OWORD *v7; // r10
  signed __int64 v8; // rdx
  int64 i; // r9
  int64 j; // r11
  signed __int64 k; // r11
  signed __int64 v12; // rdx
  signed __int64 m; // rdx
  signed __int64 v14; // r11
  char *v15; // rdx
  char *v16; // r9
  int64 v17; // r10
  __int128 *v18; // rdi
  __int64 v19; // r10
  int v20; // r9d
  unsigned __int64 v21; // r12
  __int64 v22; // r11
  __int128 *v23; // r13
  _OWORD *v24; // r15
  __int128 *v25; // rax
  bool v26; // r12
  __int64 v27; // r12
  bool v28; // r9
  unsigned __int64 v29; // r12
  __int64 v30; // r11
  __int128 *v31; // r13
  __int128 *v32; // r15
  signed __int64 v33; // [rsp+60h] [rbp-D8h]
  int64 v34; // [rsp+68h] [rbp-D0h]
  signed __int64 v35; // [rsp+70h] [rbp-C8h]
  _OWORD *v36; // [rsp+78h] [rbp-C0h]
  signed __int64 v37; // [rsp+80h] [rbp-B8h]
  char *v38; // [rsp+88h] [rbp-B0h]
  int64 v39; // [rsp+90h] [rbp-A8h]
  char *v40; // [rsp+90h] [rbp-A8h]
  __int64 v41; // [rsp+98h] [rbp-A0h]
  unsigned __int64 v42; // [rsp+A0h] [rbp-98h]
  unsigned __int64 v43; // [rsp+A8h] [rbp-90h]
  signed __int64 v44; // [rsp+B0h] [rbp-88h]
  __int64 v45; // [rsp+B0h] [rbp-88h]
  __int64 v46; // [rsp+B8h] [rbp-80h]
  __int64 v47; // [rsp+B8h] [rbp-80h]
  __int64 v48; // [rsp+C0h] [rbp-78h]
  __int128 *v49; // [rsp+C0h] [rbp-78h]
  _OWORD *v50; // [rsp+C8h] [rbp-70h]
  __int64 v51; // [rsp+C8h] [rbp-70h]
  __int128 v52; // [rsp+100h] [rbp-38h] BYREF
  __int128 v53; // [rsp+110h] [rbp-28h]
  __int128 v54; // [rsp+120h] [rbp-18h]
  __int64 v55; // [rsp+140h] [rbp+8h]
  __int64 v56; // [rsp+148h] [rbp+10h]
  unsigned __int64 v57; // [rsp+150h] [rbp+18h]
  __int128 v58; // [rsp+158h] [rbp+20h]
  _QWORD *v59; // [rsp+168h] [rbp+30h]

  v55 = result;
  v59 = a6;
  v58 = *(_OWORD *)&a4;
  v57 = a3;
  v56 = a2;
  v8 = 20;
  for ( i = 0; ; i = v44 )
  {
    v39 = i;
    if ( (__int64)*(&a4 + 1) < v8 )
      break;
    v44 = v8;
    for ( j = i + 1; j < v8; j = (int64)v7 + 1 )
    {
      v36 = (_OWORD *)j;
      v7 = (_OWORD *)j;
      while ( 1 )
      {
        if ( j > i )
        {
          if ( a3 <= j )
            runtime_panicIndex(j, a2, a3, (int)a4, *((int *)&a4 + 2), (int)a6, i, (int)v7, j);
          a4 = (__int128 *)(a2 + 48 * j);
          v52 = *a4;
          v53 = a4[1];
          v54 = a4[2];
          if ( a3 <= j - 1 )
            runtime_panicIndex(j - 1, a2, a3, (int)a4, *((int *)&a4 + 2), (int)a6, i, (int)v7, j);
          v34 = j;
          v27 = 48 * j;
          v28 = (__int64)((__int64 (__golang *)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int64, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))*a6)(
                           v52,
                           *((_QWORD *)&v52 + 1),
                           v53,
                           *((_QWORD *)&v53 + 1),
                           v54,
                           *((_QWORD *)&v54 + 1),
                           *a6,
                           *((_QWORD *)&v54 + 1),
                           a2 + v27 - 48,
                           *(_QWORD *)(a2 + v27 - 48),
                           *(_QWORD *)(a2 + v27 - 48 + 8),
                           *(_QWORD *)(a2 + v27 - 32),
                           *(_QWORD *)(a2 + v27 - 24),
                           *(_QWORD *)(a2 + v27 - 16),
                           *(_QWORD *)(a2 + v27 - 8)) < 0;
          result = v55;
          a3 = v57;
          v8 = v44;
          a2 = v56;
          *(_OWORD *)&a4 = v58;
          a6 = v59;
          v7 = v36;
          j = v34;
          v26 = v28;
          i = v39;
        }
        else
        {
          v26 = 0;
        }
        if ( !v26 )
          break;
        if ( a3 <= j )
          runtime_panicIndex(j, a2, a3, (int)a4, *((int *)&a4 + 2), (int)a6, i, (int)v7, j);
        v29 = j - 1;
        v30 = 48 * j;
        v31 = (__int128 *)(a2 + v30 + 16);
        a4 = (__int128 *)(a2 + v30);
        v52 = *(_OWORD *)(a2 + v30);
        v53 = *v31;
        v54 = *(_OWORD *)(a2 + v30 + 32);
        if ( a3 <= v29 )
          runtime_panicIndex(v29, a2, a3, (int)a4, *((int *)&a4 + 2), (int)a6, i, (int)v7, v30);
        v32 = (__int128 *)(a2 + v30 - 48);
        if ( runtime_writeBarrier )
        {
          v51 = a2 + v30 + 16;
          v49 = (__int128 *)(a2 + v30);
          v42 = v29;
          v47 = a2 + v30 - 48;
          v41 = v30;
          runtime_wbMove(&RTYPE_go_shape_struct__Key_reflect_Value_Value_reflect_Value_, a2 + v30, v32);
          runtime_wbMove(&RTYPE_go_shape_struct__Key_reflect_Value_Value_reflect_Value_, v47, &v52);
          a3 = v57;
          v8 = v44;
          a2 = v56;
          *(&a4 + 1) = (__int128 *)*((_QWORD *)&v58 + 1);
          a4 = v49;
          a6 = v59;
          i = v39;
          v7 = v36;
          v30 = v41;
          v29 = v42;
          v31 = (__int128 *)v51;
          v32 = (__int128 *)v47;
        }
        v25 = (__int128 *)(a2 + v30 - 32);
        *a4 = *v32;
        *v31 = *v25;
        v31[1] = *(_OWORD *)(a2 + v30 - 16);
        *v32 = v52;
        *v25 = v53;
        v25[1] = v54;
        result = v55;
        a4 = (__int128 *)v58;
        j = v29;
      }
    }
    v8 += 20LL;
  }
  for ( k = i + 1; (__int64)*(&a4 + 1) > k; k = v12 + 1 )
  {
    v35 = k;
    v12 = k;
    while ( 1 )
    {
      if ( k > i )
      {
        if ( a3 <= k )
          runtime_panicIndex(k, a2, a3, (int)a4, *((int *)&a4 + 2), (int)a6, i, (int)v7, k);
        v19 = 48 * k;
        v52 = *(_OWORD *)(a2 + 48 * k);
        v53 = *(_OWORD *)(a2 + 48 * k + 16);
        v54 = *(_OWORD *)(a2 + 48 * k + 32);
        if ( a3 <= k - 1 )
          runtime_panicIndex(k - 1, a2, a3, (int)a4, *((int *)&a4 + 2), (int)a6, i, v19, k);
        v33 = k;
        LOBYTE(v20) = (__int64)((__int64 (__golang *)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int64, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))*a6)(
                                 v52,
                                 *((_QWORD *)&v52 + 1),
                                 v53,
                                 *((_QWORD *)&v53 + 1),
                                 v54,
                                 *((_QWORD *)&v54 + 1),
                                 *a6,
                                 *((_QWORD *)&v54 + 1),
                                 a2 + v19 - 16,
                                 *(_QWORD *)(a2 + v19 - 48),
                                 *(_QWORD *)(a2 + v19 - 40),
                                 *(_QWORD *)(a2 + v19 - 32),
                                 *(_QWORD *)(a2 + v19 - 24),
                                 *(_QWORD *)(a2 + v19 - 16),
                                 *(_QWORD *)(a2 + v19 - 16 + 8)) < 0;
        result = v55;
        a3 = v57;
        v12 = v35;
        a2 = v56;
        *(_OWORD *)&a4 = v58;
        a6 = v59;
        k = v33;
        LODWORD(v7) = v20;
        i = v39;
      }
      else
      {
        LODWORD(v7) = 0;
      }
      if ( !(_BYTE)v7 )
        break;
      if ( a3 <= k )
        runtime_panicIndex(k, a2, a3, (int)a4, *((int *)&a4 + 2), (int)a6, i, (int)v7, k);
      v21 = k - 1;
      v22 = 48 * k;
      v23 = (__int128 *)(a2 + v22 + 16);
      v7 = (_OWORD *)(a2 + v22);
      v52 = *(_OWORD *)(a2 + v22);
      v53 = *v23;
      v54 = *(_OWORD *)(a2 + v22 + 32);
      if ( a3 <= v21 )
        runtime_panicIndex(v21, a2, a3, (int)a4, *((int *)&a4 + 2), (int)a6, i, (int)v7, v22);
      v24 = (_OWORD *)(a2 + v22 - 48);
      if ( runtime_writeBarrier )
      {
        v50 = (_OWORD *)(a2 + v22);
        v43 = v21;
        v48 = a2 + v22 - 48;
        v45 = v22;
        v46 = a2 + v22 + 16;
        runtime_wbMove(&RTYPE_go_shape_struct__Key_reflect_Value_Value_reflect_Value_, a2 + v22, v24);
        runtime_wbMove(&RTYPE_go_shape_struct__Key_reflect_Value_Value_reflect_Value_, v48, &v52);
        result = v55;
        a3 = v57;
        v12 = v35;
        a2 = v56;
        *(&a4 + 1) = (__int128 *)*((_QWORD *)&v58 + 1);
        a6 = v59;
        i = v39;
        v7 = v50;
        v22 = v45;
        v21 = v43;
        v23 = (__int128 *)v46;
        v24 = (_OWORD *)v48;
      }
      v18 = (__int128 *)(a2 + v22 - 32);
      *v7 = *v24;
      *v23 = *v18;
      v23[1] = *(_OWORD *)(a2 + v22 - 16);
      *v24 = v52;
      *v18 = v53;
      v18[1] = v54;
      a4 = (__int128 *)v58;
      k = v21;
    }
  }
  for ( m = 20; (__int64)*(&a4 + 1) > m; m = (signed __int64)v16 )
  {
    v37 = m;
    v14 = m;
    v15 = (char *)(2 * m);
    v38 = v15;
    v16 = v15;
    v17 = 0;
    while ( (__int64)*(&a4 + 1) >= (__int64)v15 )
    {
      v40 = v15;
      slices_symMergeCmpFunc_go_shape_struct__Key_reflect_Value_Value_reflect_Value__(
        *(_QWORD *)(result + 8),
        a2,
        a3,
        a4,
        v17,
        (char *)(v17 + v14),
        v15,
        a6);
      v14 = v37;
      v17 = (int64)v40;
      v15 = &v40[2 * v37];
      result = v55;
      a3 = v57;
      a2 = v56;
      *(_OWORD *)&a4 = v58;
      a6 = v59;
      v16 = v38;
    }
    if ( (__int64)*(&a4 + 1) > v17 + v14 )
    {
      slices_symMergeCmpFunc_go_shape_struct__Key_reflect_Value_Value_reflect_Value__(
        *(_QWORD *)(result + 8),
        a2,
        a3,
        a4,
        v17,
        (char *)(v17 + v14),
        (char *)*(&a4 + 1),
        a6);
      result = v55;
      a3 = v57;
      a2 = v56;
      *(_OWORD *)&a4 = v58;
      a6 = v59;
      v16 = v38;
    }
  }
  return result;
}

==================================================

// function name: runtime_pthread_attr_init_trampoline

// 106B460: using guessed type __int64 runtime_mstart(void);

//----- (000000000106F020) ----------------------------------------------------
// runtime.pthread_attr_init_trampoline
int __golang runtime_pthread_attr_init_trampoline(__int64 a1, __int64 a2, __int64 a3, pthread_attr_t **a4)
{
  return pthread_attr_init(*a4);
}

==================================================

// function name: runtime_mstart

//----- (000000000106B460) ----------------------------------------------------
// runtime.mstart
// attributes: thunk
__int64 runtime_mstart()
{
  return runtime_mstart0_0();
}

==================================================

// function name: runtime_mstart0_0

//----- (000000000106FA00) ----------------------------------------------------
// runtime.mstart0
__int64 runtime_mstart0_0()
{
  return runtime_mstart0();
}

==================================================

// function name: internal_reflectlite__ptr_rtype_Comparable

//----- (0000000001070BE0) ----------------------------------------------------
// internal/reflectlite.(*rtype).Comparable
bool __golang internal_reflectlite__ptr_rtype_Comparable(_ptr_reflectlite_rtype a1)
{
  __int64 v1; // r14
  char **v2; // r12
  __int64 savedregs; // [rsp+0h] [rbp+0h] BYREF
  char v5; // [rsp+10h] [rbp+10h] BYREF

  v2 = *(char ***)(v1 + 32);
  if ( v2 && *v2 == &v5 )
    *v2 = (char *)&savedregs;
  if ( !a1 )
    runtime_panicwrap();
  return a1->Type->Equal != 0;
}

==================================================

// function name: runtime_pthread_cond_init_trampoline

//----- (000000000106F140) ----------------------------------------------------
// runtime.pthread_cond_init_trampoline
int __golang runtime_pthread_cond_init_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
{
  return pthread_cond_init(*(pthread_cond_t **)a4, *(const pthread_condattr_t **)(a4 + 8));
}

==================================================

// function name: runtime_raiseproc_trampoline

// 106EC53: variable 'v4' is possibly undefined

//----- (000000000106EC80) ----------------------------------------------------
// runtime.raiseproc_trampoline
int runtime_raiseproc_trampoline()
{
  pid_t v0; // eax
  int v1; // ebx

  v0 = getpid();
  return kill(v0, v1);
}

==================================================

// function name: sync_atomic_CompareAndSwapUintptr

return _InterlockedExchange64(a1, a2);

//----- (0000000001070860) ----------------------------------------------------
// sync/atomic.CompareAndSwapUintptr
bool __golang sync_atomic_CompareAndSwapUintptr(volatile signed __int64 *a1, signed __int64 a2, signed __int64 a3)
{
  return a2 == _InterlockedCompareExchange64(a1, a3, a2);
}

==================================================

// function name: runtime_usleep_trampoline

// 106EE73: variable 'v4' is possibly undefined

//----- (000000000106EEA0) ----------------------------------------------------
// runtime.usleep_trampoline
int __golang runtime_usleep_trampoline(__int64 a1, __int64 a2, __int64 a3, useconds_t *a4)
{
  return usleep(*a4);
}

==================================================

// function name: internal_reflectlite_elem

//----- (0000000001070A40) ----------------------------------------------------
// internal/reflectlite.elem
uintptr __golang internal_reflectlite_elem(reflectlite_rtype a1)
{
  unsigned __int8 v1; // cl
  uintptr PtrBytes; // rcx
  string v4; // kr00_16
  __int64 v5; // rax
  __int64 v6; // rax

  v1 = a1.Type->Kind_ & 0x1F;
  if ( v1 > 0x12u )
  {
    switch ( v1 )
    {
      case 0x15u:
        PtrBytes = a1.Type[1].PtrBytes;
        goto LABEL_13;
      case 0x16u:
        PtrBytes = a1.Type[1].Size_;
        goto LABEL_13;
      case 0x17u:
        PtrBytes = a1.Type[1].Size_;
        goto LABEL_13;
    }
  }
  else
  {
    if ( v1 == 17 )
    {
      PtrBytes = a1.Type[1].Size_;
      goto LABEL_13;
    }
    if ( v1 == 18 )
    {
      PtrBytes = a1.Type[1].Size_;
      goto LABEL_13;
    }
  }
  PtrBytes = 0;
LABEL_13:
  if ( !PtrBytes )
  {
    v4 = internal_reflectlite_rtype_String(a1);
    v5 = runtime_concatstring2(0, "reflect: Elem of invalid type ", 30, v4.ptr, v4.len);
    v6 = runtime_convTstring(v5);
    runtime_gopanic(&RTYPE_string, v6);
  }
  return PtrBytes;
}

==================================================

// function name: runtime_newproc_0

//----- (000000000106FA40) ----------------------------------------------------
// runtime.newproc
unsigned __int64 __golang runtime_newproc_0(
        __int64 a1,
        __int64 a2,
        __int64 a3,
        __int64 a4,
        __int64 a5,
        __int64 a6,
        __int64 a7,
        __int64 a8,
        __int64 a9,
        __int64 (*a10)(void))
{
  return runtime_newproc(a10, a2, a3, a4, a5, a6, a7, a8, a9);
}

==================================================

// function name: runtime_panicSliceBU

//----- (000000000106D8A0) ----------------------------------------------------
// runtime.panicSliceBU
void __golang __noreturn runtime_panicSliceBU(
        int64 a1,
        __int64 a2,
        signed __int64 a3,
        int a4,
        int a5,
        int a6,
        int a7,
        int a8,
        int a9)
{
  runtime_goPanicSliceBU(a1, a3, a3, a4, a5, a6, a7, a8, a9);
}

==================================================

// function name: runtime_wbBufFlush_0

//----- (000000000106F8A0) ----------------------------------------------------
// runtime.wbBufFlush
unsigned __int64 __golang runtime_wbBufFlush_0(
        __int64 a1,
        __int64 a2,
        __int64 a3,
        __int64 a4,
        __int64 a5,
        __int64 a6,
        __int64 a7,
        __int64 a8,
        __int64 a9)
{
  return runtime_wbBufFlush(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

==================================================

// function name: io_fs__ptr_FileMode_IsDir

// 1009800: using guessed type __int64 __golang runtime_ifaceeq(_QWORD, _QWORD, _QWORD);

//----- (00000000010927E0) ----------------------------------------------------
// io/fs.(*FileMode).IsDir
bool __golang io_fs__ptr_FileMode_IsDir(_ptr_fs_FileMode a1)
{
  __int64 v1; // r14
  char **v2; // r12
  __int64 savedregs; // [rsp+0h] [rbp+0h] BYREF
  char v5; // [rsp+10h] [rbp+10h] BYREF

  v2 = *(char ***)(v1 + 32);
  if ( v2 && *v2 == &v5 )
    *v2 = (char *)&savedregs;
  if ( !a1 )
    runtime_panicwrap();
  return (*a1 & 0x80000000) != 0;
}

==================================================

// function name: unicode_utf8_appendRuneNonASCII

//----- (00000000010716E0) ----------------------------------------------------
// unicode/utf8.appendRuneNonASCII
__int64 __golang unicode_utf8_appendRuneNonASCII(__int64 result, __int64 a2, unsigned __int64 a3, int a4)
{
  unsigned __int64 v4; // rbx
  unsigned __int128 v5; // kr00_16
  unsigned __int64 v6; // rbx
  unsigned __int128 v7; // kr28_16
  unsigned __int64 v8; // rbx
  unsigned __int128 v9; // kr40_16
  unsigned __int64 v10; // rbx
  unsigned __int128 v11; // kr68_16
  int v12; // [rsp+20h] [rbp+20h]

  v12 = a4;
  if ( (unsigned int)a4 > 0x7FF )
  {
    if ( (unsigned int)a4 >= 0xD800 && (unsigned int)(a4 - 57344) > 0x1FFF )
    {
      if ( (unsigned int)(a4 - 0x10000) > 0xFFFFF )
      {
        v10 = a2 + 3;
        if ( a3 < v10 )
        {
          v11 = (unsigned __int128)runtime_growslice(result, v10, a3, 3, &RTYPE_uint8_0);
          result = v11;
          v10 = *((_QWORD *)&v11 + 1);
        }
        *(_BYTE *)(v10 + result - 3) = -17;
        *(_WORD *)(v10 + result - 2) = -16961;
      }
      else
      {
        v8 = a2 + 4;
        if ( a3 < v8 )
        {
          v9 = (unsigned __int128)runtime_growslice(result, v8, a3, 4, &RTYPE_uint8_0);
          result = v9;
          v8 = *((_QWORD *)&v9 + 1);
          a4 = v12;
        }
        *(_BYTE *)(v8 + result - 4) = (a4 >> 18) | 0xF0;
        *(_BYTE *)(v8 + result - 3) = (a4 >> 12) & 0x3F | 0x80;
        *(_BYTE *)(v8 + result - 2) = (a4 >> 6) & 0x3F | 0x80;
        *(_BYTE *)(v8 + result - 1) = a4 & 0x3F | 0x80;
      }
    }
    else
    {
      v6 = a2 + 3;
      if ( a3 < v6 )
      {
        v7 = (unsigned __int128)runtime_growslice(result, v6, a3, 3, &RTYPE_uint8_0);
        result = v7;
        v6 = *((_QWORD *)&v7 + 1);
        a4 = v12;
      }
      *(_BYTE *)(v6 + result - 3) = (a4 >> 12) | 0xE0;
      *(_BYTE *)(v6 + result - 2) = (a4 >> 6) & 0x3F | 0x80;
      *(_BYTE *)(v6 + result - 1) = a4 & 0x3F | 0x80;
    }
  }
  else
  {
    v4 = a2 + 2;
    if ( a3 < v4 )
    {
      v5 = (unsigned __int128)runtime_growslice(result, v4, a3, 2, &RTYPE_uint8_0);
      result = v5;
      v4 = *((_QWORD *)&v5 + 1);
      a4 = v12;
    }
    *(_BYTE *)(v4 + result - 2) = (a4 >> 6) | 0xC0;
    *(_BYTE *)(v4 + result - 1) = a4 & 0x3F | 0x80;
  }
  return result;
}

==================================================

// function name: runtime_getfp

//----- (000000000106D900) ----------------------------------------------------
// runtime.getfp
__int64 __golang runtime_getfp()
{
  __int64 v0; // rbp

  return v0;
}

==================================================

// function name: io_fs_FileMode_Type

//----- (0000000001092660) ----------------------------------------------------
// io/fs.FileMode.Type
__int64 __golang io_fs_FileMode_Type(int a1)
{
  return a1 & 0x8F280000;
}

==================================================

// function name: internal_poll__ptr_FD_Write

//----- (0000000001093600) ----------------------------------------------------
// internal/poll.(*FD).Write
retval_10D43A0 __golang internal_poll__ptr_FD_Write(_ptr_poll_FD a1, _slice_uint8 a2)
{
  int v2; // edi
  int v3; // r8d
  int v4; // r9d
  int v5; // r10d
  int v6; // r11d
  _ptr_poll_FD v7; // rax
  RTYPE **v8; // rdx
  __int64 *v9; // rsi
  __int64 v10; // rax
  RTYPE **r1; // rbx
  int r3; // edi
  int v13; // r11d
  uint8_0 *ptr; // rsi
  size_t cap; // rdx
  signed __int64 len; // r8
  _ptr_poll_FD v17; // r9
  unsigned __int64 i; // rax
  signed __int64 v22; // r10
  unsigned __int64 v23; // rcx
  size_t v24; // rdi
  __int64 v25; // r8
  signed __int64 Sysfd; // r11
  unsigned __int64 v27; // rcx
  uint8_0 *v28; // rbx
  signed __int64 v29; // rsi
  int v30; // edi
  int v31; // eax
  RTYPE **r2; // rcx
  __int64 r0; // rax
  __int64 v34; // rax
  retval_10795C0 v35; // kr110_16
  __int64 v36; // rcx
  retval_10795C0 v37; // kr120_16
  __int64 v38; // rax
  unsigned __int64 v39; // rax
  __int64 v40; // [rsp-4Eh] [rbp-E0h]
  __int64 v41; // [rsp-46h] [rbp-D8h]
  signed __int64 v42; // [rsp+2h] [rbp-90h]
  signed __int64 v43; // [rsp+2h] [rbp-90h]
  __int64 v44; // [rsp+Ah] [rbp-88h]
  size_t v45; // [rsp+12h] [rbp-80h]
  unsigned __int64 v46; // [rsp+1Ah] [rbp-78h]
  unsigned __int64 v47; // [rsp+1Ah] [rbp-78h]
  signed __int64 v48; // [rsp+2Ah] [rbp-68h]
  void *v49; // [rsp+42h] [rbp-50h]
  __int128 v50; // [rsp+42h] [rbp-50h]
  RTYPE **v51; // [rsp+42h] [rbp-50h]
  RTYPE **v52; // [rsp+4Ah] [rbp-48h]
  RTYPE **v53; // [rsp+4Ah] [rbp-48h]
  int v54; // [rsp+52h] [rbp-40h]
  uint8_0 *v55; // [rsp+5Ah] [rbp-38h]
  _QWORD v56[2]; // [rsp+72h] [rbp-20h] BYREF
  void (**v57)(void); // [rsp+82h] [rbp-10h]
  retval_1086E20 v60; // 0:kr00_24.24
  retval_10665E0 v61; // 0:krA0_64.64
  retval_10D43A0 result; // 0:rax.8,8:rbx.8,16:rcx.8

  v57 = 0;
  if ( (unsigned __int8)internal_poll__ptr_fdMutex_rwlock(a1, 0) )
  {
    v7 = a1;
    v8 = 0;
    v9 = 0;
  }
  else
  {
    v7 = a1;
    if ( a1->isFile )
    {
      v8 = internal_poll_ErrFileClosing;
      v9 = (__int64 *)off_1171368;
    }
    else
    {
      v8 = go_itab_internal_poll_errNetClosing_comma_error;
      v9 = &runtime_zerobase;
    }
  }
  if ( v8 )
  {
    result.0 = 0;
    result.1.tab = v8;
    result.1.data = v9;
    return result;
  }
  v56[0] = internal_poll__ptr_FD_Write_deferwrap1;
  v56[1] = v7;
  v57 = (void (**)(void))v56;
  v54 = (_DWORD)v7 + 32;
  v10 = internal_poll__ptr_pollDesc_prepare((int)v7 + 32, 119, v7->isFile, v2, (_DWORD)v9, v3, v4, v5, v6);
  if ( v10 )
  {
    v49 = (void *)v10;
    v52 = r1;
    (*v57)();
    result.0 = 0;
    result.1.data = v52;
    result.1.tab = v49;
    return result;
  }
  ptr = a2.ptr;
  cap = a2.cap;
  len = a2.len;
  v17 = a1;
  for ( i = 0; ; i = v47 )
  {
    if ( v17->IsStream )
    {
      v22 = len;
      len -= i;
      if ( len > 0x40000000 )
      {
        v23 = i + 0x40000000;
        goto LABEL_17;
      }
    }
    else
    {
      v22 = len;
    }
    v23 = v22;
LABEL_17:
    if ( cap < v23 )
      runtime_panicSliceAcap(i, (__int64)r1, v23, r3, (int)ptr, len, (int)v17, v22, v13);
    if ( v23 < i )
      goto LABEL_44;
    v46 = i;
    v24 = cap - i;
    v45 = cap - i;
    v25 = i & ((__int64)(i - cap) >> 63);
    Sysfd = v17->Sysfd;
    v48 = Sysfd;
    v27 = v23 - i;
    v44 = v27;
    v28 = &ptr[v25];
    v55 = &ptr[v25];
    while ( 1 )
    {
      v60 = syscall_write(Sysfd, v28, v27, v24, ptr, v25, v17, v22);
      r0 = v60._r0;
      r1 = (RTYPE **)v60._r1;
      r2 = (RTYPE **)v60._r2;
      if ( (RTYPE **)v60._r1 != go_itab_syscall_Errno_comma_error )
        break;
      if ( !(unsigned __int8)runtime_ifaceeq(v60._r1, v60._r2, &qword_10C50F0) )
      {
        r0 = v60._r0;
        r2 = (RTYPE **)v60._r2;
        r1 = (RTYPE **)v60._r1;
        break;
      }
      v27 = v44;
      v28 = v55;
      v24 = v45;
      Sysfd = v48;
    }
    if ( r0 <= 0 )
    {
      v29 = v46;
    }
    else
    {
      if ( r0 > v44 )
      {
        v35 = internal_itoa_Itoa(r0, r1, r2);
        v37 = internal_itoa_Itoa(v44, v35._r1, v36);
        v39 = (unsigned __int64)runtime_concatstring4(
                                  0,
                                  "invalid return from write: got ",
                                  31,
                                  v35._r0,
                                  v35._r1,
                                  " from a write of ",
                                  17,
                                  v37._r0,
                                  v37._r1);
        v38 = runtime_convTstring(v39);
        v61 = runtime_gopanic(&RTYPE_string, v38);
        i = v61._r0;
        r1 = (RTYPE **)v61._r1;
        v23 = v61._r2;
        r3 = v61._r3;
        LODWORD(ptr) = v61._r4;
        LODWORD(len) = v61._r5;
        LODWORD(v17) = v61._r6;
        LODWORD(v22) = v61._r7;
LABEL_44:
        runtime_panicSliceB(i, (__int64)r1, v23, r3, (int)ptr, len, (int)v17, v22, v13);
      }
      v29 = r0 + v46;
    }
    len = a2.len;
    if ( a2.len == v29 )
      break;
    v47 = v29;
    if ( r1 == go_itab_syscall_Errno_comma_error )
    {
      v31 = runtime_ifaceeq(r1, r2, &qword_10C5678);
      r2 = (RTYPE **)v60._r2;
      r1 = (RTYPE **)v60._r1;
      v29 = v47;
      len = a2.len;
      v30 = v31;
      r0 = v60._r0;
    }
    else
    {
      v30 = 0;
    }
    if ( (_BYTE)v30 )
    {
      v17 = a1;
      if ( a1->pd.runtimeCtx )
      {
        v34 = internal_poll__ptr_pollDesc_wait(v54, 119, a1->isFile, v30, v29, len, (_DWORD)a1, v22, v13, v40, v41);
        if ( !v34 )
        {
          len = a2.len;
          v17 = a1;
          goto LABEL_11;
        }
        v29 = v47;
        len = a2.len;
        v17 = a1;
        r2 = r1;
        r1 = (RTYPE **)v34;
        r0 = v60._r0;
      }
    }
    else
    {
      v17 = a1;
    }
    if ( r1 )
      break;
    if ( !r0 )
    {
      v42 = v29;
      v50 = io_ErrUnexpectedEOF;
      (*v57)();
      result.0 = v42;
      result.1.data = (void *)*((_QWORD *)&v50 + 1);
      result.1.tab = (void *)v50;
      return result;
    }
LABEL_11:
    r3 = a2.cap;
    cap = a2.cap;
    ptr = a2.ptr;
  }
  v43 = v29;
  v51 = r1;
  v53 = r2;
  (*v57)();
  result.0 = v43;
  result.1.data = v53;
  result.1.tab = v51;
  return result;
}

==================================================

// function name: runtime_sigaltstack_trampoline

//----- (000000000106EC40) ----------------------------------------------------
// runtime.sigaltstack_trampoline
int __golang runtime_sigaltstack_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
{
  __int64 v4; // rax

  LODWORD(v4) = sigaltstack(*(const stack_t **)a4, *(stack_t **)(a4 + 8));
  if ( v4 )
    MEMORY[0xF1] = 241;
  return v4;
}

==================================================

// function name: internal_godebug__ptr_Setting_IncNonDefault

//----- (0000000001084BC0) ----------------------------------------------------
// internal/godebug.(*Setting).IncNonDefault
void __golang internal_godebug__ptr_Setting_IncNonDefault(_ptr_godebug_Setting a1)
{
  _ptr_godebug_setting setting; // rcx
  void (*v2[3])(void); // [rsp+0h] [rbp-18h] BYREF
  godebug_Setting *v3; // [rsp+20h] [rbp+8h]

  setting = a1->setting;
  v2[0] = (void (*)(void))internal_godebug__ptr_Setting_register_fm;
  v2[1] = (void (*)(void))a1;
  if ( !setting->nonDefaultOnce.done.v )
  {
    v3 = a1;
    sync__ptr_Once_doSlow((__int64)&setting->nonDefaultOnce, v2);
    a1 = v3;
  }
  _InterlockedExchangeAdd64((volatile signed __int64 *)&a1->setting->nonDefault, 1u);
}

==================================================

// function name: runtime_gcWriteBarrier7

//----- (000000000106D4C0) ----------------------------------------------------
// runtime.gcWriteBarrier7
void runtime_gcWriteBarrier7()
{
  gcWriteBarrier();
}

==================================================

// function name: internal_sync__ptr_HashTrieMap_go_shape_interface__comma_go_shape_interface___Range

//----- (0000000001078040) ----------------------------------------------------
// internal/sync.(*HashTrieMap[go.shape.interface {},go.shape.interface {}]).Range
__int64 __golang internal_sync__ptr_HashTrieMap_go_shape_interface__comma_go_shape_interface___Range(
        __int64 a1,
        __int64 a2,
        unsigned __int8 (__golang **a3)(_QWORD, _QWORD, _QWORD, _QWORD))
{
  __int64 v4; // [rsp+8h] [rbp+8h]
  __int64 v5; // [rsp+10h] [rbp+10h]
  unsigned __int8 (__golang **v6)(_QWORD, _QWORD, _QWORD, _QWORD); // [rsp+18h] [rbp+18h]

  if ( !*(_DWORD *)a1 )
  {
    v4 = a1;
    v5 = a2;
    v6 = a3;
    internal_sync__ptr_HashTrieMap_go_shape_interface__comma_go_shape_interface___initSlow(a1, **(_QWORD **)(a2 + 360));
    a1 = v4;
    a3 = v6;
    a2 = v5;
  }
  return internal_sync__ptr_HashTrieMap_go_shape_interface__comma_go_shape_interface___iter(
           a1,
           *(_QWORD *)(a2 + 360),
           *(_QWORD *)(a1 + 16),
           a3);
}

==================================================

// function name: runtime_pthread_cond_signal_trampoline

//----- (000000000106F1A0) ----------------------------------------------------
// runtime.pthread_cond_signal_trampoline
int __golang runtime_pthread_cond_signal_trampoline(__int64 a1, __int64 a2, __int64 a3, pthread_cond_t **a4)
{
  return pthread_cond_signal(*a4);
}

==================================================

// function name: runtime_settls

//----- (000000000106EEC0) ----------------------------------------------------
// runtime.settls
void runtime_settls()
{
  ;
}

==================================================

// function name: internal_poll__ptr_DeadlineExceededError_Error

// 1175F08: using guessed type __int64 internal_testlog_logger;

//----- (0000000001092B00) ----------------------------------------------------
// internal/poll.(*DeadlineExceededError).Error
string __golang internal_poll__ptr_DeadlineExceededError_Error(_ptr_poll_DeadlineExceededError a1)
{
  string result; // 0:rax.8,8:rbx.8

  result.ptr = "i/o timeout";
  result.len = 11;
  return result;
}

==================================================

// function name: runtime_goexit

// 106D3A0: using guessed type __int64 runtime_return0();

//----- (000000000106D3C0) ----------------------------------------------------
// runtime.goexit
void __golang __noreturn runtime_goexit(
        __int64 a1,
        __int64 a2,
        __int64 a3,
        __int64 a4,
        __int64 a5,
        __int64 a6,
        __int64 a7,
        __int64 a8,
        __int64 a9)
{
  runtime_goexit1_0(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

==================================================

// function name: runtime_args_0

//----- (000000000106FA80) ----------------------------------------------------
// runtime.args
__int64 __golang runtime_args_0(
        __int64 a1,
        __int64 a2,
        __int64 a3,
        __int64 a4,
        __int64 a5,
        __int64 a6,
        __int64 a7,
        __int64 a8,
        __int64 a9,
        unsigned int a10,
        __int64 a11)
{
  return runtime_args(a10, a11);
}

==================================================

// function name: runtime_pthread_mutex_init_trampoline

//----- (000000000106F0E0) ----------------------------------------------------
// runtime.pthread_mutex_init_trampoline
int __golang runtime_pthread_mutex_init_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
{
  return pthread_mutex_init(*(pthread_mutex_t **)a4, *(const pthread_mutexattr_t **)(a4 + 8));
}

==================================================

// function name: runtime_asmcgocall_0

// 106FB88: variable 'v10' is possibly undefined

//----- (000000000106FBE0) ----------------------------------------------------
// runtime.asmcgocall
__int64 __golang runtime_asmcgocall_0(
        __int64 (__fastcall *a1)(__int64),
        __int64 a2,
        __int64 a3,
        __int64 a4,
        __int64 a5,
        __int64 a6,
        __int64 a7,
        __int64 a8,
        __int64 a9)
{
  return *(unsigned int *)&runtime_asmcgocall((__int64)a1, a2, a3, a4, a5, a6, a7, a8, a9, a1, a2);
}

==================================================

// function name: runtime_panicSlice3Alen

//----- (000000000106D8C0) ----------------------------------------------------
// runtime.panicSlice3Alen
void __golang __noreturn runtime_panicSlice3Alen(
        __int64 a1,
        signed __int64 a2,
        __int64 a3,
        int a4,
        int a5,
        int a6,
        int a7,
        int a8,
        int a9)
{
  int64 v9; // rdx

  runtime_goPanicSlice3Alen(v9, a2, a3, a4, a5, a6, a7, a8, a9);
}

==================================================

// function name: runtime_check_0

// 1048480: using guessed type __int64 __golang runtime_args(_QWORD, _QWORD);

//----- (000000000106FAC0) ----------------------------------------------------
// runtime.check
void __golang __noreturn runtime_check_0(
        __int64 a1,
        __int64 a2,
        __int64 a3,
        __int64 a4,
        __int64 a5,
        __int64 a6,
        __int64 a7,
        __int64 a8,
        __int64 a9)
{
  runtime_check(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

==================================================

// function name: syscall_nametomib

// 10863C0: using guessed type retval_10863C0 __golang syscall_SysctlUint32(_QWORD, _QWORD);

//----- (0000000001086480) ----------------------------------------------------
// syscall.nametomib
retval_1086480 __golang syscall_nametomib(__int64 a1, __int64 a2)
{
  int v3; // r8d
  int v4; // r9d
  __int64 v5; // r10
  __int64 v6; // r11
  int v7; // edi
  int v8; // esi
  int v9; // r8d
  int v10; // r9d
  int v11; // r10d
  int v12; // r11d
  retval_10878C0 v13; // kr20_16
  __int64 v18; // [rsp+0h] [rbp-20h] BYREF
  unsigned __int64 v19; // [rsp+8h] [rbp-18h] BYREF
  _14_syscall__C_int *p__14_syscall__C_int; // [rsp+10h] [rbp-10h]
  retval_10861E0 v23; // 0:kr00_32.32
  retval_1086480 result; // 0:rax.8,8:rbx.8,16:rcx.8,24:rdi.16

  p__14_syscall__C_int = (_14_syscall__C_int *)runtime_newobject(&RTYPE__14_syscall__C_int);
  v19 = 48;
  v23 = syscall_ByteSliceFromString(a1, a2);
  result._r3 = v23._r3;
  if ( v23._r3 )
  {
    result._r0 = 0;
    result._r1 = 0;
    result._r2 = 0;
  }
  else
  {
    v18 = 0x300000000LL;
    if ( !v23._r1 )
      runtime_panicIndex(0, 0, 0, 0, result._r4, v3, v4, v5, v6);
    v13 = syscall_sysctl(&v18, 2, 2, (__int64)p__14_syscall__C_int, (__int64)&v19, v23._r0, a2, v5, v6);
    if ( v13._r0 )
    {
      result._r2 = 0;
      result._r3 = v13._r0;
      result._r4 = v13._r1;
      result._r0 = 0;
      result._r1 = 0;
    }
    else
    {
      if ( v19 >> 2 > 0xE )
        runtime_panicSliceAlenU(0, v13._r1, v19 >> 2, v7, v8, v9, v10, v11, v12);
      result._r0 = p__14_syscall__C_int;
      result._r1 = v19 >> 2;
      result._r2 = 14;
      result._r3 = 0;
      result._r4 = 0;
    }
  }
  return result;
}

==================================================

// function name: runtime_cgoSigtramp

// 106ED21: variable 'v5' is possibly undefined

//----- (000000000106ED60) ----------------------------------------------------
// runtime.cgoSigtramp
void __golang runtime_cgoSigtramp(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)
{
  __int64 v5; // rax
  __int64 v6; // r8

  v5 = runtime_cgoTraceback;
  if ( !runtime_cgoTraceback )
    goto LABEL_11;
  v5 = (__int64)_cgo_callers;
  if ( !_cgo_callers )
    goto LABEL_11;
  v5 = __readgsqword(0x30u);
  if ( v5 )
  {
    v5 = *(_QWORD *)(v5 + 48);
    if ( v5 )
    {
      a3 = *(unsigned int *)(v5 + 304);
      if ( (_DWORD)a3 )
      {
        a3 = *(_QWORD *)(v5 + 192);
        if ( a3 )
        {
          a3 = *(_QWORD *)(a3 + 112);
          if ( a3 )
          {
            v6 = *(_QWORD *)(v5 + 312);
            if ( v6 )
            {
              a3 = *(unsigned int *)(v5 + 308);
              if ( !(_DWORD)a3 )
              {
                _cgo_callers(_cgo_callers, a2, runtime_cgoTraceback, a4, a5, v6, runtime_sigtramp);
                return;
              }
            }
          }
        }
      }
    }
    goto LABEL_11;
  }
  if ( (_DWORD)a4 != 27
    || (a3 = 1, v5 = (unsigned int)_InterlockedCompareExchange(&runtime_sigprofCallersUse, 1, 0), (_DWORD)v5) )
  {
LABEL_11:
    runtime_sigtramp(v5, a2, a3, a4, a5);
    return;
  }
  _cgo_callers(_cgo_callers, a2, runtime_cgoTraceback, a4, a5, runtime_sigprofCallers, runtime_sigprofNonGoWrapper);
}

==================================================

// function name: internal_abi__ptr_Type_ExportedMethods

//----- (0000000001001120) ----------------------------------------------------
// internal/abi.(*Type).ExportedMethods
retval_1001120 __golang internal_abi__ptr_Type_ExportedMethods(__int64 a1)
{
  __int64 v1; // rdx
  __int64 v2; // rsi
  __int64 v3; // rdx
  retval_1001120 result; // 0:rax.8,8:rbx.8,16:rcx.8

  if ( (*(_BYTE *)(a1 + 20) & 1) != 0 )
  {
    switch ( *(_BYTE *)(a1 + 23) & 0x1F )
    {
      case 0x11:
        v1 = a1 + 72;
        break;
      case 0x12:
        v1 = a1 + 64;
        break;
      case 0x13:
        v1 = a1 + 56;
        break;
      case 0x14:
        v1 = a1 + 80;
        break;
      case 0x15:
        v1 = a1 + 112;
        break;
      case 0x16:
        v1 = a1 + 56;
        break;
      case 0x17:
        v1 = a1 + 56;
        break;
      case 0x19:
        v1 = a1 + 80;
        break;
      default:
        v1 = a1 + 48;
        break;
    }
  }
  else
  {
    v1 = 0;
  }
  if ( v1 )
  {
    v2 = *(unsigned __int16 *)(v1 + 6);
    if ( (_WORD)v2 )
    {
      v3 = *(unsigned int *)(v1 + 8) + v1;
    }
    else
    {
      v2 = 0;
      v3 = 0;
    }
    result._r0 = v3;
    result._r1 = v2;
    result._r2 = v2;
  }
  else
  {
    result._r0 = 0;
    result._r1 = 0;
    result._r2 = 0;
  }
  return result;
}

==================================================

// function name: runtime_fcntl_0

return *(unsigned int *)&runtime_asmcgocall((__int64)a1, a2, a3, a4, a5, a6, a7, a8, a9, a1, a2);

//----- (000000000106FC20) ----------------------------------------------------
// runtime.fcntl
retval_106FC20 __golang runtime_fcntl_0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9)
{
  unsigned int v11; // [rsp+10h] [rbp-8h]
  unsigned int v12; // [rsp+14h] [rbp-4h]
  retval_106FC20 result; // 0:rax.8,8:rbx.8

  runtime_fcntl(a1, a2, a3, a4, a5, a6, a7, a8, a9, a1, a2, a3);
  result._r0 = v11;
  result._r1 = v12;
  return result;
}

==================================================

// function name: runtime_sigpanic0

//----- (000000000106D3E0) ----------------------------------------------------
// runtime.sigpanic0
void __noreturn runtime_sigpanic0()
{
  runtime_sigpanic();
}

==================================================

// function name: runtime_sigpanic

// 10EAD40: using guessed type __int64 (__golang *off_10EAD40[2])();

//----- (0000000001067C60) ----------------------------------------------------
// runtime.sigpanic
void __golang __noreturn runtime_sigpanic()
{
  __int64 v0; // r14
  __int64 r0; // rax
  __int64 v2; // rcx
  __int64 r1; // rbx
  __int64 r3; // rdi
  __int64 r4; // rsi
  __int64 r5; // r8
  __int64 r6; // r9
  __int64 r7; // r10
  __int64 v9; // r11
  __int64 v10; // rcx
  __int64 v11; // rdx
  __int64 r2; // rcx
  RTYPE *v13; // rcx
  RTYPE *v14; // rcx
  __int64 *v15; // rax
  __int64 v16; // rax
  __int64 v17; // rax
  __int64 v18; // rcx
  __int64 v19; // rdi
  __int64 v20; // rsi
  __int64 v21; // r8
  __int64 v22; // r9
  __int64 v23; // r10
  __int64 v24; // r11
  RTYPE *v25; // rcx
  __int64 v26; // rdx
  unsigned __int64 v27; // rax
  unsigned __int64 v28; // rcx
  __int64 v29; // rcx
  __int64 v30; // rax
  __int64 v31; // rax
  __int64 v32; // rcx
  __int64 v33; // rdi
  __int64 v34; // rsi
  __int64 v35; // r8
  __int64 v36; // r9
  __int64 v37; // r10
  __int64 v38; // r11
  __int64 v39; // rax
  __int64 v40; // rax
  __int64 v41; // rcx
  __int64 *v42; // rax
  RTYPE *v43; // rcx
  __int64 v44; // rax
  unsigned __int64 v45; // [rsp+0h] [rbp-48h]
  uintptr v46; // [rsp+8h] [rbp-40h]
  uintptr v47; // [rsp+10h] [rbp-38h]
  __int64 v48; // [rsp+18h] [rbp-30h]
  runtime_errorAddressString v49; // 0:^38.24 BYREF
  runtime_errorAddressString v50; // 0:^38.24 BYREF
  retval_10665E0 v51; // 0:kr60_64.64
  retval_10665E0 v52; // 0:krE0_64.64
  retval_10665E0 v53; // 0:kr1A0_64.64
  retval_1033440 v54; // 0:kr220_80.80
  retval_1033440 v55; // 0:kr340_80.80

  r0 = runtime_canpanic();
  if ( (_BYTE)r0 )
  {
    v10 = v0;
    v11 = *(unsigned int *)(v0 + 228);
    if ( (_DWORD)v11 == 8 )
    {
      r2 = *(_QWORD *)(v0 + 256);
      if ( r2 != 7 )
      {
        if ( r2 != 8 )
        {
          runtime_panicCheck2("floating point error", 20);
          v13 = (RTYPE *)runtime_floatError;
          if ( runtime_floatError )
            v13 = runtime_floatError[1];
          runtime_gopanic(v13, off_1171278);
        }
        runtime_panicCheck2("integer overflow", 16);
        v14 = (RTYPE *)runtime_overflowError;
        if ( runtime_overflowError )
          v14 = runtime_overflowError[1];
        v51 = runtime_gopanic(v14, off_1171498);
        r0 = v51._r0;
        r1 = v51._r1;
        r2 = v51._r2;
        r3 = v51._r3;
        r4 = v51._r4;
        r5 = v51._r5;
        r6 = v51._r6;
        r7 = v51._r7;
      }
      runtime_panicdivide(r0, r1, r2, r3, r4, r5, r6, r7);
    }
    if ( (_DWORD)v11 == 10 )
    {
      if ( *(_QWORD *)(v0 + 256) != 2 || *(_QWORD *)(v0 + 264) >= 0x1000u )
      {
        if ( *(_BYTE *)(v0 + 189) )
        {
          v47 = *(_QWORD *)(v0 + 264);
          v54 = runtime_panicCheck2("invalid memory address or nil pointer dereference", 49);
          v49.msg.ptr = "invalid memory address or nil pointer dereference";
          v49.msg.len = 49;
          v49.addr = v47;
          v15 = runtime_convT(
                  (__int64 (**)(void))&RTYPE_runtime_errorAddressString,
                  (__int64)&v49,
                  v54._r9,
                  v47,
                  (void (__golang *)())v54._r3,
                  v54._r4,
                  v54._r5,
                  v54._r6,
                  v54._r7,
                  (__int64 *)v54._r8);
          v10 = runtime_gopanic(&RTYPE_runtime_errorAddressString, v15)._r2;
        }
        v48 = *(_QWORD *)(v10 + 264);
        runtime_printlock(v48);
        runtime_printstring("unexpected fault address ", 25);
        v16 = runtime_printhex(v48);
        v17 = runtime_printnl(v16);
        runtime_printunlock(v17);
        runtime_throw((__int64 (*)(void))"fault", (__int64 (*)(void))5, v18, v19, v20, v21, v22, v23, v24);
      }
      runtime_panicCheck2("invalid memory address or nil pointer dereference", 49);
      v25 = (RTYPE *)runtime_memoryError;
      if ( runtime_memoryError )
        v25 = runtime_memoryError[1];
      v52 = runtime_gopanic(v25, off_1171288);
      v10 = v52._r2;
      r3 = v52._r3;
      r4 = v52._r4;
      r5 = v52._r5;
      r6 = v52._r6;
      r7 = v52._r7;
    }
    if ( (_DWORD)v11 == 11 )
    {
      v26 = *(_QWORD *)(v10 + 256);
      if ( v26 )
        goto LABEL_39;
      while ( *(_QWORD *)(v10 + 264) < 0x1000u )
      {
LABEL_36:
        runtime_panicCheck2("invalid memory address or nil pointer dereference", 49);
        v43 = (RTYPE *)runtime_memoryError;
        if ( runtime_memoryError )
          v43 = runtime_memoryError[1];
        v10 = runtime_gopanic(v43, off_1171288)._r2;
LABEL_39:
        if ( v26 != 1 && v26 != 2 )
          break;
      }
      if ( !*(_BYTE *)(v10 + 189) )
      {
        v27 = *(_QWORD *)(v10 + 264);
        v28 = (v27 + 0x800000000000LL) >> 26;
        if ( v28 < 0x400000 )
        {
          v41 = *(_QWORD *)(qword_118F578 + 8 * v28);
          if ( v41 )
            v29 = *(_QWORD *)(v41 + ((v27 >> 10) & 0xFFF8));
          else
            v29 = 0;
        }
        else
        {
          v29 = 0;
        }
        v45 = v27;
        if ( v29 && *(_BYTE *)(v29 + 101) )
          goto LABEL_31;
        runtime_printlock(v27);
        runtime_printstring("unexpected fault address ", 25);
        v30 = runtime_printhex(v45);
        v31 = runtime_printnl(v30);
        runtime_printunlock(v31);
        while ( 1 )
        {
          v27 = runtime_throw((__int64 (*)(void))"fault", (__int64 (*)(void))5, v32, v33, v34, v35, v36, v37, v38);
LABEL_31:
          runtime_printlock(v27);
          runtime_printstring("accessed data from freed user arena ", 36);
          v39 = runtime_printhex(v45);
          v40 = runtime_printnl(v39);
          runtime_printunlock(v40);
        }
      }
      v46 = *(_QWORD *)(v10 + 264);
      v55 = runtime_panicCheck2("invalid memory address or nil pointer dereference", 49);
      v50.msg.ptr = "invalid memory address or nil pointer dereference";
      v50.msg.len = 49;
      v50.addr = v46;
      v42 = runtime_convT(
              (__int64 (**)(void))&RTYPE_runtime_errorAddressString,
              (__int64)&v50,
              v55._r9,
              v46,
              (void (__golang *)())v55._r3,
              v55._r4,
              v55._r5,
              v55._r6,
              v55._r7,
              (__int64 *)v55._r8);
      runtime_gopanic(&RTYPE_runtime_errorAddressString, v42);
      goto LABEL_36;
    }
    if ( (unsigned int)v11 >= 0x20 )
      runtime_throw((__int64 (*)(void))"unexpected signal value", (__int64 (*)(void))0x17, v10, r3, r4, r5, r6, r7, v9);
    v44 = runtime_convTstring(runtime_sigtable[3 * v11 + 1]);
    v53 = runtime_gopanic(&RTYPE_runtime_errorString, v44);
    v2 = v53._r2;
    r3 = v53._r3;
    r4 = v53._r4;
    r5 = v53._r5;
    r6 = v53._r6;
    r7 = v53._r7;
  }
  runtime_throw(
    (__int64 (*)(void))"unexpected signal during runtime execution",
    (__int64 (*)(void))0x2A,
    v2,
    r3,
    r4,
    r5,
    r6,
    r7,
    v9);
}

==================================================

// function name: runtime_raise_trampoline

return pthread_create(&v5, *(const pthread_attr_t **)a4, *(void *(__cdecl **)(void *))(a4 + 8), *(void **)(a4 + 16));

//----- (000000000106F0C0) ----------------------------------------------------
// runtime.raise_trampoline
int __golang runtime_raise_trampoline(__int64 a1, __int64 a2, __int64 a3, int *a4)
{
  return raise(*a4);
}

==================================================

// function name: runtime_munmap_trampoline

// 106EE53: variable 'v5' is possibly undefined

//----- (000000000106EE60) ----------------------------------------------------
// runtime.munmap_trampoline
int __golang runtime_munmap_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
{
  __int64 v4; // rax

  LODWORD(v4) = munmap(*(void **)a4, *(_QWORD *)(a4 + 8));
  if ( v4 )
    MEMORY[0xF1] = 241;
  return v4;
}

==================================================

// function name: runtime_pthread_kill_trampoline

// 106F1CC: variable 'v1' is possibly undefined

//----- (000000000106F1E0) ----------------------------------------------------
// runtime.pthread_kill_trampoline
int __golang runtime_pthread_kill_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
{
  return pthread_kill(*(pthread_t *)a4, *(_QWORD *)(a4 + 8));
}

==================================================

// function name: runtime_madvise_trampoline

//----- (000000000106EB20) ----------------------------------------------------
// runtime.madvise_trampoline
int __golang runtime_madvise_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
{
  return madvise(*(void **)a4, *(_QWORD *)(a4 + 8), *(_DWORD *)(a4 + 16));
}

==================================================

// function name: runtime_sigprofNonGo_0

//----- (000000000106FAE0) ----------------------------------------------------
// runtime.sigprofNonGo
__int64 __golang runtime_sigprofNonGo_0(
        __int64 a1,
        __int64 a2,
        __int64 a3,
        __int64 a4,
        __int64 a5,
        __int64 a6,
        __int64 a7,
        __int64 a8,
        __int64 a9,
        unsigned int a10,
        __int64 a11,
        __int64 a12)
{
  return runtime_sigprofNonGo(a10, a11, a12);
}

==================================================

// function name: runtime_badreflectcall_0

// 1038AC0: using guessed type void __golang __noreturn runtime_badmcall2(_QWORD);

//----- (000000000106F980) ----------------------------------------------------
// runtime.badreflectcall
void __noreturn runtime_badreflectcall_0()
{
  runtime_badreflectcall();
}

==================================================

// function name: debugCall32768

//----- (000000000106B1A0) ----------------------------------------------------
// debugCall32768
void __gostk debugCall32768(char a1)
{
  char **v1; // r12
  __int64 v2; // [rsp-8008h] [rbp-8008h] BYREF

  v1 = *(char ***)(__readgsqword(0x30u) + 32);
  if ( v1 && *v1 == &a1 )
    *v1 = (char *)&v2;
  __debugbreak();
  __debugbreak();
}

==================================================

// function name: debugCall1024

//----- (000000000106AF60) ----------------------------------------------------
// debugCall1024
void __gostk debugCall1024(char a1)
{
  char **v1; // r12
  __int64 v2; // [rsp-80h] [rbp-408h] BYREF

  v1 = *(char ***)(__readgsqword(0x30u) + 32);
  if ( v1 && *v1 == &a1 )
    *v1 = (char *)&v2;
  __debugbreak();
  __debugbreak();
}

==================================================

// function name: debugCall64

//----- (000000000106ADE0) ----------------------------------------------------
// debugCall64
void __gostk debugCall64(char a1)
{
  char **v1; // r12
  __int64 v2; // [rsp+0h] [rbp-40h] BYREF

  v1 = *(char ***)(__readgsqword(0x30u) + 32);
  if ( v1 && *v1 == &a1 )
    *v1 = (char *)&v2;
  __debugbreak();
  __debugbreak();
}

==================================================

// function name: debugCall16384

//----- (000000000106B120) ----------------------------------------------------
// debugCall16384
void __gostk debugCall16384(char a1)
{
  char **v1; // r12
  __int64 v2; // [rsp-4008h] [rbp-4008h] BYREF

  v1 = *(char ***)(__readgsqword(0x30u) + 32);
  if ( v1 && *v1 == &a1 )
    *v1 = (char *)&v2;
  __debugbreak();
  __debugbreak();
}

==================================================

// function name: debugCall32

// 106AD28: variable 'v7' is possibly undefined
// 106AD28: variable 'v8' is possibly undefined

//----- (000000000106AD80) ----------------------------------------------------
// debugCall32
void __gostk debugCall32(char a1)
{
  char **v1; // r12
  __int64 v2; // [rsp+0h] [rbp-20h] BYREF

  v1 = *(char ***)(__readgsqword(0x30u) + 32);
  if ( v1 && *v1 == &a1 )
    *v1 = (char *)&v2;
  __debugbreak();
  __debugbreak();
}

==================================================

// function name: runtime_asmcgocall_no_g

//----- (000000000106D120) ----------------------------------------------------
// runtime.asmcgocall_no_g
__int64 __golang runtime_asmcgocall_no_g(
        __int64 a1,
        __int64 a2,
        __int64 a3,
        __int64 a4,
        __int64 a5,
        __int64 a6,
        __int64 a7,
        __int64 a8,
        __int64 a9,
        __int64 (__fastcall *a10)(__int64, __int64, _QWORD *, __int64),
        __int64 a11)
{
  _QWORD v12[4]; // [rsp+0h] [rbp-20h] BYREF

  v12[1] = v12;
  return a10(a11, a5, v12, a11);
}

==================================================

// function name: debugCall8192

//----- (000000000106B0A0) ----------------------------------------------------
// debugCall8192
void __gostk debugCall8192(char a1)
{
  char **v1; // r12
  __int64 v2; // [rsp-2008h] [rbp-2008h] BYREF

  v1 = *(char ***)(__readgsqword(0x30u) + 32);
  if ( v1 && *v1 == &a1 )
    *v1 = (char *)&v2;
  __debugbreak();
  __debugbreak();
}

==================================================

// function name: debugCall4096

//----- (000000000106B020) ----------------------------------------------------
// debugCall4096
void __gostk debugCall4096(char a1)
{
  char **v1; // r12
  __int64 v2; // [rsp-1008h] [rbp-1008h] BYREF

  v1 = *(char ***)(__readgsqword(0x30u) + 32);
  if ( v1 && *v1 == &a1 )
    *v1 = (char *)&v2;
  __debugbreak();
  __debugbreak();
}

==================================================

// function name: runtime_spillArgs

//----- (000000000106B6A0) ----------------------------------------------------
// runtime.spillArgs
__int64 __golang runtime_spillArgs(
        __int64 result,
        __int64 a2,
        __int64 a3,
        __int64 a4,
        __int64 a5,
        __int64 a6,
        __int64 a7,
        __int64 a8,
        __int64 a9,
        double a10,
        double a11,
        double a12,
        double a13,
        double a14,
        double a15,
        double a16,
        double a17,
        double a18,
        double a19,
        double a20,
        double a21,
        double a22,
        double a23,
        double a24)
{
  __int64 v24; // r12

  *(_QWORD *)v24 = result;
  *(_QWORD *)(v24 + 8) = a2;
  *(_QWORD *)(v24 + 16) = a3;
  *(_QWORD *)(v24 + 24) = a4;
  *(_QWORD *)(v24 + 32) = a5;
  *(_QWORD *)(v24 + 40) = a6;
  *(_QWORD *)(v24 + 48) = a7;
  *(_QWORD *)(v24 + 56) = a8;
  *(_QWORD *)(v24 + 64) = a9;
  *(double *)(v24 + 72) = a10;
  *(double *)(v24 + 80) = a11;
  *(double *)(v24 + 88) = a12;
  *(double *)(v24 + 96) = a13;
  *(double *)(v24 + 104) = a14;
  *(double *)(v24 + 112) = a15;
  *(double *)(v24 + 120) = a16;
  *(double *)(v24 + 128) = a17;
  *(double *)(v24 + 136) = a18;
  *(double *)(v24 + 144) = a19;
  *(double *)(v24 + 152) = a20;
  *(double *)(v24 + 160) = a21;
  *(double *)(v24 + 168) = a22;
  *(double *)(v24 + 176) = a23;
  *(double *)(v24 + 184) = a24;
  return result;
}

==================================================

// function name: debugCall65536

//----- (000000000106B220) ----------------------------------------------------
// debugCall65536
void __gostk debugCall65536(char a1)
{
  char **v1; // r12
  __int64 v2; // [rsp-10008h] [rbp-10008h] BYREF

  v1 = *(char ***)(__readgsqword(0x30u) + 32);
  if ( v1 && *v1 == &a1 )
    *v1 = (char *)&v2;
  __debugbreak();
  __debugbreak();
}

==================================================

// function name: debugCall512

//----- (000000000106AF00) ----------------------------------------------------
// debugCall512
void __gostk debugCall512(char a1)
{
  char **v1; // r12
  __int64 v2; // [rsp-80h] [rbp-208h] BYREF

  v1 = *(char ***)(__readgsqword(0x30u) + 32);
  if ( v1 && *v1 == &a1 )
    *v1 = (char *)&v2;
  __debugbreak();
  __debugbreak();
}

==================================================

// function name: debugCall128

//----- (000000000106AE40) ----------------------------------------------------
// debugCall128
void __gostk debugCall128(char a1)
{
  char **v1; // r12
  __int64 v2; // [rsp-80h] [rbp-88h] BYREF

  v1 = *(char ***)(__readgsqword(0x30u) + 32);
  if ( v1 && *v1 == &a1 )
    *v1 = (char *)&v2;
  __debugbreak();
  __debugbreak();
}

==================================================

// function name: runtime_reflectcall

// 106B760: variable 'v0' is possibly undefined

//----- (000000000106B820) ----------------------------------------------------
// runtime.reflectcall
__int64 __golang runtime_reflectcall(
        __int64 a1,
        __int64 a2,
        __int64 a3,
        __int64 a4,
        __int64 a5,
        __int64 a6,
        __int64 a7,
        __int64 a8,
        __int64 a9,
        __int64 a10,
        retval_106BA60 (__golang **a11)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double),
        const void *a12,
        __int64 a13,
        __int64 a14,
        __int64 a15)
{
  if ( (unsigned int)a14 <= 0x10uLL )
    return runtime_call16(
             (__int64)runtime_call16,
             a2,
             (unsigned int)a14,
             a4,
             a5,
             a6,
             a7,
             a8,
             a9,
             a10,
             a11,
             a12,
             a13,
             HIDWORD(a13));
  if ( (unsigned int)a14 <= 0x20uLL )
    return runtime_call32(
             (__int64)runtime_call32,
             a2,
             (unsigned int)a14,
             a4,
             a5,
             a6,
             a7,
             a8,
             a9,
             a10,
             a11,
             a12,
             a13,
             HIDWORD(a13));
  if ( (unsigned int)a14 <= 0x40uLL )
    return runtime_call64(
             (__int64)runtime_call64,
             a2,
             (unsigned int)a14,
             a4,
             a5,
             a6,
             a7,
             a8,
             a9,
             a10,
             a11,
             a12,
             a13,
             HIDWORD(a13));
  if ( (unsigned int)a14 <= 0x80uLL )
    return runtime_call128(
             (__int64)runtime_call128,
             a2,
             (unsigned int)a14,
             a4,
             a5,
             a6,
             a7,
             a8,
             a9,
             a10,
             a11,
             a12,
             a13,
             HIDWORD(a13));
  if ( (unsigned int)a14 <= 0x100uLL )
    return runtime_call256(
             (__int64)runtime_call256,
             a2,
             (unsigned int)a14,
             a4,
             a5,
             a6,
             a7,
             a8,
             a9,
             a10,
             a11,
             a12,
             a13,
             HIDWORD(a13));
  if ( (unsigned int)a14 <= 0x200uLL )
    return runtime_call512(
             (__int64)runtime_call512,
             a2,
             (unsigned int)a14,
             a4,
             a5,
             a6,
             a7,
             a8,
             a9,
             a10,
             a11,
             a12,
             a13,
             HIDWORD(a13));
  if ( (unsigned int)a14 <= 0x400uLL )
    return runtime_call1024(
             (__int64)runtime_call1024,
             a2,
             (unsigned int)a14,
             a4,
             a5,
             a6,
             a7,
             a8,
             a9,
             a10,
             a11,
             a12,
             a13,
             HIDWORD(a13));
  if ( (unsigned int)a14 <= 0x800uLL )
    return runtime_call2048(
             (__int64)runtime_call2048,
             a2,
             (unsigned int)a14,
             a4,
             a5,
             a6,
             a7,
             a8,
             a9,
             a10,
             a11,
             a12,
             a13,
             HIDWORD(a13));
  if ( (unsigned int)a14 <= 0x1000uLL )
    return runtime_call4096(
             (__int64)runtime_call4096,
             a2,
             (unsigned int)a14,
             a4,
             a5,
             a6,
             a7,
             a8,
             a9,
             a10,
             a11,
             a12,
             a13,
             HIDWORD(a13));
  if ( (unsigned int)a14 <= 0x2000uLL )
    return runtime_call8192(
             (__int64)runtime_call8192,
             a2,
             (unsigned int)a14,
             a4,
             a5,
             a6,
             a7,
             a8,
             a9,
             a10,
             a11,
             a12,
             a13,
             HIDWORD(a13));
  if ( (unsigned int)a14 <= 0x4000uLL )
    return runtime_call16384(
             (__int64)runtime_call16384,
             a2,
             (unsigned int)a14,
             a4,
             a5,
             a6,
             a7,
             a8,
             a9,
             a10,
             a11,
             a12,
             a13,
             HIDWORD(a13));
  if ( (unsigned int)a14 <= 0x8000uLL )
    return runtime_call32768(
             (__int64)runtime_call32768,
             a2,
             (unsigned int)a14,
             a4,
             a5,
             a6,
             a7,
             a8,
             a9,
             a10,
             a11,
             a12,
             a13,
             HIDWORD(a13));
  if ( (unsigned int)a14 <= 0x10000uLL )
    return runtime_call65536(
             (__int64)runtime_call65536,
             a2,
             (unsigned int)a14,
             a4,
             a5,
             a6,
             a7,
             a8,
             a9,
             a10,
             a11,
             a12,
             a13,
             HIDWORD(a13));
  if ( (unsigned int)a14 <= 0x20000uLL )
    return runtime_call131072(
             (__int64)runtime_call131072,
             a2,
             (unsigned int)a14,
             a4,
             a5,
             a6,
             a7,
             a8,
             a9,
             a10,
             a11,
             a12,
             a13,
             HIDWORD(a13));
  if ( (unsigned int)a14 <= 0x40000uLL )
    return runtime_call262144(
             (__int64)runtime_call262144,
             a2,
             (unsigned int)a14,
             a4,
             a5,
             a6,
             a7,
             a8,
             a9,
             a10,
             a11,
             a12,
             a13,
             HIDWORD(a13));
  if ( (unsigned int)a14 <= 0x80000uLL )
    return runtime_call524288(
             (__int64)runtime_call524288,
             a2,
             (unsigned int)a14,
             a4,
             a5,
             a6,
             a7,
             a8,
             a9,
             a10,
             a11,
             a12,
             a13,
             HIDWORD(a13));
  if ( (unsigned int)a14 <= 0x100000uLL )
    return runtime_call1048576(
             (unsigned int)runtime_call1048576,
             a2,
             a14,
             a4,
             a5,
             a6,
             a7,
             a8,
             a9,
             a10,
             (__int64)a11,
             (__int64)a12,
             a13,
             HIDWORD(a13),
             a14,
             a15);
  if ( (unsigned int)a14 <= 0x200000uLL )
    return runtime_call2097152(
             (unsigned int)runtime_call2097152,
             a2,
             a14,
             a4,
             a5,
             a6,
             a7,
             a8,
             a9,
             a10,
             (__int64)a11,
             (__int64)a12,
             a13,
             HIDWORD(a13),
             a14,
             a15);
  if ( (unsigned int)a14 <= 0x400000uLL )
    return runtime_call4194304(
             (unsigned int)runtime_call4194304,
             a2,
             a14,
             a4,
             a5,
             a6,
             a7,
             a8,
             a9,
             a10,
             (__int64)a11,
             (__int64)a12,
             a13,
             HIDWORD(a13),
             a14,
             a15);
  if ( (unsigned int)a14 <= 0x800000uLL )
    return runtime_call8388608(
             (unsigned int)runtime_call8388608,
             a2,
             a14,
             a4,
             a5,
             a6,
             a7,
             a8,
             a9,
             a10,
             (__int64)a11,
             (__int64)a12,
             a13,
             HIDWORD(a13),
             a14,
             a15);
  if ( (unsigned int)a14 <= (unsigned __int64)&dword_1000000 )
    return runtime_call16777216(
             (unsigned int)runtime_call16777216,
             a2,
             a14,
             a4,
             a5,
             a6,
             a7,
             a8,
             a9,
             a10,
             (__int64)a11,
             (__int64)a12,
             a13,
             HIDWORD(a13),
             a14,
             a15);
  if ( (unsigned int)a14 <= 0x2000000uLL )
    return runtime_call33554432(
             (unsigned int)runtime_call33554432,
             a2,
             a14,
             a4,
             a5,
             a6,
             a7,
             a8,
             a9,
             a10,
             (__int64)a11,
             (__int64)a12,
             a13,
             HIDWORD(a13),
             a14,
             a15);
  if ( (unsigned int)a14 <= 0x4000000uLL )
    return runtime_call67108864(
             (unsigned int)runtime_call67108864,
             a2,
             a14,
             a4,
             a5,
             a6,
             a7,
             a8,
             a9,
             a10,
             (__int64)a11,
             (__int64)a12,
             a13,
             HIDWORD(a13),
             a14,
             a15);
  if ( (unsigned int)a14 <= 0x8000000uLL )
    return runtime_call134217728(
             (unsigned int)runtime_call134217728,
             a2,
             a14,
             a4,
             a5,
             a6,
             a7,
             a8,
             a9,
             a10,
             (__int64)a11,
             (__int64)a12,
             a13,
             HIDWORD(a13),
             a14,
             a15);
  if ( (unsigned int)a14 <= 0x10000000uLL )
    return runtime_call268435456(
             (unsigned int)runtime_call268435456,
             a2,
             a14,
             a4,
             a5,
             a6,
             a7,
             a8,
             a9,
             a10,
             (__int64)a11,
             (__int64)a12,
             a13,
             HIDWORD(a13),
             a14,
             a15);
  if ( (unsigned int)a14 <= 0x20000000uLL )
    return runtime_call536870912(
             (unsigned int)runtime_call536870912,
             a2,
             a14,
             a4,
             a5,
             a6,
             a7,
             a8,
             a9,
             a10,
             (__int64)a11,
             (__int64)a12,
             a13,
             HIDWORD(a13),
             a14,
             a15);
  if ( (unsigned int)a14 > 0x40000000uLL )
    runtime_badreflectcall_0();
  return runtime_call1073741824(
           (unsigned int)runtime_call1073741824,
           a2,
           a14,
           a4,
           a5,
           a6,
           a7,
           a8,
           a9,
           a10,
           (__int64)a11,
           (__int64)a12,
           a13,
           HIDWORD(a13),
           a14,
           a15);
}

==================================================

// function name: gogo

// 1196190: using guessed type int runtime_writeBarrier;
// 1196544: using guessed type char byte_1196544;

//----- (000000000106A660) ----------------------------------------------------
// gogo
__int64 __golang gogo(__int64 a1, __int64 a2)
{
  unsigned __int64 v2; // rdx
  __int64 v3; // rax

  __writegsqword(0x30u, v2);
  v3 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  return (*(__int64 (__golang **)(__int64))(a2 + 8))(v3);
}

==================================================

// function name: runtime_traceLocker_GCSweepSpan

//----- (000000000105D2A0) ----------------------------------------------------
// runtime.traceLocker.GCSweepSpan
__int64 __golang runtime_traceLocker_GCSweepSpan(
        __int64 result,
        unsigned __int64 a2,
        __int64 a3,
        __int64 a4,
        __int64 a5,
        __int64 a6,
        __int64 a7,
        __int64 a8,
        __int64 a9)
{
  __int64 v9; // rdx
  retval_105C160 v10; // kr00_16
  __int64 v11; // rdi
  __int64 v12; // rsi
  __int64 v13; // r8
  __int64 v14; // r9
  unsigned __int64 v15; // r10
  __int64 v16; // r11
  __int64 v17; // r9
  __int64 v18; // r10
  __int64 v19; // r11
  _QWORD v21[2]; // [rsp+10h] [rbp-20h] BYREF
  __int64 v22; // [rsp+20h] [rbp-10h]
  __int64 v23; // [rsp+48h] [rbp+18h]

  v9 = *(_QWORD *)(result + 208);
  if ( *(_BYTE *)(v9 + 4600) )
  {
    if ( !*(_QWORD *)(v9 + 4608) )
    {
      v23 = a3;
      v22 = *(_QWORD *)(result + 208);
      v10 = runtime_traceLocker_eventWriter(result, a2, 2u, 1u, a5, a6, a7, a8, a9);
      v21[1] = v10._r0;
      v21[0] = runtime_traceStack(1, 0, a2, v11, v12, v13, v14, v15, v16);
      result = runtime_traceEventWriter_event(v10._r0, v10._r1, 32, (__int64)v21, 1, 1, v17, v18, v19);
      v9 = v22;
      *(_BYTE *)(v22 + 4601) = 1;
      a3 = v23;
    }
    *(_QWORD *)(v9 + 4608) += a3;
  }
  return result;
}

==================================================

// function name: runtime_memclrHasPointers

// 10133C0: using guessed type __int64 __golang runtime_typedmemclr(_QWORD, _QWORD);

//----- (0000000001065B20) ----------------------------------------------------
// runtime.memclrHasPointers
__int64 __golang runtime_memclrHasPointers(
        _OWORD *a1,
        unsigned __int64 a2,
        __int64 a3,
        __int64 a4,
        __int64 a5,
        __int64 a6,
        __int64 a7,
        __int64 a8,
        _QWORD *a9)
{
  double v9; // xmm0_8

  runtime_bulkBarrierPreWrite((unsigned __int64)a1, 0, a2, 0, a5, a6, a7, a8, a9);
  return runtime_memclrNoHeapPointers(a1, a2, v9);
}

==================================================

// function name: runtime_bulkBarrierPreWrite

// 1033B40: using guessed type void __golang __noreturn runtime_panicdivide(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

//----- (00000000010139E0) ----------------------------------------------------
// runtime.bulkBarrierPreWrite
unsigned __int64 __golang runtime_bulkBarrierPreWrite(
        unsigned __int64 result,
        __int64 a2,
        unsigned __int64 a3,
        __int64 a4,
        __int64 a5,
        __int64 a6,
        __int64 a7,
        __int64 a8,
        _QWORD *a9)
{
  __int64 v9; // r14
  unsigned __int64 v10; // rdx
  __int64 v11; // rdx
  __int64 v12; // rdx
  __int64 v13; // r8
  __int64 v14; // rdx
  __int64 i; // rsi
  __int64 v16; // rsi
  __int64 v17; // r9
  _QWORD *v18; // r10
  __int64 v19; // r11
  _QWORD *v20; // r12
  _QWORD *r4; // r8
  __int64 v22; // rsi
  __int64 *v23; // r8
  __int64 v24; // r9
  __int64 v25; // rdx
  unsigned __int64 v26; // r8
  _QWORD *v27; // r9
  unsigned __int64 v28; // r10
  __int64 v29; // r8
  __int64 v30; // rdx
  __int64 j; // rsi
  _QWORD *v32; // r9
  unsigned __int64 v33; // r10
  __int64 r1; // rbx
  unsigned __int64 r2; // rcx
  __int64 r3; // rdi
  __int64 *v37; // rsi
  _QWORD *v38; // [rsp+40h] [rbp-20h]
  __int64 v39; // [rsp+58h] [rbp-8h]
  unsigned __int64 v40; // [rsp+70h] [rbp+10h]
  retval_1013580 v43; // 0:kr00_32.32
  retval_1013420 v44; // 0:kr20_32.32
  retval_1013600 v45; // 0:kr60_40.40
  retval_1013600 v46; // 0:krA8_40.40

  if ( (((unsigned __int8)a3 | (unsigned __int8)(result | a2)) & 7) != 0 )
  {
    runtime_throw(
      (__int64 (*)(void))"bulkBarrierPreWrite: unaligned arguments",
      (__int64 (*)(void))0x28,
      a3,
      a4,
      a5,
      a6,
      a7,
      a8,
      (__int64)a9);
    JUMPOUT(0x1013D26);
  }
  if ( (_BYTE)runtime_writeBarrier )
  {
    v10 = (result + 0x800000000000LL) >> 26;
    if ( v10 < 0x400000 )
    {
      a6 = qword_118F578;
      v12 = *(_QWORD *)(qword_118F578 + 8 * v10);
      if ( v12 )
      {
        a6 = (result >> 10) & 0xFFF8;
        v11 = *(_QWORD *)(v12 + a6);
      }
      else
      {
        v11 = 0;
      }
    }
    else
    {
      v11 = 0;
    }
    if ( v11 )
    {
      if ( *(_BYTE *)(v11 + 99) == 1 && *(_QWORD *)(v11 + 24) <= result && *(_QWORD *)(v11 + 112) > result )
      {
        v40 = result;
        v16 = *(_QWORD *)(*(_QWORD *)(v9 + 48) + 208LL);
        v39 = v16;
        if ( a4 )
        {
          v43 = runtime__ptr_mspan_typePointersOfType(
                  v11,
                  a4,
                  (__int64 (*)(void))result,
                  a4,
                  v16,
                  a6,
                  a7,
                  a8,
                  (__int64)a9);
          result = v43._r0;
          r1 = v43._r1;
          r2 = v43._r2;
          r3 = v43._r3;
        }
        else
        {
          v44 = runtime__ptr_mspan_typePointersOf(v11, (__int64 *)result, a3, 0, v16, a6, a7, a8, (__int64)a9);
          result = v44._r0;
          r1 = v44._r1;
          r2 = v44._r2;
          r3 = v44._r3;
        }
        if ( a2 )
        {
          while ( 1 )
          {
            v45 = runtime_typePointers_next((__int64 (*)(void))result, r1, r2, r3, a3 + v40, a3, v17, (__int64)v18, v19);
            result = v45._r0;
            r1 = v45._r1;
            r2 = v45._r2;
            r3 = v45._r3;
            if ( !v45._r4 )
              break;
            r4 = (_QWORD *)v45._r4;
            v22 = v45._r4 - v40;
            v17 = a2;
            v18 = (_QWORD *)(a2 + v45._r4 - v40);
            v19 = v39;
            if ( *(_QWORD *)(v39 + 4728) < (unsigned __int64)(*(_QWORD *)(v39 + 4720) + 16LL) )
            {
              v38 = (_QWORD *)(a2 + v22);
              runtime_wbBufFlush(v45._r0, v45._r1, v45._r2, v45._r3, v22, v45._r4, a2, (__int64)v18, v39);
              result = v45._r0;
              r2 = v45._r2;
              r1 = v45._r1;
              r3 = v45._r3;
              r4 = (_QWORD *)v45._r4;
              v17 = a2;
              v18 = v38;
              v19 = v39;
            }
            v20 = *(_QWORD **)(v19 + 4720);
            *(_QWORD *)(v19 + 4720) = v20 + 2;
            *v20 = *r4;
            v20[1] = *v18;
          }
        }
        else
        {
          while ( 1 )
          {
            v46 = runtime_typePointers_next((__int64 (*)(void))result, r1, r2, r3, a3 + v40, a3, v17, (__int64)v18, v19);
            result = v46._r0;
            r1 = v46._r1;
            r2 = v46._r2;
            r3 = v46._r3;
            v37 = (__int64 *)v46._r4;
            if ( !v46._r4 )
              break;
            v25 = v39;
            v26 = *(_QWORD *)(v39 + 4720) + 8LL;
            if ( *(_QWORD *)(v39 + 4728) < v26 )
            {
              runtime_wbBufFlush(v46._r0, v46._r1, v46._r2, v46._r3, v46._r4, v26, v24, (__int64)v18, v19);
              result = v46._r0;
              r2 = v46._r2;
              v25 = v39;
              r1 = v46._r1;
              v37 = (__int64 *)v46._r4;
              r3 = v46._r3;
            }
            v23 = *(__int64 **)(v25 + 4720);
            *(_QWORD *)(v25 + 4720) = v23 + 1;
            v17 = *v37;
            *v23 = *v37;
          }
        }
      }
    }
    else
    {
      if ( runtime_modulesSlice )
      {
        v13 = *(_QWORD *)runtime_modulesSlice;
        v14 = *(_QWORD *)(runtime_modulesSlice + 8);
      }
      else
      {
        v14 = 0;
        v13 = 0;
      }
      for ( i = 0; v14 > i; ++i )
      {
        v27 = *(_QWORD **)(v13 + 8 * i);
        v28 = v27[26];
        if ( result >= v28 && v27[27] > result )
          return runtime_bulkBarrierBitmap(result, a2, a3, result - v28, v27[68], v13, (__int64)v27, v28, a9);
      }
      if ( runtime_modulesSlice )
      {
        v29 = *(_QWORD *)runtime_modulesSlice;
        v30 = *(_QWORD *)(runtime_modulesSlice + 8);
      }
      else
      {
        v30 = 0;
        v29 = 0;
      }
      for ( j = 0; v30 > j; ++j )
      {
        v32 = *(_QWORD **)(v29 + 8 * j);
        v33 = v32[28];
        if ( result >= v33 && v32[29] > result )
          return runtime_bulkBarrierBitmap(result, a2, a3, result - v33, v32[70], v29, (__int64)v32, v33, a9);
      }
    }
  }
  return result;
}

==================================================

// function name: internal_sync_runtime_SemacquireMutex

//----- (0000000001067A00) ----------------------------------------------------
// internal/sync.runtime_SemacquireMutex
retval_1067A00 __golang internal_sync_runtime_SemacquireMutex(__int64 a1, __int64 a2, __int64 a3)
{
  retval_1049920 v12; // 0:kr40_72.72
  retval_1067A00 result; // 0:rax.8,8:rbx.8,16:rcx.8,24:rdi.48

  v12 = runtime_semacquire1(a1, a2, 3, a3, 21);
  result._r0 = v12._r0;
  result._r1 = v12._r1;
  result._r2 = v12._r2;
  result._r3 = v12._r3;
  result._r4 = v12._r4;
  result._r5 = v12._r5;
  result._r6 = v12._r6;
  result._r7 = v12._r7;
  result._r8 = v12._r8;
  return result;
}

==================================================

// function name: sync_runtime_SemacquireRWMutexR

// 1049920: using guessed type retval_1049920 __golang runtime_semacquire1(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

//----- (0000000001067A60) ----------------------------------------------------
// sync.runtime_SemacquireRWMutexR
retval_1067A60 __golang sync_runtime_SemacquireRWMutexR(__int64 a1, __int64 a2, __int64 a3)
{
  retval_1049920 v12; // 0:kr40_72.72
  retval_1067A60 result; // 0:rax.8,8:rbx.8,16:rcx.8,24:rdi.48

  v12 = runtime_semacquire1(a1, a2, 3, a3, 22);
  result._r0 = v12._r0;
  result._r1 = v12._r1;
  result._r2 = v12._r2;
  result._r3 = v12._r3;
  result._r4 = v12._r4;
  result._r5 = v12._r5;
  result._r6 = v12._r6;
  result._r7 = v12._r7;
  result._r8 = v12._r8;
  return result;
}

==================================================

// function name: runtime_rand

//----- (00000000010672E0) ----------------------------------------------------
// runtime.rand
__int64 __golang runtime_rand()
{
  __int64 v0; // r14
  _DWORD *v1; // rax
  chacha8rand_State *v2; // rcx
  unsigned int v3; // edx
  _DWORD *v5; // [rsp+8h] [rbp-10h]
  chacha8rand_State *i; // [rsp+10h] [rbp-8h]

  v1 = *(_DWORD **)(v0 + 48);
  v5 = v1;
  v2 = (chacha8rand_State *)(v1 + 356);
  for ( i = (chacha8rand_State *)(v1 + 356); ; v2 = i )
  {
    v3 = v1[428];
    if ( v1[429] > v3 )
      break;
    ++v1[66];
    internal_chacha8rand__ptr_State_Refill(v2);
    v1 = v5;
    --v5[66];
  }
  v1[428] = v3 + 1;
  return *(_QWORD *)&v1[2 * (v3 & 0x1F) + 356];
}

==================================================

// function name: sync_runtime_Semrelease

// 1049920: using guessed type retval_1049920 __golang runtime_semacquire1(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

//----- (00000000010679C0) ----------------------------------------------------
// sync.runtime_Semrelease
__int64 __golang sync_runtime_Semrelease(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9)
{
  return runtime_semrelease1(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

==================================================

// function name: runtime_entersyscallblock

// 1049480: using guessed type retval_1049480 __golang runtime_getcallerfp();

//----- (0000000001066D60) ----------------------------------------------------
// runtime.entersyscallblock
__int64 __golang runtime_entersyscallblock(
        __int64 a1,
        __int64 a2,
        __int64 a3,
        __int64 a4,
        __int64 a5,
        __int64 a6,
        __int64 a7,
        __int64 a8,
        __int64 a9,
        char a10)
{
  __int64 v10; // r14
  __int64 v11; // rdi
  __int64 v12; // rsi
  __int64 v13; // r8
  __int64 v14; // r9
  __int64 v15; // r10
  __int64 v16; // r11
  __int64 v17; // rax
  __int64 (*v18)(void); // rcx
  __int64 (*v19)(void); // rdx
  __int64 v20; // rcx
  __int64 v21; // rbx
  __int64 v22; // rdi
  __int64 v23; // r8
  __int64 v24; // r9
  __int64 v25; // r10
  __int64 v26; // r11
  unsigned __int64 *v27; // rdx
  unsigned __int64 v28; // rsi
  unsigned __int64 v29; // rax
  __int64 result; // rax
  void (__golang __noreturn *v31)(); // [rsp+38h] [rbp-40h] BYREF
  char *r0; // [rsp+40h] [rbp-38h]
  _QWORD *v33; // [rsp+48h] [rbp-30h]
  __int64 (*v34[5])(void); // [rsp+50h] [rbp-28h] BYREF
  __int64 retaddr; // [rsp+80h] [rbp+8h]
  retval_1049480 v36; // 0:kr40_72.72
  retval_1049480 v37; // 0:krC8_72.72

  ++*(_DWORD *)(*(_QWORD *)(v10 + 48) + 264LL);
  *(_BYTE *)(v10 + 191) = 1;
  *(_QWORD *)(v10 + 16) = -1314;
  *(_DWORD *)(*(_QWORD *)(v10 + 48) + 740LL) = (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 48) + 208LL) + 20LL))++;
  v36 = runtime_getcallerfp();
  runtime_save(retaddr, (__int64)&a10, v36._r0, v36._r3, v36._r4, v36._r5, v36._r6, v36._r7, v36._r8);
  v17 = v10;
  v18 = *(__int64 (**)(void))(v10 + 56);
  *(_QWORD *)(v10 + 112) = v18;
  *(_QWORD *)(v10 + 120) = *(_QWORD *)(v10 + 64);
  *(_QWORD *)(v10 + 128) = *(_QWORD *)(v10 + 104);
  if ( *(_QWORD *)v10 > (unsigned __int64)v18 || *(_QWORD *)(v10 + 8) < (unsigned __int64)v18 )
  {
    v19 = *(__int64 (**)(void))(v10 + 56);
    v34[0] = (__int64 (*)(void))runtime_entersyscallblock_func1;
    v34[1] = (__int64 (*)(void))&a10;
    v34[2] = v19;
    v34[3] = v18;
    v34[4] = (__int64 (*)(void))v10;
    runtime_systemstack((__int64)v34, (__int64)&a10, (__int64)v18, v11, v12, v13, v14, v15, v16, v34);
    v17 = v10;
  }
  runtime_casgstatus(v17, 2, 3, v11, v12, v13, v14, v15, v16);
  v27 = (unsigned __int64 *)v10;
  v28 = *(_QWORD *)(v10 + 112);
  if ( *(_QWORD *)v10 > v28 || *(_QWORD *)(v10 + 8) < v28 )
  {
    v31 = runtime_entersyscallblock_func2;
    r0 = &a10;
    v33 = (_QWORD *)v10;
    runtime_systemstack((__int64)&v31, v21, v20, v22, v28, v23, v24, v25, v26, (__int64 (**)(void))&v31);
    v27 = (unsigned __int64 *)v10;
  }
  v29 = v27[16];
  if ( v29 && *v27 > v29 || v27[1] < v29 )
  {
    v31 = runtime_entersyscallblock_func3;
    r0 = (char *)v36._r0;
    v33 = v27;
    runtime_systemstack((__int64)&v31, v21, v20, v22, v28, v23, v24, v25, v26, (__int64 (**)(void))&v31);
  }
  runtime_systemstack((__int64)off_10EAA48, v21, v20, v22, v28, v23, v24, v25, v26, (__int64 (**)(void))off_10EAA48);
  v37 = runtime_getcallerfp();
  runtime_save(retaddr, (__int64)&a10, v37._r0, v37._r3, v37._r4, v37._r5, v37._r6, v37._r7, v37._r8);
  result = *(_QWORD *)(v10 + 48);
  --*(_DWORD *)(result + 264);
  return result;
}

==================================================

// function name: runtime_getcallerfp

// 1172D40: using guessed type __int64 runtime_waitReasonStrings[2];

//----- (0000000001049480) ----------------------------------------------------
// runtime.getcallerfp
__int64 runtime_getcallerfp()
{
  __int64 result; // rax

  result = runtime_getfp();
  if ( result )
    return **(_QWORD **)result;
  return result;
}

==================================================

// function name: runtime_getitab

//----- (00000000010650A0) ----------------------------------------------------
// runtime.getitab
__int64 __golang runtime_getitab(
        __int64 a1,
        abi_Type *a2,
        __int64 a3,
        __int64 a4,
        __int64 a5,
        __int64 a6,
        __int64 a7,
        __int64 a8,
        __int64 a9)
{
  __int64 result; // rax
  __int64 v10; // rax
  __int64 v11; // rdi
  __int64 v12; // rsi
  __int64 v13; // r8
  __int64 v14; // r9
  int v15; // r10d
  __int64 *v16; // r11
  __int64 v17; // rcx
  abi_Type *v18; // rdx
  __int64 r1; // rbx
  __int64 v20; // rcx
  __int64 v21; // rdi
  __int64 v22; // rsi
  __int64 v23; // r8
  __int64 v24; // r9
  __int64 v25; // r10
  __int64 *v26; // r11
  double v27; // xmm0_8
  __int64 v28; // rcx
  __int64 v29; // rbx
  __int64 v30; // rdi
  __int64 v31; // rsi
  __int64 v32; // r8
  __int64 v33; // r9
  __int64 v34; // r10
  __int64 v35; // r11
  string v36; // kr10_16
  runtime_TypeAssertionError *p_TypeAssertionError; // rax
  abi_Type **v38; // r11
  abi_Name v39; // rax
  string v40; // kr20_16
  runtime_TypeAssertionError *v41; // rax
  abi_Type **v42; // r11
  __int64 r3; // rdi
  __int64 r4; // rsi
  __int64 r5; // r8
  __int64 r6; // r9
  int r7; // r10d
  int r8; // r11d
  __int64 v49; // rbx
  __int64 v50; // [rsp+28h] [rbp-10h]
  char v53; // [rsp+50h] [rbp+18h]
  retval_100E8C0 v54; // 0:kr40_72.72
  retval_100E8C0 v55; // 0:krC8_72.72

  if ( !*(_QWORD *)(a1 + 64) )
    runtime_throw(
      (__int64 (*)(void))"internal error - misuse of itab",
      (__int64 (*)(void))0x1F,
      a3,
      a4,
      a5,
      a6,
      a7,
      a8,
      a9);
  if ( (a2->TFlag & 1) != 0 )
  {
    v53 = a3;
    v54 = runtime__ptr_itabTableType_find((__int64 *)runtime_itabTable, a1, a2);
    result = v54._r0;
    r3 = v54._r3;
    r4 = v54._r4;
    r5 = v54._r5;
    r6 = v54._r6;
    r7 = v54._r7;
    r8 = v54._r8;
    if ( !v54._r0 )
    {
      runtime_lock2(
        (volatile signed __int8 *)&runtime_itabLock,
        v54._r1,
        v54._r2,
        v54._r3,
        v54._r4,
        v54._r5,
        v54._r6,
        v54._r7,
        v54._r8);
      v55 = runtime__ptr_itabTableType_find((__int64 *)runtime_itabTable, a1, a2);
      LODWORD(v49) = v55._r1;
      if ( v55._r0 )
      {
        runtime_unlock2(&runtime_itabLock, v49, v55._r2, v55._r3, v55._r4, v55._r5, v55._r6, v55._r7, v55._r8);
        result = v55._r0;
      }
      else
      {
        v10 = runtime_persistentalloc(
                (__int64 (*)(void))(8 * (*(_QWORD *)(a1 + 64) - 1LL) + 32),
                0,
                (__int64 (*)(void))&qword_1198340,
                v55._r3,
                v55._r4,
                v55._r5,
                v55._r6,
                v55._r7,
                v55._r8);
        if ( runtime_writeBarrier )
        {
          runtime_gcWriteBarrier4();
          v17 = a1;
          *v16 = a1;
          v16[1] = *(_QWORD *)v10;
          v18 = a2;
          v16[2] = (__int64)a2;
          v12 = *(_QWORD *)(v10 + 8);
          v16[3] = v12;
        }
        else
        {
          v17 = a1;
          v18 = a2;
        }
        v50 = v10;
        *(_QWORD *)v10 = v17;
        *(_QWORD *)(v10 + 8) = v18;
        *(_DWORD *)(v10 + 16) = 0;
        r1 = runtime_itabInit((abi_Name **)v10, 1, v17, v11, v12, v13, v14, v15, (int)v16)._r1;
        runtime_itabAdd(v50, v27, r1, v20, v21, v22, v23, v24, v25, v26);
        runtime_unlock2(&runtime_itabLock, v29, v28, v30, v31, v32, v33, v34, v35);
        result = v50;
      }
    }
    if ( !*(_QWORD *)(result + 24) )
    {
      if ( !v53 )
      {
        v36 = (string)runtime_itabInit((abi_Name **)result, 0, 0, r3, r4, r5, r6, r7, r8);
        p_TypeAssertionError = (runtime_TypeAssertionError *)runtime_newobject(&RTYPE_runtime_TypeAssertionError);
        if ( runtime_writeBarrier )
          goto LABEL_18;
        while ( 1 )
        {
          p_TypeAssertionError->concrete = a2;
          p_TypeAssertionError->asserted = (_ptr_abi_Type)a1;
          p_TypeAssertionError->missingMethod = v36;
          runtime_gopanic(&RTYPE__ptr_runtime_TypeAssertionError, p_TypeAssertionError);
LABEL_18:
          runtime_gcWriteBarrier3();
          *v38 = a2;
          v38[1] = (abi_Type *)a1;
          v38[2] = (abi_Type *)v36.ptr;
        }
      }
      return 0;
    }
  }
  else
  {
    if ( !(_BYTE)a3 )
    {
      v39.Bytes = (_ptr_uint8)runtime_resolveNameOff(
                                a1,
                                **(_DWORD **)(a1 + 56),
                                *(_QWORD *)(a1 + 56),
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                a9);
      v40 = internal_abi_Name_Name(v39);
      v41 = (runtime_TypeAssertionError *)runtime_newobject(&RTYPE_runtime_TypeAssertionError);
      if ( runtime_writeBarrier )
        goto LABEL_21;
      while ( 1 )
      {
        v41->concrete = a2;
        v41->asserted = (_ptr_abi_Type)a1;
        v41->missingMethod = v40;
        runtime_gopanic(&RTYPE__ptr_runtime_TypeAssertionError, v41);
LABEL_21:
        runtime_gcWriteBarrier3();
        *v42 = a2;
        v42[1] = (abi_Type *)a1;
        v42[2] = (abi_Type *)v40.ptr;
      }
    }
    return 0;
  }
  return result;
}

==================================================

// function name: sync_atomic_SwapPointer

// 1196190: using guessed type int runtime_writeBarrier;

//----- (0000000001064EE0) ----------------------------------------------------
// sync/atomic.SwapPointer
__int64 __golang sync_atomic_SwapPointer(
        volatile __int64 *a1,
        __int64 a2,
        __int64 a3,
        __int64 a4,
        __int64 a5,
        __int64 a6,
        __int64 a7,
        __int64 a8,
        __int64 a9)
{
  volatile __int64 *v10; // [rsp+28h] [rbp+10h]
  __int64 v11; // [rsp+30h] [rbp+18h]

  if ( (_BYTE)runtime_writeBarrier )
  {
    v10 = a1;
    v11 = a2;
    runtime_atomicwb(a1, a2, a3, a4, a5, a6, a7, a8, a9);
    a1 = v10;
    a2 = v11;
  }
  return sync_atomic_SwapUintptr(a1, a2);
}

==================================================

// function name: runtime_traceLocker_Gomaxprocs

// 105CCBD: variable 'v1' is possibly undefined

//----- (000000000105CCE0) ----------------------------------------------------
// runtime.traceLocker.Gomaxprocs
__int64 __golang runtime_traceLocker_Gomaxprocs(
        __int64 a1,
        unsigned __int64 a2,
        int a3,
        __int64 a4,
        __int64 a5,
        __int64 a6,
        __int64 a7,
        __int64 a8,
        __int64 a9)
{
  retval_105C160 v9; // kr00_16
  __int64 v10; // rdi
  __int64 v11; // rsi
  __int64 v12; // r8
  __int64 v13; // r9
  unsigned __int64 v14; // r10
  __int64 v15; // r11
  __int64 v16; // r9
  __int64 v17; // r10
  __int64 v18; // r11
  _QWORD v20[3]; // [rsp+0h] [rbp-38h] BYREF
  unsigned __int64 v21; // [rsp+20h] [rbp-18h]

  v21 = a2;
  v9 = runtime_traceLocker_eventWriter(a1, a2, 2u, 1u, a5, a6, a7, a8, a9);
  v20[2] = a3;
  v20[0] = a3;
  v20[1] = runtime_traceStack(1, 0, v21, v10, v11, v12, v13, v14, v15);
  return runtime_traceEventWriter_event(v9._r0, v9._r1, 9, (__int64)v20, 2, 2, v16, v17, v18);
}

==================================================

// function name: runtime_moduledataverify1

//----- (00000000010689C0) ----------------------------------------------------
// runtime.moduledataverify1
char __golang runtime_moduledataverify1(
        unsigned int **a1,
        __int64 a2,
        __int64 a3,
        __int64 a4,
        __int64 a5,
        unsigned int a6,
        unsigned int *a7,
        int a8,
        int a9)
{
  unsigned int *v9; // rdx
  signed __int64 v10; // rdi
  unsigned __int64 v11; // rcx
  unsigned int *v12; // rdx
  signed __int64 v13; // rsi
  signed __int64 i; // rbx
  unsigned __int64 v15; // rcx
  unsigned __int64 v16; // r8
  unsigned __int64 v17; // rdx
  unsigned int *v18; // rcx
  __int64 r1; // rdx
  const char *r0; // rsi
  retval_1052260 v21; // kr00_16
  __int64 v22; // rbx
  int v23; // edi
  int v24; // r8d
  int v25; // r9d
  int v26; // r10d
  int v27; // r11d
  retval_1052260 v28; // kr10_16
  unsigned __int64 v29; // rdx
  int v30; // esi
  unsigned int *v31; // rdi
  int v32; // r8d
  int64 v33; // r9
  __int64 v34; // rax
  __int64 v35; // rax
  __int64 v36; // rax
  __int64 v37; // rax
  __int64 v38; // rbx
  __int64 v39; // rdi
  __int64 v40; // rsi
  __int64 v41; // r8
  __int64 v42; // r9
  __int64 v43; // r10
  __int64 v44; // r11
  int64 v45; // rax
  unsigned int **v46; // rcx
  int64 v47; // rdx
  __int64 v48; // rax
  __int64 v49; // rbx
  int v50; // edi
  int v51; // r8d
  int v52; // r9d
  int v53; // r10d
  int v54; // r11d
  unsigned __int64 v55; // rdx
  int64 v56; // rsi
  __int64 v57; // rax
  unsigned int **v58; // rcx
  unsigned int *v59; // rdx
  __int64 j; // rsi
  __int64 v61; // rax
  __int64 v62; // rax
  __int64 v63; // rcx
  __int64 v64; // rdi
  __int64 v65; // rsi
  __int64 v66; // r8
  __int64 v67; // r9
  __int64 v68; // r10
  __int64 v69; // r11
  __int64 v70; // rax
  __int64 v71; // rax
  __int64 v72; // rcx
  __int64 v73; // rdi
  __int64 v74; // rsi
  __int64 v75; // r8
  __int64 v76; // r9
  __int64 v77; // r10
  __int64 v78; // r11
  __int64 v79; // rax
  __int64 v80; // rax
  __int64 v81; // rax
  unsigned __int64 v82; // rsi
  unsigned __int64 v83; // rsi
  unsigned __int64 v84; // rdi
  int v85; // edi
  int v86; // r8d
  int v87; // r9d
  int v88; // r10d
  int v89; // r11d
  retval_1052260 v90; // kr20_16
  __int64 v91; // rax
  __int64 v92; // rax
  __int64 v93; // rcx
  __int64 v94; // rdi
  __int64 v95; // rsi
  __int64 v96; // r8
  __int64 v97; // r9
  __int64 v98; // r10
  __int64 v99; // r11
  unsigned int v101; // [rsp+14h] [rbp-F4h]
  unsigned __int64 v102; // [rsp+28h] [rbp-E0h]
  __int64 v103; // [rsp+30h] [rbp-D8h]
  __int64 v104; // [rsp+38h] [rbp-D0h]
  unsigned __int64 v105; // [rsp+40h] [rbp-C8h]
  unsigned __int64 v106; // [rsp+48h] [rbp-C0h]
  __int64 v107; // [rsp+50h] [rbp-B8h]
  __int64 v108; // [rsp+58h] [rbp-B0h]
  __int64 v109; // [rsp+60h] [rbp-A8h]
  __int64 v110; // [rsp+68h] [rbp-A0h]
  __int64 v111; // [rsp+70h] [rbp-98h]
  unsigned int *v112; // [rsp+78h] [rbp-90h]
  unsigned int *v113; // [rsp+78h] [rbp-90h]
  unsigned int *v114; // [rsp+80h] [rbp-88h]
  __int64 v115; // [rsp+80h] [rbp-88h]
  __int64 v116; // [rsp+88h] [rbp-80h]
  __int64 v117; // [rsp+90h] [rbp-78h]
  __int64 v118; // [rsp+90h] [rbp-78h]
  unsigned __int64 v119; // [rsp+98h] [rbp-70h]
  unsigned __int64 v120; // [rsp+A0h] [rbp-68h]
  unsigned int *v121; // [rsp+A0h] [rbp-68h]
  unsigned int *v122; // [rsp+A0h] [rbp-68h]
  __int64 v123; // [rsp+A0h] [rbp-68h]
  unsigned int *v124; // [rsp+A0h] [rbp-68h]
  unsigned int *v125; // [rsp+A0h] [rbp-68h]
  __int64 v126; // [rsp+B8h] [rbp-50h]
  __int128 v127; // [rsp+C0h] [rbp-48h]
  __int128 v128; // [rsp+D0h] [rbp-38h]
  const char *v129; // [rsp+E0h] [rbp-28h]
  unsigned int *v130; // [rsp+F0h] [rbp-18h]
  unsigned int *v131; // [rsp+F8h] [rbp-10h]
  unsigned int *v132; // [rsp+F8h] [rbp-10h]
  unsigned int *v133; // [rsp+F8h] [rbp-10h]
  unsigned int *v134; // [rsp+F8h] [rbp-10h]
  unsigned int **v135; // [rsp+110h] [rbp+8h]

  v9 = *a1;
  v101 = **a1;
  if ( v101 != -15
    || *((_BYTE *)v9 + 4)
    || *((_BYTE *)v9 + 5)
    || *((_BYTE *)v9 + 6) != 1
    || *((_BYTE *)v9 + 7) != 8
    || (v10 = *((_QWORD *)v9 + 3), a1[22] != (unsigned int *)v10) )
  {
    v111 = *((unsigned __int8 *)v9 + 4);
    v110 = *((unsigned __int8 *)v9 + 5);
    v109 = *((unsigned __int8 *)v9 + 6);
    v108 = *((unsigned __int8 *)v9 + 7);
    v115 = *((_QWORD *)v9 + 3);
    v113 = a1[22];
    v134 = a1[53];
    v125 = a1[54];
    runtime_printlock(v125);
    runtime_printstring("runtime: pcHeader: magic= ", 26);
    runtime_printhex(v101);
    runtime_printstring(" pad1= ", 7);
    runtime_printuint(v111);
    runtime_printstring(" pad2= ", 7);
    runtime_printuint(v110);
    runtime_printstring(" minLC= ", 8);
    runtime_printuint(v109);
    runtime_printstring(" ptrSize= ", 10);
    runtime_printuint(v108);
    runtime_printstring(" pcHeader.textStart= ", 21);
    runtime_printhex(v115);
    runtime_printstring(" text= ", 7);
    runtime_printhex(v113);
    runtime_printstring(" pluginpath= ", 13);
    v91 = runtime_printstring(v134, v125);
    v92 = runtime_printnl(v91);
    runtime_printunlock(v92);
    runtime_throw(
      (__int64 (*)(void))"invalid function symbol table",
      (__int64 (*)(void))0x1D,
      v93,
      v94,
      v95,
      v96,
      v97,
      v98,
      v99);
  }
  v135 = a1;
  v11 = (unsigned __int64)a1[17];
  v12 = a1[16];
  v13 = v11 - 1;
  for ( i = 0; i < v13; ++i )
  {
    v10 = i + 1;
    a6 = v12[2 * i];
    if ( v11 <= i + 1 )
      runtime_panicIndex(i + 1, i, v11, v10, v13, a6, (int)a7, a8, a9);
    a7 = &v12[2 * i + 2];
    if ( *a7 < a6 )
    {
      v15 = (unsigned __int64)a1[14];
      v16 = v12[2 * i + 1];
      if ( v15 > v16 )
      {
        v17 = v12[2 * i + 3];
        if ( v15 > v17 )
        {
          v106 = i;
          v120 = i + 1;
          v18 = a1[13];
          if ( v10 < v13 )
          {
            v119 = v16;
            v131 = a1[13];
            v21 = runtime__ptr_moduledata_funcName(a1, *(unsigned int *)((char *)v18 + v17 + 4));
            v18 = v131;
            v16 = v119;
            r1 = v21._r1;
            r0 = (const char *)v21._r0;
            a1 = v135;
          }
          else
          {
            r1 = 3;
            r0 = "end";
          }
          v129 = r0;
          v107 = r1;
          v28 = runtime__ptr_moduledata_funcName(a1, *(unsigned int *)((char *)v18 + v16 + 4));
          v22 = v28._r1;
          v29 = (unsigned __int64)v135[17];
          v30 = v106;
          if ( v106 < v29 )
          {
            v31 = v135[16];
            v32 = v31[2 * v106];
            v33 = v120;
            if ( v29 > v120 )
            {
              v117 = v31[2 * v106];
              v116 = v31[2 * v106 + 2];
              v132 = v135[53];
              v121 = v135[54];
              runtime_printlock(v121);
              runtime_printstring("function symbol table not sorted by PC offset: ", 47);
              v34 = runtime_printhex(v117);
              runtime_printsp(v34);
              runtime_printstring(v28._r0, v28._r1);
              runtime_printstring(" > ", 3);
              v35 = runtime_printhex(v116);
              runtime_printsp(v35);
              runtime_printstring(v129, v107);
              runtime_printstring(" , plugin: ", 11);
              v36 = runtime_printstring(v132, v121);
              v37 = runtime_printnl(v36);
              runtime_printunlock(v37);
              v45 = v106;
              v46 = v135;
              v47 = 0;
              while ( v47 <= v45 )
              {
                v82 = (unsigned __int64)v46[17];
                if ( v47 >= v82 )
                  runtime_panicIndex(v47, v38, (signed __int64)v46[17], v39, v82, v41, v42, v43, v44);
                v83 = (unsigned __int64)v46[14];
                v84 = v46[16][2 * v47 + 1];
                if ( v83 <= v84 )
                  runtime_panicIndex(v46[16][2 * v47 + 1], v38, (signed __int64)v46[14], v84, v83, v41, v42, v43, v44);
                v105 = v47;
                v90 = runtime__ptr_moduledata_funcName(v46, *(unsigned int *)((char *)v46[13] + v84 + 4));
                if ( v105 >= (unsigned __int64)v135[17] )
                  runtime_panicIndex(v105, v90._r1, (signed __int64)v135[17], v85, v105, v86, v87, v88, v89);
                v118 = v135[16][2 * v105];
                runtime_printlock(v118);
                runtime_printstring("\t ", 2);
                v79 = runtime_printhex(v118);
                runtime_printsp(v79);
                v80 = runtime_printstring(v90._r0, v90._r1);
                v81 = runtime_printnl(v80);
                runtime_printunlock(v81);
                v47 = v105 + 1;
                v45 = v106;
                v46 = v135;
              }
              runtime_throw(
                (__int64 (*)(void))"invalid runtime symbol table",
                (__int64 (*)(void))0x1C,
                (__int64)v46,
                v39,
                v40,
                v41,
                v42,
                v43,
                v44);
            }
            runtime_panicIndex(v33, v22, v29, (int)v31, v30, v32, v33, v26, v27);
          }
          runtime_panicIndex(v106, v28._r1, (signed __int64)v135[17], v23, v106, v24, v25, v26, v27);
        }
        runtime_panicIndex(v17, i, v15, v10, v13, v16, (int)a7, a8, a9);
      }
      runtime_panicIndex(v12[2 * i + 1], i, v15, v10, v13, v16, (int)a7, a8, a9);
    }
  }
  if ( !v11 )
    runtime_panicIndex(0, i, 0, v10, v13, a6, (int)a7, a8, a9);
  v102 = v11 - 1;
  v122 = a1[17];
  v48 = runtime__ptr_moduledata_textAddr(a1, *v12);
  v55 = (unsigned __int64)v135[17];
  v56 = v102;
  if ( v55 <= v102 )
LABEL_33:
    runtime_panicIndex(v56, v49, v55, v50, v56, v51, v52, v53, v54);
  v103 = v48;
  v57 = runtime__ptr_moduledata_textAddr(v135, v135[16][2 * (_QWORD)v122 - 2]);
  v104 = v57;
  v58 = v135;
  v114 = v135[20];
  if ( (unsigned int *)v103 != v114 || v135[21] != (unsigned int *)v57 )
  {
LABEL_32:
    v112 = v58[21];
    runtime_printlock(v112);
    runtime_printstring("minpc= ", 7);
    runtime_printhex(v114);
    runtime_printstring(" min= ", 6);
    runtime_printhex(v103);
    runtime_printstring(" maxpc= ", 8);
    runtime_printhex(v112);
    runtime_printstring(" max= ", 6);
    v70 = runtime_printhex(v104);
    v71 = runtime_printnl(v70);
    runtime_printunlock(v71);
    runtime_throw(
      (__int64 (*)(void))"minpc or maxpc invalid",
      (__int64 (*)(void))0x16,
      v72,
      v73,
      v74,
      v75,
      v76,
      v77,
      v78);
    goto LABEL_33;
  }
  v59 = v135[63];
  for ( j = (__int64)v135[64]; j > 0; j = v123 - 1 )
  {
    v126 = *(_QWORD *)v59;
    v127 = *(_OWORD *)(v59 + 2);
    v128 = *(_OWORD *)(v59 + 6);
    if ( *(_QWORD *)(*((_QWORD *)&v128 + 1) + 8LL) != (_QWORD)v128
      || (v123 = j,
          v130 = v59,
          LOBYTE(v57) = runtime_memequal(*((const __m128i **)&v127 + 1), **((const __m128i ***)&v128 + 1), v128),
          !(_BYTE)v57) )
    {
      v133 = v135[61];
      v124 = v135[62];
      runtime_printlock(v127);
      runtime_printstring("abi mismatch detected between ", 30);
      runtime_printstring(v133, v124);
      runtime_printstring(" and ", 5);
      v61 = runtime_printstring(v126, v127);
      v62 = runtime_printnl(v61);
      runtime_printunlock(v62);
      runtime_throw((__int64 (*)(void))"abi mismatch", (__int64 (*)(void))0xC, v63, v64, v65, v66, v67, v68, v69);
      goto LABEL_32;
    }
    v59 = v130 + 10;
  }
  return v57;
}

==================================================

// function name: runtime_debugCallWrap1_func1

// 1195F34: using guessed type int runtime_gcMarkDoneFlushed;

//----- (0000000001064620) ----------------------------------------------------
// runtime.debugCallWrap1.func1
__int64 __golang runtime_debugCallWrap1_func1(
        _QWORD *a1,
        __int64 a2,
        __int64 a3,
        __int64 a4,
        __int64 a5,
        __int64 a6,
        __int64 a7,
        __int64 a8,
        __int64 a9)
{
  __int64 v9; // r14
  __int64 v10; // rdx
  unsigned __int64 r1; // rbx
  __int64 r0; // rcx
  retval_105CBC0 v13; // kr00_16
  int v14; // ebx
  __int64 v15; // rdi
  __int64 v16; // rsi
  __int64 v17; // r8
  __int64 v18; // r9
  __int64 v19; // r10
  __int64 v20; // r11
  int v21; // edx
  int v22; // edx
  __int64 v23; // rcx
  __int64 v24; // rdi
  __int64 v25; // rsi
  __int64 v26; // r8
  __int64 v27; // r9
  __int64 v28; // r10
  __int64 v29; // r11
  __int64 v30; // rbx
  __int64 v31; // rdi
  __int64 v32; // rsi
  __int64 v33; // r8
  __int64 v34; // r9
  __int64 v35; // r10
  __int64 v36; // r11
  retval_105CBC0 v37; // kr10_16
  __int64 v38; // rcx
  __int64 v39; // rdi
  __int64 v40; // rsi
  __int64 v41; // r8
  __int64 v42; // r9
  unsigned __int64 v43; // r10
  __int64 *v44; // r11
  int v45; // esi
  unsigned __int64 v47; // [rsp+0h] [rbp-30h]
  __int64 v48; // [rsp+10h] [rbp-20h]
  __int64 v49; // [rsp+20h] [rbp-10h]
  __int64 v50; // [rsp+38h] [rbp+8h]

  v10 = a1[21];
  a1[21] = 0;
  if ( a1[27] )
  {
    a1[27] = 0;
    a5 = a1[6];
    *(_QWORD *)(a5 + 344) = 0;
  }
  v50 = (__int64)a1;
  v49 = v10;
  if ( byte_11772D0 )
  {
    v13 = runtime_traceAcquireEnabled();
    r1 = v13._r1;
    r0 = v13._r0;
    a1 = (_QWORD *)v50;
  }
  else
  {
    r1 = 0;
    r0 = 0;
  }
  v48 = r0;
  v47 = r1;
  if ( r1 )
  {
    runtime_traceLocker_GoStop(r0, r1, 1u, a4, a5, a6, a7, a8, a9);
    a1 = (_QWORD *)v50;
  }
  runtime_casgstatus((__int64)a1, 2, 1, a4, a5, a6, a7, a8, a9);
  if ( v47 )
  {
    v21 = *(_DWORD *)(v48 + 800);
    if ( v21 )
      *(_DWORD *)(v48 + 800) = v21 - 1;
    else
      _InterlockedExchangeAdd64((volatile signed __int64 *)(v48 + 752), 1u);
    v22 = *(_DWORD *)(v48 + 264);
    v14 = v22 - 1;
    *(_DWORD *)(v48 + 264) = v22 - 1;
    if ( v22 == 1 )
    {
      if ( *(_BYTE *)(v9 + 185) )
        *(_QWORD *)(v9 + 16) = -1314;
    }
  }
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 48) + 192LL) + 48LL) = 0;
  v23 = *(_QWORD *)(v9 + 48);
  *(_QWORD *)(v23 + 192) = 0;
  runtime_lock2((volatile signed __int8 *)&qword_1177AB8, v14, v23, v15, v16, v17, v18, v19, v20);
  *(_QWORD *)(v50 + 168) = 0;
  if ( qword_1177B10 )
  {
    v30 = v50;
    *(_QWORD *)(qword_1177B10 + 168) = v50;
  }
  else
  {
    qword_1177B08 = v50;
    v30 = v50;
  }
  qword_1177B10 = v30;
  ++dword_1177B18;
  runtime_unlock2(&qword_1177AB8, v30, v50, v24, v25, v26, v27, v28, v29);
  if ( byte_11772D0 )
    v37 = runtime_traceAcquireEnabled();
  else
    v37 = (retval_105CBC0)0LL;
  runtime_casgstatus(v49, 4, 1, v31, v32, v33, v34, v35, v36);
  if ( v37._r1 )
  {
    runtime_traceLocker_GoUnpark(v37._r0, v37._r1, v49, 0);
    v45 = *(_DWORD *)(v37._r0 + 800LL);
    if ( v45 )
      *(_DWORD *)(v37._r0 + 800LL) = v45 - 1;
    else
      _InterlockedExchangeAdd64((volatile signed __int64 *)(v37._r0 + 752LL), 1u);
    v38 = *(unsigned int *)(v37._r0 + 264LL);
    v40 = (unsigned int)(v38 - 1);
    *(_DWORD *)(v37._r0 + 264LL) = v40;
    if ( (_DWORD)v38 == 1 && *(_BYTE *)(v9 + 185) )
      *(_QWORD *)(v9 + 16) = -1314;
  }
  return runtime_execute(v49, 1, v38, v39, v40, v41, v42, v43, v44);
}

==================================================

// function name: runtime_traceAcquireEnabled

// 11772D0: using guessed type char byte_11772D0;

//----- (000000000105CBC0) ----------------------------------------------------
// runtime.traceAcquireEnabled
retval_105CBC0 __golang runtime_traceAcquireEnabled()
{
  __int64 v0; // r14
  int v3; // ecx
  retval_105CBC0 result; // 0:rax.8,8:rbx.8

  ++*(_DWORD *)(*(_QWORD *)(v0 + 48) + 264LL);
  result._r0 = *(_QWORD *)(v0 + 48);
  if ( (*(_QWORD *)(result._r0 + 752LL) & 1) != 0 )
  {
    ++*(_DWORD *)(result._r0 + 800LL);
    result._r1 = qword_11772D8;
  }
  else
  {
    _InterlockedExchangeAdd64((volatile signed __int64 *)(result._r0 + 752LL), 1u);
    result._r1 = qword_11772D8;
    if ( !qword_11772D8 )
    {
      _InterlockedExchangeAdd64((volatile signed __int64 *)(result._r0 + 752LL), 1u);
      v3 = *(_DWORD *)(result._r0 + 264LL);
      *(_DWORD *)(result._r0 + 264LL) = v3 - 1;
      if ( v3 == 1 )
      {
        if ( *(_BYTE *)(v0 + 185) )
          *(_QWORD *)(v0 + 16) = -1314;
      }
      result._r0 = 0;
      result._r1 = 0;
    }
  }
  return result;
}

==================================================

// function name: internal_sync_throw

//----- (00000000010669C0) ----------------------------------------------------
// internal/sync.throw
void __golang __noreturn internal_sync_throw(
        __int64 (*a1)(void),
        __int64 (*a2)(void),
        __int64 a3,
        __int64 a4,
        __int64 a5,
        __int64 a6,
        __int64 a7,
        __int64 a8,
        __int64 a9)
{
  runtime_throw(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

==================================================

// function name: internal_poll_runtime_Semrelease

// 1049920: using guessed type retval_1049920 __golang runtime_semacquire1(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

//----- (0000000001067AC0) ----------------------------------------------------
// internal/poll.runtime_Semrelease
__int64 __golang internal_poll_runtime_Semrelease(
        int a1,
        __int64 a2,
        __int64 a3,
        int a4,
        int a5,
        int a6,
        int a7,
        int a8,
        int a9)
{
  return runtime_semrelease1(a1, 0, 0, a4, a5, a6, a7, a8, a9);
}

==================================================

// function name: sync_runtime_notifyListCheck

//----- (0000000001067B40) ----------------------------------------------------
// sync.runtime_notifyListCheck
__int64 __golang sync_runtime_notifyListCheck(__int64 result)
{
  __int64 v1; // rax
  __int64 v2; // rax
  __int64 v3; // rcx
  __int64 v4; // rdi
  __int64 v5; // rsi
  __int64 v6; // r8
  __int64 v7; // r9
  __int64 v8; // r10
  __int64 v9; // r11
  __int64 v10; // [rsp+18h] [rbp+8h]

  if ( result != 32 )
  {
    v10 = result;
    runtime_printlock(result);
    runtime_printstring("runtime: bad notifyList size - sync=", 36);
    runtime_printuint(v10);
    runtime_printstring(" runtime=", 9);
    v1 = runtime_printuint(32);
    v2 = runtime_printnl(v1);
    runtime_printunlock(v2);
    runtime_throw((__int64 (*)(void))"bad notifyList size", (__int64 (*)(void))0x13, v3, v4, v5, v6, v7, v8, v9);
  }
  return result;
}

==================================================

// function name: runtime_init_6_func1

//----- (0000000001063280) ----------------------------------------------------
// runtime.init.6.func1
__int64 __golang runtime_init_6_func1()
{
  __int64 v0; // r14

  return *(_QWORD *)(v0 + 160);
}

==================================================

// function name: runtime_traceLocker_GoSysCall

// 105DD06: variable 'v9' is possibly undefined

//----- (000000000105DD60) ----------------------------------------------------
// runtime.traceLocker.GoSysCall
__int64 __golang runtime_traceLocker_GoSysCall(
        __int64 a1,
        unsigned __int64 a2,
        __int64 a3,
        __int64 a4,
        __int64 a5,
        __int64 a6,
        __int64 a7,
        __int64 a8,
        __int64 a9)
{
  __int64 v9; // rsi
  retval_105C160 v10; // kr00_16
  __int64 v11; // rsi
  __int64 v12; // rdi
  __int64 v13; // r9
  unsigned __int64 v14; // r10
  __int64 v15; // r11
  __int64 v16; // r9
  __int64 v17; // r10
  __int64 v18; // r11
  __int64 v20; // [rsp+0h] [rbp-48h]
  __int64 v21; // [rsp+10h] [rbp-38h]
  _QWORD v23[2]; // [rsp+20h] [rbp-28h] BYREF
  __int64 r0; // [rsp+30h] [rbp-18h]
  __int64 v25; // [rsp+38h] [rbp-10h]

  v9 = *(_QWORD *)(a1 + 72);
  v25 = *(_QWORD *)(a1 + 208);
  v21 = a2 & 1;
  *(_QWORD *)(v25 + 4592) = v9;
  v10 = runtime_traceLocker_eventWriter(a1, a2, 2u, 1u, v9, v21, a7, a8, a9);
  r0 = v10._r0;
  v11 = v25;
  v20 = *(_QWORD *)(v25 + 8 * v21 + 4576) + 1LL;
  *(_QWORD *)(v25 + 8 * v21 + 4576) = v20;
  v23[0] = v20;
  v23[1] = runtime_traceStack(1, 0, a2, v12, v11, v20, v13, v14, v15);
  return runtime_traceEventWriter_event(r0, v10._r1, 22, (__int64)v23, 2, 2, v16, v17, v18);
}

==================================================

// function name: internal_sync_runtime_Semrelease

//----- (0000000001067B00) ----------------------------------------------------
// internal/sync.runtime_Semrelease
__int64 __golang internal_sync_runtime_Semrelease(
        int a1,
        int a2,
        int a3,
        int a4,
        int a5,
        int a6,
        int a7,
        int a8,
        int a9)
{
  return runtime_semrelease1(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

==================================================

// function name: runtime_typelinksinit

// 1033AE0: using guessed type void __golang __noreturn runtime_panicshift(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

//----- (00000000010616C0) ----------------------------------------------------
// runtime.typelinksinit
void runtime_typelinksinit()
{
  _QWORD *v0; // rax
  __int64 v1; // rbx
  int v2; // r8d
  int v3; // r9d
  int v4; // r10d
  int v5; // r11d
  _QWORD *v6; // rsi
  __int64 v7; // rdi
  __int64 v8; // rdx
  _QWORD *v9; // r8
  char *v10; // rdx
  __int64 v11; // rsi
  __int64 i; // rcx
  _QWORD *v13; // rdi
  __int64 v14; // r9
  __int64 v15; // r10
  __int64 v16; // rbx
  _QWORD *v17; // rax
  __int64 v18; // rbx
  __int64 v19; // rdx
  __int64 *v20; // r11
  _QWORD *v21; // rsi
  _QWORD *v22; // r11
  __int64 v23; // rdx
  __int64 v24; // rdi
  __int64 v25; // rax
  int v26; // r12d
  __int64 v27; // r11
  __int64 *v28; // rax
  __int64 r0; // rdx
  __int64 v30; // rbx
  __int64 v31; // rsi
  __int64 j; // rcx
  unsigned __int64 r2; // rcx
  unsigned __int64 r1; // rbx
  __int64 *v35; // r11
  __int64 *v36; // rax
  __int64 v37; // rdx
  __int64 *v38; // r11
  __int64 *v39; // rax
  __int64 v40; // rdx
  __int64 v41; // rsi
  __int64 v42; // rax
  __int64 v43; // rax
  __int64 *v44; // rax
  __int64 v45; // rdx
  __int64 *v46; // r11
  __int64 v47; // rax
  int v48; // [rsp+54h] [rbp-2BCh]
  _QWORD *v49; // [rsp+58h] [rbp-2B8h]
  unsigned __int64 v50; // [rsp+60h] [rbp-2B0h]
  __int64 v51; // [rsp+60h] [rbp-2B0h]
  unsigned __int64 v52; // [rsp+68h] [rbp-2A8h]
  __int64 v53; // [rsp+68h] [rbp-2A8h]
  __int64 v54; // [rsp+70h] [rbp-2A0h]
  __int64 v55; // [rsp+70h] [rbp-2A0h]
  __int64 v56; // [rsp+78h] [rbp-298h]
  __int64 v57; // [rsp+78h] [rbp-298h]
  _QWORD *v58; // [rsp+80h] [rbp-290h]
  __int64 v59; // [rsp+88h] [rbp-288h]
  __int64 v60; // [rsp+90h] [rbp-280h]
  __int64 v61; // [rsp+98h] [rbp-278h]
  _QWORD *v62; // [rsp+A0h] [rbp-270h]
  __int64 v63; // [rsp+A8h] [rbp-268h]
  __int64 v64; // [rsp+A8h] [rbp-268h]
  __int64 v65; // [rsp+B0h] [rbp-260h]
  __int64 v66; // [rsp+B8h] [rbp-258h]
  __int64 v67; // [rsp+B8h] [rbp-258h]
  __int64 v68; // [rsp+C0h] [rbp-250h]
  __int64 v69; // [rsp+C8h] [rbp-248h]
  __int64 v70; // [rsp+C8h] [rbp-248h]
  char *v71; // [rsp+D0h] [rbp-240h]
  _QWORD v72[25]; // [rsp+D8h] [rbp-238h] BYREF
  __int128 v73; // [rsp+1A0h] [rbp-170h] BYREF
  __int128 v74; // [rsp+1B0h] [rbp-160h]
  __int128 v75; // [rsp+1C0h] [rbp-150h]
  _QWORD v76[33]; // [rsp+1D0h] [rbp-140h] BYREF
  __int128 v77; // [rsp+2D8h] [rbp-38h] BYREF
  __int128 v78; // [rsp+2E8h] [rbp-28h]
  __int128 v79; // [rsp+2F8h] [rbp-18h]
  retval_1068120 v80; // 0:kr00_24.24
  retval_1068120 v81; // 0:kr28_24.24
  retval_10672E0 v82; // 0:kr40_72.72

  if ( qword_116D460 )
  {
    v77 = 0;
    v78 = 0;
    v79 = 0;
    if ( runtime_firstmoduledata.num_typelink <= 8 )
    {
      memset(&v76[1], 0, 256);
      v76[0] = 0x8080808080808080LL;
      *(_QWORD *)&v78 = v76;
    }
    v0 = runtime_makemap((__int64)&RTYPE_map_uint32__slice__ptr_abi_Type, runtime_firstmoduledata.num_typelink, &v77);
    if ( runtime_modulesSlice )
    {
      v6 = *(_QWORD **)runtime_modulesSlice;
      v7 = *(_QWORD *)(runtime_modulesSlice + 8);
      v8 = *(_QWORD *)(runtime_modulesSlice + 16);
    }
    else
    {
      v7 = 0;
      v6 = 0;
      v8 = 0;
    }
    if ( !v7 )
      runtime_panicIndex(0, v1, 0, 0, (int)v6, v2, v3, v4, v5);
    v61 = (__int64)v0;
    v9 = (_QWORD *)*v6;
    v10 = (char *)v6 + (((1 - v8) >> 63) & 8);
    v71 = v10;
    v11 = v7 - 1;
    v60 = v7 - 1;
    for ( i = 0; i < v11; ++i )
    {
      v59 = i;
      v49 = v9;
      v13 = *(_QWORD **)&v10[8 * i];
      v58 = v13;
      v14 = v9[44];
      v69 = v14;
      v15 = v9[45];
      v56 = v15;
      v16 = 0;
      while ( v16 < v15 )
      {
        v54 = v16;
        v26 = *(_DWORD *)(v14 + 4 * v16);
        if ( v9[71] )
        {
          v27 = *runtime_mapaccess1_fast32((__int64)&RTYPE_map_abi_TypeOff__ptr_abi_Type, v9[71], v26);
          v0 = (_QWORD *)v61;
        }
        else
        {
          v27 = v9[37] + v26;
        }
        v65 = v27;
        v28 = runtime_mapaccess1_fast32(
                (__int64)&RTYPE_map_uint32__slice__ptr_abi_Type,
                (__int64)v0,
                *(_DWORD *)(v27 + 16));
        r0 = *v28;
        v30 = v28[1];
        v31 = v65;
        for ( j = 0; j < v30; ++j )
        {
          if ( *(_QWORD *)(r0 + 8 * j) == v65 )
            goto LABEL_24;
        }
        r2 = v28[2];
        r1 = v30 + 1;
        if ( r2 < r1 )
        {
          v81 = runtime_growslice(*v28, r1, r2, 1, &RTYPE__ptr_abi_Type);
          r1 = v81._r1;
          r2 = v81._r2;
          v31 = v65;
          r0 = v81._r0;
        }
        v52 = r2;
        if ( runtime_writeBarrier )
        {
          runtime_gcWriteBarrier2();
          *v35 = v31;
          v35[1] = *(_QWORD *)(r0 + 8 * r1 - 8);
        }
        v66 = r0;
        v50 = r1;
        *(_QWORD *)(r0 + 8 * r1 - 8) = v31;
        v36 = (__int64 *)runtime_mapassign_fast32(
                           (__int64)&RTYPE_map_uint32__slice__ptr_abi_Type,
                           v61,
                           *(_DWORD *)(v31 + 16));
        v36[1] = v50;
        v36[2] = v52;
        if ( runtime_writeBarrier )
        {
          runtime_gcWriteBarrier2();
          v37 = v66;
          *v38 = v66;
          v38[1] = *v36;
        }
        else
        {
          v37 = v66;
        }
        *v36 = v37;
LABEL_24:
        v16 = v54 + 1;
        v0 = (_QWORD *)v61;
        i = v59;
        v10 = v71;
        v11 = v60;
        v13 = v58;
        v9 = v49;
        v14 = v69;
        v15 = v56;
      }
      if ( !v13[71] )
      {
        v17 = runtime_makemap((__int64)&RTYPE_map_abi_TypeOff__ptr_abi_Type, v13[45], 0);
        v18 = qword_11762D8 + 1;
        v19 = runtime_pinnedTypemaps;
        if ( qword_11762E0 < (unsigned __int64)(qword_11762D8 + 1) )
        {
          v62 = v17;
          v80 = runtime_growslice(runtime_pinnedTypemaps, v18, qword_11762E0, 1, &RTYPE_map_abi_TypeOff__ptr_abi_Type);
          v47 = v80._r0;
          v18 = v80._r1;
          qword_11762E0 = v80._r2;
          if ( runtime_writeBarrier )
          {
            runtime_gcWriteBarrier2();
            *v20 = v47;
            v20[1] = runtime_pinnedTypemaps;
          }
          runtime_pinnedTypemaps = v47;
          v19 = v47;
          v17 = v62;
        }
        qword_11762D8 = v18;
        if ( runtime_writeBarrier )
        {
          runtime_gcWriteBarrier3();
          *v22 = v17;
          v22[1] = *(_QWORD *)(v19 + 8 * v18 - 8);
          v21 = v58;
          v22[2] = v58[71];
        }
        else
        {
          v21 = v58;
        }
        *(_QWORD *)(v19 + 8 * v18 - 8) = v17;
        v21[71] = v17;
        v23 = v21[44];
        v70 = v23;
        v24 = v21[45];
        v57 = v24;
        v25 = 0;
        while ( v25 < v24 )
        {
          v55 = v25;
          v48 = *(_DWORD *)(v23 + 4 * v25);
          v68 = v21[37] + v48;
          v39 = runtime_mapaccess1_fast32((__int64)&RTYPE_map_uint32__slice__ptr_abi_Type, v61, *(_DWORD *)(v68 + 16));
          v40 = *v39;
          v67 = *v39;
          v41 = v39[1];
          v53 = v41;
          v42 = 0;
          while ( 1 )
          {
            if ( v42 >= v41 )
            {
              v43 = v68;
              goto LABEL_42;
            }
            v51 = v42;
            v64 = *(_QWORD *)(v40 + 8 * v42);
            v73 = 0;
            v74 = 0;
            v75 = 0;
            memset(&v72[1], 0, 192);
            v72[0] = 0x8080808080808080LL;
            *(_QWORD *)&v74 = v72;
            v82 = runtime_rand();
            *((_QWORD *)&v73 + 1) = v82._r0;
            if ( (unsigned __int8)runtime_typesEqual(
                                    v68,
                                    v64,
                                    (__int64)&v73,
                                    v82._r3,
                                    v82._r4,
                                    v82._r5,
                                    v82._r6,
                                    v82._r7,
                                    v82._r8) )
              break;
            v42 = v51 + 1;
            v40 = v67;
            v41 = v53;
          }
          v43 = v64;
LABEL_42:
          v63 = v43;
          v44 = (__int64 *)runtime_mapassign_fast32((__int64)&RTYPE_map_abi_TypeOff__ptr_abi_Type, v58[71], v48);
          if ( runtime_writeBarrier )
          {
            runtime_gcWriteBarrier2();
            v45 = v63;
            *v46 = v63;
            v46[1] = *v44;
          }
          else
          {
            v45 = v63;
          }
          *v44 = v45;
          v25 = v55 + 1;
          v23 = v70;
          v21 = v58;
          v24 = v57;
        }
        v0 = (_QWORD *)v61;
        i = v59;
        v10 = v71;
        v11 = v60;
        v13 = v58;
      }
      v9 = v13;
    }
  }
}

==================================================

// function name: runtime_makemap

//----- (00000000010658C0) ----------------------------------------------------
// runtime.makemap
_QWORD *__golang runtime_makemap(__int64 a1, signed __int64 a2, _QWORD *a3)
{
  if ( a2 < 0 )
    a2 = 0;
  return internal_runtime_maps_NewMap(a1, a2, a3, 0x1000000000000uLL);
}

==================================================

// function name: internal_runtime_maps_NewMap

//----- (0000000001003300) ----------------------------------------------------
// internal/runtime/maps.NewMap
_QWORD *__golang internal_runtime_maps_NewMap(__int64 a1, unsigned __int64 a2, _QWORD *a3, unsigned __int64 a4)
{
  unsigned __int64 v4; // rbx
  unsigned __int64 v5; // rdx
  char v6; // al
  unsigned __int64 v7; // rsi
  bool v8; // zf
  __int64 v9; // rdx
  __int64 v10; // rax
  __int64 v11; // rbx
  int v12; // edi
  __int64 v13; // rsi
  maps_table *v14; // r8
  int v15; // r9d
  int v16; // r10d
  maps_table **v17; // r11
  signed __int64 v18; // rcx
  unsigned __int64 v20; // rdx
  maps_table *v21; // rax
  signed __int64 v22; // rdx
  _QWORD *v23; // rcx
  __int64 *v24; // r11
  signed __int64 v25; // [rsp+0h] [rbp-30h]
  unsigned __int64 v26; // [rsp+8h] [rbp-28h]
  __int64 v27; // [rsp+18h] [rbp-18h]
  _QWORD *v28; // [rsp+20h] [rbp-10h]

  if ( !a3 )
    a3 = runtime_newobject(&RTYPE_maps_Map);
  v28 = a3;
  a3[1] = internal_runtime_maps_rand();
  if ( a2 <= 8 )
    return v28;
  v4 = 8 * a2 / 7;
  if ( a2 > v4 )
    return v28;
  v5 = (v4 + 1023) >> 10;
  if ( v5 )
  {
    v8 = !_BitScanReverse64(&v5, v5 - 1);
    if ( v8 )
      v5 = -1;
    v7 = -(__int64)(v5 + 1 < 0x40) & (1LL << ((unsigned __int8)v5 + 1));
    if ( v7 )
    {
      v6 = 0;
    }
    else
    {
      v6 = 1;
      v7 = 0;
    }
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  if ( v6 )
    return v28;
  if ( !is_mul_ok(v7, 0x400u) )
    return v28;
  if ( !is_mul_ok(v7 << 10, *(_QWORD *)(a1 + 80)) || (v7 << 10) * *(_QWORD *)(a1 + 80) > a4 )
    return v28;
  v26 = v7;
  v8 = !_BitScanForward64((unsigned __int64 *)&v9, v7);
  if ( v8 )
    LOBYTE(v9) = 64;
  *((_BYTE *)v28 + 32) = v9;
  *((_BYTE *)v28 + 33) = 64 - v9;
  v10 = runtime_makeslice(&RTYPE__ptr_maps_table, v7);
  v27 = v10;
  v18 = 0;
  while ( 1 )
  {
    v20 = v26;
    if ( v18 >= (__int64)v26 )
      break;
    v25 = v18;
    v21 = internal_runtime_maps_newTable(a1, 8 * a2 / 7 / v26, v18, *((_BYTE *)v28 + 32));
    if ( runtime_writeBarrier )
    {
      runtime_gcWriteBarrier2();
      *v17 = v21;
      v22 = v25;
      v13 = v27;
      v14 = *(maps_table **)(v27 + 8 * v25);
      v17[1] = v14;
    }
    else
    {
      v22 = v25;
      v13 = v27;
    }
    *(_QWORD *)(v13 + 8 * v22) = v21;
    v18 = v22 + 1;
    v10 = v13;
  }
  if ( !v26 )
    runtime_panicIndex(0, v11, 0, v12, v13, (int)v14, v15, v16, (int)v17);
  if ( runtime_writeBarrier )
  {
    runtime_gcWriteBarrier2();
    *v24 = v10;
    v23 = v28;
    v24[1] = v28[2];
  }
  else
  {
    v23 = v28;
  }
  v23[2] = v10;
  v23[3] = v20;
  return v23;
}

==================================================

// function name: runtime_gcBgMarkWorker_func1

//----- (00000000010636A0) ----------------------------------------------------
// runtime.gcBgMarkWorker.func1
__int64 __golang runtime_gcBgMarkWorker_func1(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6)
{
  __int64 v6; // r14
  __int64 v7; // rcx
  int v8; // edx

  v7 = *(_QWORD *)(a2 + 24);
  if ( v7 )
  {
    v8 = *(_DWORD *)(v7 + 264);
    a5 = (unsigned int)(v8 - 1);
    *(_DWORD *)(v7 + 264) = a5;
    if ( v8 == 1 )
    {
      if ( *(_BYTE *)(v6 + 185) )
        *(_QWORD *)(v6 + 16) = -1314;
    }
  }
  runtime__ptr_lfstack_push(&runtime_gcBgMarkWorkerPool, a2, v7, a4, a5, a6);
  return 1;
}

==================================================

// function name: internal_sync_fatal

//----- (0000000001066A00) ----------------------------------------------------
// internal/sync.fatal
void __golang internal_sync_fatal(__int64 (*a1)(void), __int64 (*a2)(void))
{
  runtime_fatal(a1, a2);
}

==================================================

// function name: internal_poll_runtime_pollWait

//----- (0000000001066300) ----------------------------------------------------
// internal/poll.runtime_pollWait
__int64 __golang internal_poll_runtime_pollWait(__int64 a1, __int64 a2)
{
  int v2; // edx
  __int64 v3; // rcx
  bool v4; // zf
  int v6; // edx
  __int64 v7; // rcx
  bool v8; // zf
  __int64 v9; // [rsp+8h] [rbp+8h]
  __int64 v10; // [rsp+10h] [rbp+10h]

  v2 = *(_DWORD *)(a1 + 24);
  if ( (v2 & 1) == 0 )
  {
    if ( (_DWORD)a2 == 114 && (v2 & 4) != 0 )
      goto LABEL_7;
    if ( (_DWORD)a2 == 119 )
    {
      if ( (v2 & 8) != 0 )
      {
LABEL_7:
        v3 = 2;
        goto LABEL_14;
      }
      v4 = 0;
    }
    else
    {
      v4 = (_DWORD)a2 == 114;
    }
    if ( v4 && (v2 & 2) != 0 )
      v3 = 3;
    else
      v3 = 0;
    goto LABEL_14;
  }
  v3 = 1;
LABEL_14:
  if ( v3 )
    return v3;
  v9 = a1;
  v10 = a2;
  while ( !(unsigned __int8)runtime_netpollblock(a1, a2, 0) )
  {
    a1 = v9;
    v6 = *(_DWORD *)(v9 + 24);
    if ( (v6 & 1) != 0 )
    {
      a2 = v10;
      v7 = 1;
    }
    else
    {
      a2 = v10;
      if ( (_DWORD)v10 != 114 || (v6 & 4) == 0 )
      {
        if ( (_DWORD)v10 != 119 )
        {
          v8 = (_DWORD)v10 == 114;
          goto LABEL_27;
        }
        if ( (v6 & 8) == 0 )
        {
          v8 = 0;
LABEL_27:
          if ( v8 && (v6 & 2) != 0 )
            v7 = 3;
          else
            v7 = 0;
          goto LABEL_31;
        }
      }
      v7 = 2;
    }
LABEL_31:
    if ( v7 )
      return v7;
  }
  return 0;
}

==================================================

// function name: runtime_cgocall

// 1196190: using guessed type int runtime_writeBarrier;

//----- (0000000001064F80) ----------------------------------------------------
// runtime.cgocall
__int64 __golang runtime_cgocall(
        __int64 (__fastcall *a1)(__int64),
        __int64 a2,
        __int64 a3,
        __int64 a4,
        __int64 a5,
        __int64 a6,
        __int64 a7,
        __int64 a8,
        __int64 a9)
{
  __int64 v9; // r14
  _QWORD *v10; // rax
  __int64 v11; // rcx
  __int64 v12; // rbx
  __int64 v13; // rdi
  __int64 v14; // rsi
  __int64 v15; // r8
  __int64 v16; // r9
  __int64 v17; // r10
  __int64 v18; // r11
  __int64 v19; // rcx
  __int64 v20; // rbx
  __int64 v21; // rdi
  __int64 v22; // rsi
  __int64 v23; // r8
  __int64 v24; // r9
  __int64 v25; // r10
  __int64 v26; // r11
  char v28; // [rsp+0h] [rbp-28h]
  char v29; // [rsp+0h] [rbp-28h]
  unsigned int v30; // [rsp+10h] [rbp-18h]
  __int64 v31; // [rsp+20h] [rbp-8h]

  if ( !runtime_iscgo )
  {
LABEL_5:
    runtime_throw((__int64 (*)(void))"cgocall unavailable", (__int64 (*)(void))0x13, a3, a4, a5, a6, a7, a8, a9);
    JUMPOUT(0x1065058);
  }
  if ( !a1 )
  {
    runtime_throw((__int64 (*)(void))"cgocall nil", (__int64 (*)(void))0xB, a3, a4, a5, a6, a7, a8, a9);
    goto LABEL_5;
  }
  v31 = *(_QWORD *)(v9 + 48);
  ++*(_QWORD *)(v31 + 296);
  v10 = *(_QWORD **)(v31 + 312);
  *v10 = 0;
  runtime_entersyscall((__int64)v10, a2, a3, a4, a5, a6, a7, a8, a9, v28);
  *(_BYTE *)(v31 + 280) = 1;
  ++*(_DWORD *)(v31 + 304);
  v30 = (unsigned int)runtime_asmcgocall(a2, v12, v11, v13, v14, v15, v16, v17, v18, a1, a2);
  *(_BYTE *)(v31 + 280) = 0;
  --*(_DWORD *)(v31 + 304);
  runtime_exitsyscall(v31, v20, v19, v21, v22, v23, v24, v25, v26, v29);
  return v30;
}

==================================================

// function name: runtime_mallocgc

// 10C5A60: using guessed type __int64 runtime_staticuint64s;

//----- (0000000001065560) ----------------------------------------------------
// runtime.mallocgc
__int64 *__golang runtime_mallocgc(
        __int64 (*a1)(void),
        unsigned __int64 a2,
        __int64 a3,
        void (__golang *a4)(),
        __int64 a5,
        __int64 a6,
        __int64 a7,
        __int64 a8,
        __int64 *a9,
        double a10)
{
  __int64 v10; // r14
  __int64 *result; // rax
  __int64 r1; // rbx
  __int64 v13; // rdi
  __int64 v14; // rsi
  __int64 v15; // r8
  __int64 v16; // r9
  __int64 v17; // r10
  __int64 v18; // r11
  retval_1011F00 v19; // kr00_16
  retval_1012260 v20; // kr10_16
  retval_1011900 v21; // kr20_16
  retval_1011BE0 v22; // kr30_16
  retval_10125E0 v23; // kr40_16
  __int64 v24; // rdx
  __int64 *v25; // [rsp+0h] [rbp-10h]
  __int64 (*v26)(void); // [rsp+18h] [rbp+8h]
  __int64 v27; // [rsp+20h] [rbp+10h]
  unsigned __int8 v28; // [rsp+28h] [rbp+18h]

  if ( !a1 )
    return &runtime_zerobase;
  v26 = a1;
  v27 = a2;
  v28 = a3;
  if ( byte_1196544 )
  {
    result = (__int64 *)runtime_preMallocgcDebug(a1, a2, a3, (__int64)a4, a5, a6, a7, a8, (__int64)a9);
    if ( result )
      return result;
    a1 = v26;
    a3 = v28;
    a2 = v27;
  }
  if ( runtime_gcBlackenEnabled )
  {
    runtime_deductAssistCredit((__int64)a1, a2, a3, a4, a5, a6, a7, a8, a9);
    a1 = v26;
    LODWORD(a3) = v28;
    a2 = v27;
  }
  if ( (unsigned __int64)a1 > 0x7FF8 )
  {
    v23 = runtime_mallocgcLarge((unsigned __int64)a1, a2, a3, (__int64)a4, a5, a6, a7, a8, (__int64)a9);
    r1 = v23._r1;
    result = (__int64 *)v23._r0;
  }
  else if ( a2 && *(_QWORD *)(a2 + 8) )
  {
    if ( (unsigned __int64)a1 > 0x200 )
    {
      v20 = runtime_mallocgcSmallScanHeader((__int64)a1, a2, a3, a10, (__int64)a4, a5, a6, a7, a8, (int)a9);
      r1 = v20._r1;
      result = (__int64 *)v20._r0;
    }
    else
    {
      v19 = runtime_mallocgcSmallScanNoHeader(a1, a2, a3, (int)a4, a10, a5, a6, a7, a8, (int)a9);
      r1 = v19._r1;
      result = (__int64 *)v19._r0;
    }
  }
  else if ( (unsigned __int64)a1 >= 0x10 )
  {
    v22 = runtime_mallocgcSmallNoscan((unsigned __int64)a1, a2, a3, (int)a4, a10, a5, a6, a7, a8, (int)a9);
    r1 = v22._r1;
    result = (__int64 *)v22._r0;
  }
  else
  {
    v21 = runtime_mallocgcTiny((unsigned __int64)a1);
    r1 = v21._r1;
    result = (__int64 *)v21._r0;
  }
  if ( runtime_gcBlackenEnabled )
  {
    if ( r1 )
    {
      v24 = *(_QWORD *)(*(_QWORD *)(v10 + 48) + 192LL);
      if ( v24 )
      {
        v14 = (__int64)v26;
        v13 = r1 - (_QWORD)v26;
        *(_QWORD *)(v24 + 432) -= r1 - (_QWORD)v26;
      }
    }
  }
  if ( byte_1196544 )
  {
    v25 = result;
    runtime_postMallocgcDebug((__int64)result, r1, v27, v13, v14, v15, v16, v17, v18);
    return v25;
  }
  return result;
}

==================================================

// function name: runtime_fpunwindExpand

// 1176E20: using guessed type __int64 qword_1176E20[48];

//----- (000000000105F4C0) ----------------------------------------------------
// runtime.fpunwindExpand
__int64 __golang runtime_fpunwindExpand(
        __m128i *a1,
        __int64 a2,
        __int64 a3,
        unsigned __int64 *a4,
        __int64 a5,
        __int64 a6,
        __int64 a7,
        unsigned __int64 a8,
        __int64 a9)
{
  unsigned __int64 v9; // rdx
  __int64 v10; // rcx
  __int64 v11; // rsi
  __int64 v12; // rdi
  unsigned int *v13; // r8
  int64 v14; // r9
  __int64 v15; // rsi
  __int64 v17; // rdi
  __int64 v18; // rsi
  __int64 v19; // r8
  __int64 v20; // r9
  __int64 v21; // r10
  __int64 v22; // r11
  retval_1069200 v23; // kr00_16
  unsigned __int64 v24; // rdx
  int64 v25; // rcx
  signed __int64 v26; // r8
  __m128i *v27; // rdx
  retval_1053060 v28; // kr10_16
  unsigned __int8 v29; // r12
  __int64 r1; // rbx
  __int64 r3; // rdi
  __int64 r4; // rsi
  unsigned __int8 v33; // [rsp+0h] [rbp-62h]
  unsigned __int8 v34; // [rsp+1h] [rbp-61h]
  unsigned __int64 v35; // [rsp+2h] [rbp-60h]
  unsigned __int64 v36; // [rsp+2h] [rbp-60h]
  __int64 v37; // [rsp+Ah] [rbp-58h]
  int64 v38; // [rsp+12h] [rbp-50h]
  int64 v39; // [rsp+22h] [rbp-40h]
  __int64 v40; // [rsp+2Ah] [rbp-38h]
  __int64 v41; // [rsp+32h] [rbp-30h]
  __int64 v42; // [rsp+32h] [rbp-30h]
  unsigned int *v43[2]; // [rsp+3Ah] [rbp-28h] BYREF
  __int64 r2; // [rsp+4Ah] [rbp-18h]
  __int64 v45; // [rsp+52h] [rbp-10h]
  signed __int64 v47; // [rsp+72h] [rbp+10h]
  retval_10694A0 v48; // 0:kr20_40.40

  if ( !a5 )
    return 0;
  if ( *a4 == -1 )
  {
    v15 = a5 - 1;
    if ( a2 > v15 )
      a2 = v15;
    if ( a1 != (__m128i *)((char *)a4 + (((1 - a6) >> 63) & 8)) )
    {
      v42 = a2;
      runtime_memmove(a1, (const __m128i *)((char *)a4 + (((1 - a6) >> 63) & 8)), 8 * a2);
      return v42;
    }
    return a2;
  }
  else
  {
    v47 = a2;
    v9 = *a4;
    v10 = (__int64)a4 + (((1 - a6) >> 63) & 8);
    v45 = v10;
    v11 = a5 - 1;
    v41 = v11;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    while ( v12 < v11 )
    {
      v40 = v12;
      v38 = v14;
      v35 = v9;
      v34 = (unsigned __int8)v13;
      v37 = *(_QWORD *)(v10 + 8 * v12);
      v23 = runtime_findfunc((void *)(v37 - 1), a2, v10, v12, v11, v13, (unsigned int *)v14, a8, a9);
      if ( v23._r0 )
      {
        v48 = runtime_newInlineUnwinder(v23._r0, (_QWORD *)v23._r1, v37 - 1, v17, v18, v19, v20, v21, v22);
        r1 = v48._r1;
        r3 = v48._r3;
        r4 = v48._r4;
        v43[0] = (unsigned int *)v48._r0;
        v43[1] = (unsigned int *)v48._r1;
        r2 = v48._r2;
        v27 = a1;
        v26 = v47;
        v14 = v38;
        a8 = v35;
        a9 = v34;
        while ( r3 )
        {
          if ( (int)r4 >= 0 )
          {
            if ( (unsigned __int64)(int)r4 >= 0x100000 )
              runtime_panicIndex((int)r4, r1, 0x100000, r3, r4, v26, v14, a8, a9);
            v29 = *(_BYTE *)(r2 + 16LL * (int)r4);
          }
          else if ( v43[0] )
          {
            v29 = *((_BYTE *)v43[0] + 40);
          }
          else
          {
            v29 = 0;
          }
          v33 = v29;
          if ( v29 != 22 || (_BYTE)a9 == 10 || (_BYTE)a9 == 19 || (_BYTE)a9 == 15 )
          {
            if ( a8 )
            {
              --a8;
            }
            else if ( v26 > v14 )
            {
              if ( v26 <= (unsigned __int64)v14 )
                runtime_panicIndex(v14, r1, v26, r3, r4, v26, v14, 0, a9);
              v27->i64[v14++] = r3 + 1;
            }
            if ( v26 <= v14 )
              return v14;
          }
          v39 = v14;
          v36 = a8;
          v28 = runtime__ptr_inlineUnwinder_next(v43, r3, r4, r3, r4, v26, v14, a8);
          r1 = v28._r1;
          v27 = a1;
          v26 = v47;
          r3 = v28._r0;
          r4 = LODWORD(v28._r1);
          a9 = v33;
          a8 = v36;
          v14 = v39;
        }
      }
      else
      {
        v24 = v35;
        if ( v35 )
        {
          v24 = v35 - 1;
          v25 = v47;
          v14 = v38;
        }
        else
        {
          v25 = v47;
          if ( v47 <= v38 )
          {
            v14 = v38;
          }
          else
          {
            if ( v47 <= (unsigned __int64)v38 )
              runtime_panicIndex(v38, v23._r1, v47, v17, v18, v19, v20, v21, v22);
            a1->i64[v38] = v37;
            v14 = v38 + 1;
          }
        }
        if ( v25 <= v14 )
          return v14;
        v26 = v25;
        a9 = v34;
        a8 = v24;
      }
      v12 = v40 + 1;
      v10 = v45;
      a2 = v26;
      v11 = v41;
      v13 = (unsigned int *)(unsigned int)a9;
      v9 = a8;
    }
    return v14;
  }
}

==================================================

// function name: internal_runtime_maps_typedmemmove

// 1065940: using guessed type __int64 __golang runtime_typedmemmove(_QWORD, _QWORD, _QWORD);

//----- (0000000001065A00) ----------------------------------------------------
// internal/runtime/maps.typedmemmove
__int64 internal_runtime_maps_typedmemmove()
{
  return runtime_typedmemmove();
}

==================================================

// function name: runtime_traceAdvance_func2

//----- (0000000001062D80) ----------------------------------------------------
// runtime.traceAdvance.func2
void __golang runtime_traceAdvance_func2(
        __int64 a1,
        int a2,
        __int64 a3,
        __int64 a4,
        __int64 a5,
        __int64 a6,
        __int64 a7,
        __int64 a8,
        __int64 a9)
{
  __int64 v9; // rbx
  __int64 v10; // rdi
  __int64 v11; // rsi
  __int64 v12; // r8
  __int64 v13; // r9
  __int64 v14; // r10
  __int64 v15; // r11

  runtime_lock2((volatile signed __int8 *)&runtime_trace, a2, a3, a4, a5, a6, a7, a8, a9);
  byte_11772E8 = 1;
  runtime_unlock2(&runtime_trace, v9, _InterlockedExchange64(&qword_11772D8, 0), v10, v11, v12, v13, v14, v15);
  byte_11772D0 = 0;
}

==================================================

// function name: internal_poll_runtime_pollUnblock

// 1031EC0: using guessed type __int64 __golang runtime_netpollblock(_QWORD, _QWORD, _QWORD);

//----- (0000000001066420) ----------------------------------------------------
// internal/poll.runtime_pollUnblock
__int64 __golang internal_poll_runtime_pollUnblock(
        runtime_pollDesc *a1,
        int a2,
        __int64 a3,
        __int64 a4,
        __int64 a5,
        __int64 a6,
        __int64 a7,
        __int64 a8,
        __int64 a9)
{
  __int64 v9; // rcx
  __int64 v10; // rdi
  __int64 v11; // rsi
  __int64 v12; // r8
  __int64 v13; // r9
  __int64 v14; // r10
  __int64 v15; // r11
  __int64 v16; // rdi
  __int64 v17; // rsi
  __int64 v18; // r8
  __int64 v19; // r9
  __int64 v20; // r10
  __int64 v21; // r11
  runtime_pollDesc *i; // rax
  signed __int64 value; // rcx
  runtime_pollDesc *v24; // rdx
  signed __int64 v25; // rax
  signed __int64 v26; // rax
  signed __int64 v27; // rax
  __int64 v28; // rtt
  __int64 v29; // rbx
  __int64 v30; // rcx
  __int64 v31; // rdi
  __int64 v32; // rsi
  __int64 v33; // r8
  __int64 v34; // r9
  __int64 v35; // r10
  __int64 v36; // r11
  __int64 result; // rax
  unsigned int v38; // [rsp+Ch] [rbp-2Ch]
  __int64 v39; // [rsp+10h] [rbp-28h]
  __int64 (*v40)(void); // [rsp+18h] [rbp-20h]
  __int64 (*v41)(void); // [rsp+20h] [rbp-18h]
  volatile signed __int64 *p_lock; // [rsp+28h] [rbp-10h]

  p_lock = (volatile signed __int64 *)&a1->lock;
  runtime_lock2((volatile signed __int8 *)&a1->lock, a2, a3, a4, a5, a6, a7, a8, a9);
  if ( a1->closing )
    runtime_throw(
      (__int64 (*)(void))"runtime: unblock on closing polldesc",
      (__int64 (*)(void))0x24,
      v9,
      v10,
      v11,
      v12,
      v13,
      v14,
      v15);
  a1->closing = 1;
  ++a1->rseq;
  ++a1->wseq;
  runtime__ptr_pollDesc_publishInfo(a1);
  v38 = 0;
  for ( i = a1; ; i = v24 )
  {
    value = i->rg.value;
    if ( value == 1 )
    {
      v24 = i;
      value = 0;
      goto LABEL_12;
    }
    if ( !value )
    {
      v24 = i;
      value = 0;
      goto LABEL_12;
    }
    v24 = i;
    v25 = _InterlockedCompareExchange64((volatile signed __int64 *)&i->rg, 0, value);
    LOBYTE(v17) = value == v25;
    if ( value == v25 )
      break;
  }
  if ( value == 2 )
    value = 0;
  else
    v38 = -1;
  do
  {
LABEL_12:
    v26 = v24->wg.value;
    if ( v26 == 1 )
    {
      v29 = 0;
      goto LABEL_20;
    }
    if ( !v26 )
    {
      v29 = 0;
      goto LABEL_20;
    }
    v39 = v24->wg.value;
    v28 = v39;
    v27 = _InterlockedCompareExchange64((volatile signed __int64 *)&v24->wg, 0, v26);
    LOBYTE(v17) = v28 == v27;
  }
  while ( v28 != v27 );
  v29 = v39;
  if ( v39 == 2 )
    v29 = 0;
  else
    --v38;
LABEL_20:
  v41 = (__int64 (*)(void))value;
  v40 = (__int64 (*)(void))v29;
  if ( v24->rrun )
  {
    runtime__ptr_timer_stop(&v24->rt);
    a1->rrun = 0;
    value = (signed __int64)v41;
    v24 = a1;
    v29 = (__int64)v40;
  }
  if ( v24->wrun )
  {
    runtime__ptr_timer_stop(&v24->wt);
    value = (signed __int64)a1;
    a1->wrun = 0;
  }
  runtime_unlock2(p_lock, v29, value, v16, v17, v18, v19, v20, v21);
  if ( v41 )
    runtime_netpollgoready(v41, 3, v30, v31, v32, v33, v34, v35, v36);
  if ( v40 )
    runtime_netpollgoready(v40, 3, v30, v31, v32, v33, v34, v35, v36);
  result = v38;
  if ( v38 )
    return (unsigned int)_InterlockedExchangeAdd(&runtime_netpollWaiters, v38);
  return result;
}

==================================================

// function name: runtime_netpollgoready

// 1195F98: using guessed type int runtime_netpollWaiters;

//----- (0000000001031E00) ----------------------------------------------------
// runtime.netpollgoready
unsigned __int64 __golang runtime_netpollgoready(
        __int64 (*a1)(void),
        __int64 a2,
        __int64 a3,
        __int64 a4,
        __int64 a5,
        __int64 a6,
        __int64 a7,
        __int64 a8,
        __int64 a9)
{
  __int64 (*v10[4])(void); // [rsp+8h] [rbp-20h] BYREF

  v10[0] = (__int64 (*)(void))runtime_netpollgoready_goready_func1;
  v10[1] = a1;
  v10[2] = (__int64 (*)(void))(a2 + 1);
  return runtime_systemstack((__int64)v10, a2, a2 + 1, a4, a5, a6, a7, a8, a9, v10);
}

==================================================

// function name: internal_runtime_maps__ptr_table_grow

//----- (0000000001005920) ----------------------------------------------------
// internal/runtime/maps.(*table).grow
void __golang internal_runtime_maps__ptr_table_grow(__int64 a1, __int64 a2, __int64 a3, unsigned __int16 a4)
{
  maps_table *v4; // rax
  _QWORD *v5; // rdx
  __int64 v6; // rsi
  unsigned __int64 i; // rcx
  __int64 v8; // rbx
  unsigned __int8 v9; // cl
  __int64 v10; // rsi
  __int64 k; // rcx
  __int64 v12; // rdi
  __int64 v13; // r8
  maps_table **v14; // r11
  unsigned __int64 j; // rbx
  unsigned __int64 v16; // r8
  int v17; // r9d
  __int64 v18; // r10
  unsigned __int64 v19; // r8
  __int64 v20; // r11
  unsigned __int64 v21; // rax
  unsigned __int64 v22; // [rsp+0h] [rbp-38h]
  unsigned __int64 v23; // [rsp+8h] [rbp-30h]
  __int64 v24; // [rsp+10h] [rbp-28h]
  unsigned __int64 v25; // [rsp+18h] [rbp-20h]
  __int64 v26; // [rsp+20h] [rbp-18h]
  __int64 v27; // [rsp+28h] [rbp-10h]

  v4 = internal_runtime_maps_newTable(a2, a4, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 6));
  v5 = (_QWORD *)a1;
  if ( *(_WORD *)(a1 + 2) )
  {
    v24 = (__int64)v4;
    v6 = a2;
    for ( i = 0; v5[3] >= i; ++i )
    {
      v23 = i;
      v26 = v5[2] + i * *(_QWORD *)(v6 + 80);
      for ( j = 0; j < 8; ++j )
      {
        if ( *(char *)(v26 + j) >= 0 )
        {
          v16 = j * *(_QWORD *)(v6 + 88);
          v17 = *(_DWORD *)(v6 + 104);
          v18 = v16 + v26 + 8;
          if ( (v17 & 4) != 0 )
            v18 = *(_QWORD *)(v16 + v26 + 8);
          v22 = j;
          v19 = *(_QWORD *)(v6 + 96) + v16;
          v20 = v19 + v26 + 8;
          if ( (v17 & 8) != 0 )
            v20 = *(_QWORD *)(v19 + v26 + 8);
          v27 = v20;
          v25 = v18;
          v21 = (**(__int64 (__golang ***)(__int64, _QWORD))(v6 + 72))(v18, *(_QWORD *)(a3 + 8));
          internal_runtime_maps__ptr_table_uncheckedPutSlot(v24, a2, v21, v25, v27);
          v4 = (maps_table *)v24;
          i = v23;
          v5 = (_QWORD *)a1;
          j = v22;
          v6 = a2;
        }
      }
    }
  }
  v8 = a3;
  v9 = *(_BYTE *)(a3 + 32) - v4->localDepth;
  v10 = -(__int64)(v9 < 0x40u) & (1LL << v9);
  for ( k = 0; k < v10; ++k )
  {
    v12 = k + v4->index;
    v13 = *(_QWORD *)(v8 + 16);
    if ( runtime_writeBarrier )
    {
      runtime_gcWriteBarrier2();
      *v14 = v4;
      v14[1] = *(maps_table **)(v13 + 8 * v12);
    }
    *(_QWORD *)(v13 + 8 * v12) = v4;
  }
  v5[1] = -1;
}

==================================================

// function name: runtime_hexdumpWords

// 10378C0: using guessed type __int64 __golang runtime_printhex(_QWORD);

//----- (0000000001037BA0) ----------------------------------------------------
// runtime.hexdumpWords
__int64 __golang runtime_hexdumpWords(__int64 a1, unsigned __int64 a2, __int64 (__golang **a3)(char **))
{
  __int64 v3; // r14
  __int64 i; // rax
  char **v5; // rdi
  __int64 v6; // rax
  __int64 v7; // rax
  __int64 v8; // rax
  __int64 v9; // rax
  __int64 v10; // rax
  __int64 v11; // rax
  __int64 v12; // rax
  __int64 v13; // rax
  __int64 v14; // rcx
  __int64 v15; // rbx
  __int64 v16; // rdi
  __int64 v17; // rsi
  unsigned int *v18; // r8
  unsigned int *v19; // r9
  unsigned __int64 v20; // r10
  __int64 v21; // r11
  retval_1069200 v22; // kr00_16
  retval_1052260 v23; // kr10_16
  __int64 v24; // rax
  __int64 v25; // rax
  __int64 v26; // rax
  __int64 result; // rax
  char v28; // cl
  char v29; // [rsp+1h] [rbp-49h] BYREF
  __int64 r1; // [rsp+2h] [rbp-48h]
  __int64 v31; // [rsp+Ah] [rbp-40h]
  char *v32; // [rsp+12h] [rbp-38h]
  __int64 v33; // [rsp+1Ah] [rbp-30h]
  retval_1069200 v34; // [rsp+22h] [rbp-28h]
  char **v35; // [rsp+32h] [rbp-18h]
  __int64 r0; // [rsp+3Ah] [rbp-10h]

  runtime_printlock(a1);
  v29 = 32;
  runtime_minhexdigits = 16;
  for ( i = 0; ; i = v33 + 8 )
  {
    v5 = (char **)(i + a1);
    if ( a2 <= i + a1 )
      break;
    v33 = i;
    v35 = (char **)(i + a1);
    if ( (i & 0xF) == 0 )
    {
      if ( i )
      {
        v6 = runtime_printlock(i);
        v7 = runtime_printnl(v6);
        i = runtime_printunlock(v7);
      }
      runtime_printlock(i);
      runtime_printhex(v35);
      v8 = runtime_printstring(": ", 2);
      runtime_printunlock(v8);
      v5 = v35;
    }
    if ( a3 )
    {
      v29 = (*a3)(v5);
      if ( !v29 )
        v29 = 32;
    }
    runtime_gwrite((const __m128i *)&v29, 1, 1);
    v32 = *v35;
    runtime_printlock(v9);
    v10 = runtime_printhex(v32);
    v11 = runtime_printunlock(v10);
    v12 = runtime_printlock(v11);
    v13 = runtime_printsp(v12);
    runtime_printunlock(v13);
    v22 = runtime_findfunc(v32, v15, v14, v16, v17, v18, v19, v20, v21);
    if ( v22._r0 )
    {
      v34 = v22;
      v23 = runtime__ptr_moduledata_funcName(v22._r1, *(unsigned int *)(v22._r0 + 4LL));
      r0 = v23._r0;
      r1 = v23._r1;
      v31 = runtime__ptr_moduledata_textAddr(v34._r1, *(unsigned int *)v34._r0);
      runtime_printlock(v31);
      runtime_printstring("<", 1);
      runtime_printstring(r0, r1);
      runtime_printstring("+", 1);
      runtime_printhex(&v32[-v31]);
      v24 = runtime_printstring("> ", 2);
      runtime_printunlock(v24);
    }
  }
  runtime_minhexdigits = 0;
  v25 = runtime_printlock(i);
  v26 = runtime_printnl(v25);
  runtime_printunlock(v26);
  result = *(_QWORD *)(v3 + 48);
  v28 = *(_BYTE *)(result + 279);
  *(_BYTE *)(result + 279) = v28 - 1;
  if ( v28 == 1 )
    return runtime_unlock2(&runtime_debuglock);
  return result;
}

==================================================

// function name: runtime_plainError_Error

// 100C4A0: using guessed type __int64 __golang runtime_debugCallWrap2_func1(int, int, int, int, int, int, int, int, int, char);

//----- (000000000100CAA0) ----------------------------------------------------
// runtime.plainError.Error
string __golang runtime_plainError_Error(runtime_plainError a1)
{
  return a1;
}

==================================================

// function name: runtime_traceCPUFlush_func1

// 1177138: using guessed type __int64 qword_1177138[2];

//----- (000000000105BE60) ----------------------------------------------------
// runtime.traceCPUFlush.func1
void __golang runtime_traceCPUFlush_func1(
        __int64 a1,
        int a2,
        __int64 a3,
        __int64 a4,
        __int64 a5,
        __int64 a6,
        __int64 a7,
        __int64 a8,
        __int64 a9)
{
  __int64 v9; // rdx
  __int64 v10; // rcx
  __int64 v11; // rdi
  __int64 v12; // rsi
  __int64 v13; // r8
  __int64 v14; // r9
  __int64 v15; // r10
  __int64 v16; // r11
  __int64 v17; // rcx
  __int64 v18; // rbx
  __int64 v19; // rdi
  __int64 v20; // rsi
  __int64 v21; // r8
  __int64 v22; // r9
  __int64 v23; // r10
  __int64 v24; // r11
  __int64 v25; // [rsp+0h] [rbp-20h]
  _QWORD *v26; // [rsp+8h] [rbp-18h]

  v25 = *(_QWORD *)(v9 + 16);
  v26 = *(_QWORD **)(v9 + 8);
  runtime_lock2((volatile signed __int8 *)&runtime_trace, a2, v25 & 1, a4, a5, a6, a7, a8, a9);
  runtime_traceBufFlush(v26, v25, v10, v11, v12, v13, v14, v15, v16);
  runtime_unlock2(&runtime_trace, v18, v17, v19, v20, v21, v22, v23, v24);
  qword_1177138[v25 & 1] = 0;
}

==================================================

// function name: runtime_stopTheWorld

//----- (000000000103A800) ----------------------------------------------------
// runtime.stopTheWorld
retval_103A800 __golang runtime_stopTheWorld(unsigned __int8 a1)
{
  __int64 v1; // r14
  __int64 v2; // rcx
  char *v3; // rbx
  char *v4; // rax
  __int64 r3; // rdi
  __int64 r4; // rsi
  __int64 r5; // r8
  __int64 r6; // r9
  __int64 r7; // r10
  char **r8; // r11
  __int64 (__golang *v15)(__int64, __int64, __int64, __int64, __int64, __int64, __int64, __int64, __int64); // [rsp+28h] [rbp-20h] BYREF
  unsigned __int8 v16; // [rsp+30h] [rbp-18h]
  unsigned __int64 v17; // [rsp+38h] [rbp-10h]
  retval_1049920 v19; // 0:kr40_72.72
  retval_103A800 result; // 0:rax.8,8:rbx.8,16:rcx.8,24:rdi.8

  v17 = a1;
  v19 = runtime_semacquire1(runtime_worldsema, 0, 0, 0, 18);
  r3 = v19._r3;
  r4 = v19._r4;
  r5 = v19._r5;
  r6 = v19._r6;
  r7 = v19._r7;
  r8 = (char **)v19._r8;
  if ( v17 >= 0x11 )
    runtime_panicIndex(v17, v19._r1, 17, v19._r3, v19._r4, v19._r5, v19._r6, v19._r7, v19._r8);
  v2 = *(_QWORD *)(v1 + 48);
  v3 = (&runtime_stwReasonStrings)[2 * v17 + 1];
  v4 = (&runtime_stwReasonStrings)[2 * v17];
  *(_QWORD *)(v2 + 256) = v3;
  if ( runtime_writeBarrier )
  {
    runtime_gcWriteBarrier2();
    *r8 = v4;
    r8[1] = *(char **)(v2 + 248);
  }
  *(_QWORD *)(v2 + 248) = v4;
  v15 = runtime_stopTheWorld_func1;
  v16 = a1;
  runtime_systemstack((__int64)&v15, (__int64)v3, v2, r3, r4, r5, r6, r7, (__int64)r8, (__int64 (**)(void))&v15);
  result._r0 = (unsigned __int8)runtime_stopTheWorldContext;
  result._r1 = qword_11962A8;
  result._r2 = qword_11962B0;
  result._r3 = qword_11962B8;
  return result;
}

==================================================

// function name: runtime_memequal8

// 10094A0: using guessed type __int64 runtime_memequal0();

//----- (00000000010094C0) ----------------------------------------------------
// runtime.memequal8
bool __golang runtime_memequal8(_BYTE *a1, _BYTE *a2)
{
  return *a2 == *a1;
}

==================================================

// function name: internal_cpu_doinit

//----- (0000000001001FE0) ----------------------------------------------------
// internal/cpu.doinit
void internal_cpu_doinit()
{
  _7_cpu_option *p__7_cpu_option; // rax
  _7_cpu_option **v1; // r11
  int GOAMD64level; // eax
  __int64 r1; // rbx
  __int64 v4; // rdx
  __int64 *v5; // r11
  __int64 v6; // r8
  __int64 v7; // r9
  _QWORD *v8; // r11
  __int64 v9; // rdx
  __int64 v10; // r8
  __int64 v11; // r9
  _QWORD *v12; // r11
  __int64 v13; // rbx
  __int64 v14; // rdx
  __int64 *v15; // r11
  __int64 v16; // r8
  __int64 v17; // r9
  _QWORD *v18; // r11
  __int64 v19; // rdx
  __int64 v20; // r8
  __int64 v21; // r9
  _QWORD *v22; // r11
  __int64 v23; // rbx
  __int64 v24; // rax
  __int64 *v25; // r11
  __int64 v26; // rcx
  __int64 v27; // rdx
  _QWORD *v28; // r11
  unsigned int v29; // eax
  int v30; // eax
  bool v31; // cl
  bool v32; // dl
  bool v33; // al
  __int64 r0; // rax
  __int64 v35; // rax
  char v36; // [rsp+0h] [rbp-58h]
  retval_1002880 v37; // [rsp+8h] [rbp-50h]
  retval_1002880 v38; // [rsp+8h] [rbp-50h]
  bool v39; // [rsp+42h] [rbp-16h]
  bool v40; // [rsp+43h] [rbp-15h]
  unsigned int v41; // [rsp+44h] [rbp-14h]
  retval_10028C0 v42; // [rsp+48h] [rbp-10h]
  retval_1068120 v43; // 0:kr00_24.24
  retval_1068120 v44; // 0:kr28_24.24
  retval_1068120 v45; // 0:kr40_24.24

  p__7_cpu_option = (_7_cpu_option *)runtime_newobject(&RTYPE__7_cpu_option);
  (*p__7_cpu_option)[0].Name.len = 3;
  (*p__7_cpu_option)[0].Name.ptr = "adx";
  (*p__7_cpu_option)[0].Feature = (_ptr_bool)&byte_11966A1;
  (*p__7_cpu_option)[1].Name.len = 3;
  (*p__7_cpu_option)[1].Name.ptr = "aes";
  (*p__7_cpu_option)[1].Feature = (_ptr_bool)&byte_11966A0;
  (*p__7_cpu_option)[2].Name.len = 4;
  (*p__7_cpu_option)[2].Name.ptr = "erms";
  (*p__7_cpu_option)[2].Feature = (_ptr_bool)&byte_11966A9;
  (*p__7_cpu_option)[3].Name.len = 4;
  (*p__7_cpu_option)[3].Name.ptr = "fsrm";
  (*p__7_cpu_option)[3].Feature = (_ptr_bool)&byte_11966AA;
  (*p__7_cpu_option)[4].Name.len = 9;
  (*p__7_cpu_option)[4].Name.ptr = "pclmulqdq";
  (*p__7_cpu_option)[4].Feature = (_ptr_bool)&byte_11966AD;
  (*p__7_cpu_option)[5].Name.len = 6;
  (*p__7_cpu_option)[5].Name.ptr = "rdtscp";
  (*p__7_cpu_option)[5].Feature = (_ptr_bool)&byte_11966AF;
  (*p__7_cpu_option)[6].Name.len = 3;
  (*p__7_cpu_option)[6].Name.ptr = "sha";
  (*p__7_cpu_option)[6].Feature = (_ptr_bool)&byte_11966B0;
  qword_1176338 = 7;
  qword_1176340 = 7;
  if ( runtime_writeBarrier )
  {
    runtime_gcWriteBarrier2();
    *v1 = p__7_cpu_option;
    v1[1] = (_7_cpu_option *)internal_cpu_options;
  }
  internal_cpu_options = (__int64)p__7_cpu_option;
  GOAMD64level = (int)internal_cpu_getGOAMD64level();
  v42 = (retval_10028C0)GOAMD64level;
  if ( GOAMD64level < 2 )
  {
    r1 = qword_1176338 + 5;
    v4 = internal_cpu_options;
    if ( qword_1176340 < (unsigned __int64)(qword_1176338 + 5) )
    {
      v43 = runtime_growslice(internal_cpu_options, r1, qword_1176340, 5, &RTYPE_cpu_option);
      r0 = v43._r0;
      r1 = v43._r1;
      qword_1176340 = v43._r2;
      if ( runtime_writeBarrier )
      {
        runtime_gcWriteBarrier2();
        *v5 = r0;
        v5[1] = internal_cpu_options;
      }
      internal_cpu_options = r0;
      v4 = r0;
      GOAMD64level = (int)v42;
    }
    qword_1176338 = r1;
    v6 = 32 * (r1 - 5);
    *(_QWORD *)(v4 + v6 + 8) = 6;
    *(_WORD *)(v4 + v6 + 24) = 0;
    if ( runtime_writeBarrier )
    {
      runtime_gcWriteBarrier8();
      *v8 = v7;
      v8[1] = *(_QWORD *)(v9 + v10 + 16);
      v8[2] = *(_QWORD *)(v9 + v10 + 32);
      v8[3] = *(_QWORD *)(v9 + v10 + 48);
      v8[4] = *(_QWORD *)(v9 + v10 + 64);
      v8[5] = *(_QWORD *)(v9 + v10 + 80);
      v8[6] = *(_QWORD *)(v9 + v10 + 96);
      v8[7] = *(_QWORD *)(v9 + v10 + 112);
      runtime_gcWriteBarrier2();
      *v12 = v11;
      v12[1] = *(_QWORD *)(v4 + v6 + 144);
    }
    *(_QWORD *)(v4 + v6) = "popcnt";
    *(_QWORD *)(v4 + v6 + 16) = &byte_11966AE;
    *(_QWORD *)(v4 + v6 + 40) = 4;
    *(_WORD *)(v4 + v6 + 56) = 0;
    *(_QWORD *)(v4 + v6 + 32) = "sse3";
    *(_QWORD *)(v4 + v6 + 48) = &byte_11966B1;
    *(_QWORD *)(v4 + v6 + 72) = 5;
    *(_WORD *)(v4 + v6 + 88) = 0;
    *(_QWORD *)(v4 + v6 + 64) = "sse41";
    *(_QWORD *)(v4 + v6 + 80) = &byte_11966B3;
    *(_QWORD *)(v4 + v6 + 104) = 5;
    *(_WORD *)(v4 + v6 + 120) = 0;
    *(_QWORD *)(v4 + v6 + 96) = "sse42";
    *(_QWORD *)(v4 + v6 + 112) = &byte_11966B4;
    *(_QWORD *)(v4 + v6 + 136) = 5;
    *(_WORD *)(v4 + v6 + 152) = 0;
    *(_QWORD *)(v4 + v6 + 128) = "ssse3";
    *(_QWORD *)(v4 + v6 + 144) = &byte_11966B2;
  }
  if ( GOAMD64level < 3 )
  {
    v13 = qword_1176338 + 5;
    v14 = internal_cpu_options;
    if ( qword_1176340 < (unsigned __int64)(qword_1176338 + 5) )
    {
      v44 = runtime_growslice(internal_cpu_options, v13, qword_1176340, 5, &RTYPE_cpu_option);
      v35 = v44._r0;
      v13 = v44._r1;
      qword_1176340 = v44._r2;
      if ( runtime_writeBarrier )
      {
        runtime_gcWriteBarrier2();
        *v15 = v35;
        v15[1] = internal_cpu_options;
      }
      internal_cpu_options = v35;
      v14 = v35;
      GOAMD64level = (int)v42;
    }
    qword_1176338 = v13;
    v16 = 32 * (v13 - 5);
    *(_QWORD *)(v14 + v16 + 8) = 3;
    *(_WORD *)(v14 + v16 + 24) = 0;
    if ( runtime_writeBarrier )
    {
      runtime_gcWriteBarrier8();
      *v18 = v17;
      v18[1] = *(_QWORD *)(v19 + v20 + 16);
      v18[2] = *(_QWORD *)(v19 + v20 + 32);
      v18[3] = *(_QWORD *)(v19 + v20 + 48);
      v18[4] = *(_QWORD *)(v19 + v20 + 64);
      v18[5] = *(_QWORD *)(v19 + v20 + 80);
      v18[6] = *(_QWORD *)(v19 + v20 + 96);
      v18[7] = *(_QWORD *)(v19 + v20 + 112);
      runtime_gcWriteBarrier2();
      *v22 = v21;
      v22[1] = *(_QWORD *)(v14 + v16 + 144);
    }
    *(_QWORD *)(v14 + v16) = "avx";
    *(_QWORD *)(v14 + v16 + 16) = &byte_11966A2;
    *(_QWORD *)(v14 + v16 + 40) = 4;
    *(_WORD *)(v14 + v16 + 56) = 0;
    *(_QWORD *)(v14 + v16 + 32) = "avx2";
    *(_QWORD *)(v14 + v16 + 48) = &byte_11966A3;
    *(_QWORD *)(v14 + v16 + 72) = 4;
    *(_WORD *)(v14 + v16 + 88) = 0;
    *(_QWORD *)(v14 + v16 + 64) = "bmi1";
    *(_QWORD *)(v14 + v16 + 80) = &byte_11966A7;
    *(_QWORD *)(v14 + v16 + 104) = 4;
    *(_WORD *)(v14 + v16 + 120) = 0;
    *(_QWORD *)(v14 + v16 + 96) = "bmi2";
    *(_QWORD *)(v14 + v16 + 112) = &byte_11966A8;
    *(_QWORD *)(v14 + v16 + 136) = 3;
    *(_WORD *)(v14 + v16 + 152) = 0;
    *(_QWORD *)(v14 + v16 + 128) = "fma";
    *(_QWORD *)(v14 + v16 + 144) = &byte_11966AB;
  }
  if ( GOAMD64level < 4 )
  {
    v23 = qword_1176338 + 3;
    v24 = internal_cpu_options;
    if ( qword_1176340 < (unsigned __int64)(qword_1176338 + 3) )
    {
      v45 = runtime_growslice(internal_cpu_options, v23, qword_1176340, 3, &RTYPE_cpu_option);
      v24 = v45._r0;
      v23 = v45._r1;
      qword_1176340 = v45._r2;
      if ( runtime_writeBarrier )
      {
        runtime_gcWriteBarrier2();
        *v25 = v24;
        v25[1] = internal_cpu_options;
      }
      internal_cpu_options = v24;
    }
    qword_1176338 = v23;
    v26 = 32 * (v23 - 3);
    *(_QWORD *)(v24 + v26 + 8) = 7;
    *(_WORD *)(v24 + v26 + 24) = 0;
    if ( runtime_writeBarrier )
    {
      runtime_gcWriteBarrier6();
      *v28 = v27;
      v28[1] = *(_QWORD *)(v24 + v26 + 16);
      v28[2] = *(_QWORD *)(v24 + v26 + 32);
      v28[3] = *(_QWORD *)(v24 + v26 + 48);
      v28[4] = *(_QWORD *)(v24 + v26 + 64);
      v28[5] = *(_QWORD *)(v24 + v26 + 80);
    }
    *(_QWORD *)(v24 + v26) = "avx512f";
    *(_QWORD *)(v24 + v26 + 16) = &byte_11966A4;
    *(_QWORD *)(v24 + v26 + 40) = 8;
    *(_WORD *)(v24 + v26 + 56) = 0;
    *(_QWORD *)(v24 + v26 + 32) = "avx512bw";
    *(_QWORD *)(v24 + v26 + 48) = &byte_11966A5;
    *(_QWORD *)(v24 + v26 + 72) = 8;
    *(_WORD *)(v24 + v26 + 88) = 0;
    *(_QWORD *)(v24 + v26 + 64) = "avx512vl";
    *(_QWORD *)(v24 + v26 + 80) = &byte_11966A6;
  }
  v29 = internal_cpu_cpuid(0)._r0[0];
  if ( v29 )
  {
    v41 = v29;
    internal_cpu_maxExtendedFunctionInformation = internal_cpu_cpuid(0x80000000)._r0[0];
    v37 = internal_cpu_cpuid(1u);
    v30 = v37._r0[1];
    byte_11966B1 = (v37._r0[1] & 1) != 0;
    byte_11966AD = (v37._r0[1] & 2) != 0;
    byte_11966B2 = (v37._r0[1] & 0x200) != 0;
    byte_11966B3 = (v37._r0[1] & 0x80000) != 0;
    byte_11966B4 = (v37._r0[1] & 0x100000) != 0;
    byte_11966AE = (v37._r0[1] & 0x800000) != 0;
    byte_11966A0 = (v37._r0[1] & 0x2000000) != 0;
    byte_11966AC = (v37._r0[1] & 0x8000000) != 0;
    byte_11966AB = (v37._r0[1] & 0x8000000) != 0 && (v37._r0[1] & 0x1000) != 0;
    if ( (v37._r0[1] & 0x8000000) != 0 )
    {
      v36 = internal_cpu_xgetbv(v37._r0[1])._r0[0];
      v31 = (v36 & 2) != 0 && (v36 & 4) != 0;
      v33 = v31 && (v36 & 0x20) != 0 && (v36 & 0x40) != 0 && v36 < 0;
      v32 = v33;
      v30 = v37._r0[1];
    }
    else
    {
      v31 = 0;
      v32 = 0;
    }
    byte_11966A2 = v31 && (v30 & 0x10000000) != 0;
    if ( v41 >= 7 )
    {
      v39 = v32;
      v40 = v31;
      v38 = internal_cpu_cpuid(7u);
      byte_11966A7 = (v38._r0[0] & 0x800000000LL) != 0;
      byte_11966A3 = (v38._r0[0] & 0x2000000000LL) != 0 && v40;
      byte_11966A8 = (v38._r0[0] & 0x10000000000LL) != 0;
      byte_11966A9 = (v38._r0[0] & 0x20000000000LL) != 0;
      byte_11966A1 = (v38._r0[0] & 0x8000000000000LL) != 0;
      byte_11966B0 = (v38._r0[0] & 0x2000000000000000LL) != 0;
      byte_11966A4 = (v38._r0[0] & 0x1000000000000LL) != 0 && v39;
      if ( byte_11966A4 )
      {
        byte_11966A5 = (v38._r0[0] & 0x4000000000000000LL) != 0;
        byte_11966A6 = v38._r0[0] < 0;
      }
      byte_11966AA = (v38._r0[1] & 0x1000000000LL) != 0;
      if ( (unsigned int)internal_cpu_cpuid(0x80000000)._r0[0] >= 0x80000001 )
        byte_11966AF = (internal_cpu_cpuid(0x80000001)._r0[1] & 0x800000000000000LL) != 0;
    }
  }
}

==================================================

// function name: internal_cpu_xgetbv

//----- (00000000010028A0) ----------------------------------------------------
// internal/cpu.xgetbv
retval_10028A0 __golang internal_cpu_xgetbv(unsigned int a1)
{
  unsigned int v1; // edx

  __asm { xgetbv }
  return (retval_10028A0)__PAIR64__(v1, a1);
}

==================================================

// function name: internal_cpu_getGOAMD64level

// 10028A8: variable 'v1' is possibly undefined

//----- (00000000010028C0) ----------------------------------------------------
// internal/cpu.getGOAMD64level
retval_10028C0 __gostk internal_cpu_getGOAMD64level()
{
  return (retval_10028C0)1;
}

==================================================

// function name: runtime_mapassign_fast64

// 1197140: using guessed type __int64 runtime_zeroVal[128];

//----- (00000000010066A0) ----------------------------------------------------
// runtime.mapassign_fast64
__int64 __golang runtime_mapassign_fast64(__int64 a1, __int64 a2, unsigned __int64 a3)
{
  unsigned __int64 v3; // rax
  __int64 v4; // rcx
  unsigned __int64 v5; // rdx
  _QWORD *v6; // rbx
  __int64 result; // rax
  __int64 v8; // rdx
  unsigned __int64 v9; // rsi
  __int64 v10; // rsi
  __int64 v11; // rdi
  unsigned __int64 v12; // r8
  unsigned __int64 v13; // rax
  __int64 v14; // r9
  unsigned __int64 *v15; // r10
  __int64 v16; // r11
  __int64 v17; // rax
  unsigned __int64 *v18; // r12
  unsigned __int64 v19; // r13
  __m128i v20; // xmm1
  unsigned __int64 v21; // r15
  __int64 v22; // r15
  unsigned __int64 v23; // r13
  unsigned __int64 v24; // r8
  __int64 v25; // rdi
  unsigned __int64 *v26; // r8
  __int64 v27; // rdx
  RTYPE *v28; // rcx
  char v29; // [rsp+18h] [rbp-38h]
  unsigned __int64 v30; // [rsp+20h] [rbp-30h] BYREF
  unsigned __int64 v31; // [rsp+28h] [rbp-28h]
  __int64 v32; // [rsp+30h] [rbp-20h]
  unsigned __int64 *v33; // [rsp+38h] [rbp-18h]
  __int64 v34; // [rsp+40h] [rbp-10h]
  __int64 v35; // [rsp+58h] [rbp+8h]
  __int64 v36; // [rsp+60h] [rbp+10h]
  unsigned __int64 v37; // [rsp+68h] [rbp+18h]

  if ( !a2 )
  {
    v28 = (RTYPE *)internal_runtime_maps_errNilAssign;
    if ( internal_runtime_maps_errNilAssign )
      v28 = internal_runtime_maps_errNilAssign[1];
    runtime_gopanic(v28, off_11714B8);
  }
  v35 = a1;
  v36 = a2;
  v37 = a3;
  if ( *(_BYTE *)(a2 + 34) )
  {
    internal_runtime_maps_fatal((__int64 (*)(void))"concurrent map writes", (__int64 (*)(void))0x15);
    a1 = v35;
    a3 = v37;
    a2 = v36;
  }
  v30 = a3;
  v3 = (**(__int64 (__golang ***)(unsigned __int64 *, _QWORD))(a1 + 72))(&v30, *(_QWORD *)(a2 + 8));
  v31 = v3;
  v4 = v36;
  *(_BYTE *)(v36 + 34) ^= 1u;
  if ( !*(_QWORD *)(v36 + 16) )
  {
    internal_runtime_maps__ptr_Map_growToSmall(v36, v35);
    v3 = v31;
    v4 = v36;
  }
  if ( !*(_QWORD *)(v4 + 24) )
  {
    if ( *(_QWORD *)v4 < 8u )
    {
      result = internal_runtime_maps__ptr_Map_putSlotSmallFast64((_QWORD *)v4, v35, v3, v37);
      v8 = v36;
      if ( !*(_BYTE *)(v36 + 34) )
      {
        v34 = result;
        internal_runtime_maps_fatal((__int64 (*)(void))"concurrent map writes", (__int64 (*)(void))0x15);
        result = v34;
        v8 = v36;
      }
      *(_BYTE *)(v8 + 34) ^= 1u;
      return result;
    }
    internal_runtime_maps__ptr_Map_growToTable(v4, v35);
    v3 = v31;
    v4 = v36;
  }
  v5 = v37;
  v6 = (_QWORD *)v35;
  while ( 2 )
  {
    if ( *(_QWORD *)(v4 + 24) == 1 )
      v9 = 0;
    else
      v9 = v3 >> *(_BYTE *)(v4 + 33);
    v10 = *(_QWORD *)(*(_QWORD *)(v4 + 16) + 8 * v9);
    v11 = *(_QWORD *)(v10 + 24);
    v12 = v3;
    v13 = v11 & (v3 >> 7);
    v14 = 0;
    v15 = 0;
    v16 = 0;
    while ( 2 )
    {
      v18 = (unsigned __int64 *)(*(_QWORD *)(v10 + 16) + v13 * v6[10]);
      v19 = v12;
      v29 = v12 & 0x7F;
      v33 = v18;
      v20 = (__m128i)*v18;
      v21 = (unsigned __int8)_mm_movemask_epi8(
                               _mm_cmpeq_epi8(
                                 _mm_shufflelo_epi16(_mm_unpacklo_epi8((__m128i)(v12 & 0x7F), (__m128i)(v12 & 0x7F)), 0),
                                 v20));
      while ( v21 )
      {
        _BitScanForward64(&v23, v21);
        v24 = v23 * v6[11];
        if ( *(unsigned __int64 *)((char *)v18 + v24 + 8) == v5 )
        {
          v27 = (__int64)v18 + v24 + v6[12] + 8;
          goto LABEL_35;
        }
        v21 &= v21 - 1;
        v19 = v31;
      }
      LODWORD(v22) = _mm_movemask_epi8(v20);
      if ( !(_DWORD)v22 )
      {
        v18 = v15;
        v22 = v16;
LABEL_23:
        v17 = v14 + v13 + 1;
        ++v14;
        v13 = v11 & v17;
        v12 = v19;
        v15 = v18;
        v16 = v22;
        continue;
      }
      break;
    }
    _BitScanForward64((unsigned __int64 *)&v22, (unsigned int)v22);
    if ( *((_BYTE *)v18 + v22) == 0xFE )
    {
      if ( v15 )
      {
        v18 = v15;
        v22 = v16;
      }
      goto LABEL_23;
    }
    if ( v15 )
    {
      v33 = v15;
      ++*(_WORD *)(v10 + 4);
    }
    else
    {
      v16 = v22;
    }
    if ( !*(_WORD *)(v10 + 4) )
    {
      internal_runtime_maps__ptr_table_rehash(v10, (__int64)v6, v4);
      v4 = v36;
      v6 = (_QWORD *)v35;
      v3 = v31;
      v5 = v37;
      continue;
    }
    break;
  }
  *(unsigned __int64 *)((char *)v33 + v16 * v6[11] + 8) = v5;
  v25 = v6[12] + v16 * v6[11];
  v26 = v33;
  *((_BYTE *)v33 + v16) = v29;
  --*(_WORD *)(v10 + 4);
  ++*(_WORD *)v10;
  ++*(_QWORD *)v4;
  v27 = (__int64)v26 + v25 + 8;
LABEL_35:
  if ( !*(_BYTE *)(v4 + 34) )
  {
    v32 = v27;
    internal_runtime_maps_fatal((__int64 (*)(void))"concurrent map writes", (__int64 (*)(void))0x15);
    v4 = v36;
    v27 = v32;
  }
  *(_BYTE *)(v4 + 34) ^= 1u;
  return v27;
}

==================================================

// function name: internal_runtime_maps__ptr_Map_putSlotSmallFast64

return (__int64)v15 + v13 + 8;

//----- (00000000010040A0) ----------------------------------------------------
// internal/runtime/maps.(*Map).putSlotSmallFast64
__int64 __golang internal_runtime_maps__ptr_Map_putSlotSmallFast64(
        _QWORD *a1,
        __int64 a2,
        char a3,
        unsigned __int64 a4)
{
  unsigned __int64 *v4; // rdx
  unsigned int v5; // ecx
  __m128i v6; // xmm1
  unsigned __int64 i; // rsi
  unsigned __int64 v8; // r9
  unsigned __int64 v9; // r8
  unsigned __int64 v11; // rdx
  unsigned __int64 v13; // rsi
  char v14; // [rsp+2h] [rbp-18h]
  unsigned __int64 *v15; // [rsp+Ah] [rbp-10h]
  _QWORD *v16; // [rsp+22h] [rbp+8h]
  __int64 v17; // [rsp+2Ah] [rbp+10h]
  unsigned __int64 v18; // [rsp+3Ah] [rbp+20h]

  v4 = (unsigned __int64 *)a1[2];
  v15 = v4;
  v5 = a3 & 0x7F;
  v6 = (__m128i)*v4;
  for ( i = (unsigned __int8)_mm_movemask_epi8(_mm_cmpeq_epi8(_mm_shufflelo_epi16(_mm_unpacklo_epi8((__m128i)v5, (__m128i)v5), 0), v6));
        i;
        i &= i - 1 )
  {
    _BitScanForward64(&v8, i);
    v9 = v8 * *(_QWORD *)(a2 + 88);
    if ( *(unsigned __int64 *)((char *)v4 + v9 + 8) == a4 )
      return (__int64)v4 + v9 + *(_QWORD *)(a2 + 96) + 8;
  }
  v11 = (unsigned int)_mm_movemask_epi8(v6);
  if ( !(_DWORD)v11 )
  {
    v16 = a1;
    v17 = a2;
    v18 = a4;
    v14 = v5;
    internal_runtime_maps_fatal(
      (__int64 (*)(void))"small map with no empty slot (concurrent map writes?)",
      (__int64 (*)(void))0x35);
    a1 = v16;
    LOBYTE(v5) = v14;
    v11 = 0;
    a2 = v17;
    a4 = v18;
  }
  if ( !_BitScanForward64(&v11, v11) )
    v11 = 64;
  *(unsigned __int64 *)((char *)v15 + v11 * *(_QWORD *)(a2 + 88) + 8) = a4;
  v13 = *(_QWORD *)(a2 + 96) + v11 * *(_QWORD *)(a2 + 88);
  *((_BYTE *)v15 + v11) = v5;
  ++*a1;
  return (__int64)v15 + v13 + 8;
}

==================================================

// function name: runtime_syncadjustsudogs

// 116D220: using guessed type MODULEDATA120 runtime_firstmoduledata;

//----- (000000000104E520) ----------------------------------------------------
// runtime.syncadjustsudogs
__int64 __golang runtime_syncadjustsudogs(
        __int64 a1,
        __int64 a2,
        unsigned __int64 *a3,
        __int64 a4,
        __int64 a5,
        __int64 a6,
        __int64 a7,
        __int64 a8,
        __int64 a9)
{
  __int64 v9; // rdx
  unsigned __int64 v10; // rsi
  __int64 v12; // rdi
  __int64 i; // rdx
  unsigned __int64 v14; // rdx
  __int64 v15; // rcx
  const __m128i *v16; // rsi
  __int64 v17; // rdx
  __int64 v18; // rax
  __int64 v19; // rbx
  __int64 v20; // [rsp+0h] [rbp-20h]
  __int64 v21; // [rsp+0h] [rbp-20h]
  __int64 v22; // [rsp+8h] [rbp-18h]
  __int64 v23; // [rsp+10h] [rbp-10h]
  __int64 v24; // [rsp+28h] [rbp+8h]
  __int64 v25; // [rsp+30h] [rbp+10h]
  unsigned __int64 *v26; // [rsp+38h] [rbp+18h]

  v9 = *(_QWORD *)(a1 + 320);
  if ( !v9 )
    return 0;
  v24 = a1;
  v25 = a2;
  v26 = a3;
  v10 = 0;
  while ( v9 )
  {
    v12 = *(_QWORD *)(v9 + 80);
    if ( v10 != v12 )
    {
      v23 = v9;
      runtime_lock2((volatile signed __int8 *)(v12 + 96), a2, (__int64)a3, v12, v10, a6, a7, a8, a9);
      a1 = v24;
      a3 = v26;
      v9 = v23;
      a2 = v25;
    }
    a4 = *(_QWORD *)(v9 + 64);
    v10 = *(_QWORD *)(v9 + 80);
    v9 = a4;
  }
  for ( i = *(_QWORD *)(a1 + 320); i; i = *(_QWORD *)(i + 64) )
  {
    v10 = *(_QWORD *)(i + 24);
    if ( *a3 <= v10 && a3[1] > v10 )
    {
      a4 = a3[2];
      v10 += a4;
      *(_QWORD *)(i + 24) = v10;
    }
  }
  v14 = a3[3];
  if ( v14 )
  {
    v16 = (const __m128i *)(a3[1] - a2);
    v20 = v14 - (_QWORD)v16;
    runtime_memmove((__m128i *)((char *)v16 + a3[2]), v16, v14 - (_QWORD)v16);
    a1 = v24;
    v15 = v20;
  }
  else
  {
    v15 = 0;
  }
  v21 = v15;
  v17 = *(_QWORD *)(a1 + 320);
  v18 = 0;
  while ( v17 )
  {
    v19 = *(_QWORD *)(v17 + 80);
    if ( v18 != v19 )
    {
      v22 = v17;
      runtime_unlock2((volatile signed __int64 *)(v19 + 96), v19, v15, a4, v10, a6, a7, a8, a9);
      v15 = v21;
      v17 = v22;
    }
    v18 = *(_QWORD *)(v17 + 80);
    v17 = *(_QWORD *)(v17 + 64);
  }
  return v15;
}

==================================================

// function name: internal_runtime_maps__ptr_Map_getWithKeySmall

//----- (0000000001003920) ----------------------------------------------------
// internal/runtime/maps.(*Map).getWithKeySmall
retval_1003920 __golang internal_runtime_maps__ptr_Map_getWithKeySmall(__int64 a1, __int64 a2, char a3, __int64 a4)
{
  unsigned __int64 v4; // rsi
  char v5; // cl
  unsigned __int64 i; // rax
  _QWORD *v7; // r8
  _QWORD *v8; // rsi
  char v12; // [rsp+0h] [rbp-30h]
  unsigned __int64 v13; // [rsp+8h] [rbp-28h]
  unsigned __int64 v14; // [rsp+10h] [rbp-20h]
  _QWORD *v15; // [rsp+18h] [rbp-18h]
  unsigned __int64 *v16; // [rsp+20h] [rbp-10h]
  __int64 v17; // [rsp+40h] [rbp+10h]
  __int64 v18; // [rsp+50h] [rbp+20h]
  retval_1003920 result; // 0:rax.8,8:rbx.8,16:rcx.8

  v17 = a2;
  v18 = a4;
  v16 = *(unsigned __int64 **)(a1 + 16);
  v4 = *v16;
  v5 = a3 & 0x7F;
  v12 = v5;
  for ( i = 0; ; ++i )
  {
    if ( i >= 8 )
    {
      result._r0 = 0;
      result._r1 = 0;
      result._r2 = 0;
      return result;
    }
    if ( (_BYTE)v4 == v5 )
      break;
LABEL_2:
    v4 >>= 8;
  }
  v13 = i;
  v14 = v4;
  v7 = (unsigned __int64 *)((char *)v16 + i * *(_QWORD *)(a2 + 88) + 8);
  if ( (*(_DWORD *)(a2 + 104) & 4) != 0 )
    v7 = (_QWORD *)*v7;
  v15 = v7;
  if ( !(**(unsigned __int8 (__golang ***)(__int64, _QWORD *))(*(_QWORD *)(a2 + 48) + 24LL))(a4, v7) )
  {
    i = v13;
    v5 = v12;
    a2 = v17;
    v4 = v14;
    a4 = v18;
    goto LABEL_2;
  }
  v8 = (unsigned __int64 *)((char *)v16 + *(_QWORD *)(v17 + 96) + v13 * *(_QWORD *)(v17 + 88) + 8);
  if ( (*(_DWORD *)(v17 + 104) & 8) != 0 )
    v8 = (_QWORD *)*v8;
  result._r0 = v15;
  result._r1 = v8;
  result._r2 = 1;
  return result;
}

==================================================

// function name: runtime_badmorestackg0_func1

// 1038B61: variable 'v9' is possibly undefined
// 1038B80: using guessed type void __golang __noreturn runtime_badmorestackg0_func1();

//----- (0000000001038B80) ----------------------------------------------------
// runtime.badmorestackg0.func1
void __golang __noreturn runtime_badmorestackg0_func1()
{
  __int64 v0; // rdx
  __int64 v1; // rax
  __int64 v2; // rax
  __int64 v3; // rax
  __int64 v4; // rax
  __int64 v5; // rax
  __int64 v6; // rcx
  __int64 v7; // rdi
  __int64 v8; // rsi
  __int64 v9; // r8
  __int64 v10; // r9
  __int64 v11; // r10
  __int64 v12; // r11
  __int64 v13; // [rsp+0h] [rbp-28h]
  __int64 v14; // [rsp+8h] [rbp-20h]
  __int64 v15; // [rsp+10h] [rbp-18h]
  __int64 *v16; // [rsp+18h] [rbp-10h]

  v16 = *(__int64 **)(v0 + 8);
  v15 = *v16;
  v14 = v16[1];
  v13 = v16[7];
  runtime_printlock(v13);
  runtime_printstring("runtime: morestack on g0, stack [", 33);
  v1 = runtime_printhex(v15);
  runtime_printsp(v1);
  runtime_printhex(v14);
  runtime_printstring("], sp=", 6);
  runtime_printhex(v13);
  v2 = runtime_printstring(", called from\n", 14);
  runtime_printunlock(v2);
  *(_BYTE *)(v16[6] + 290) = 2;
  v3 = runtime_traceback1(v16[8], v16[7], v16[12], v16, 0);
  v4 = runtime_printlock(v3);
  v5 = runtime_printnl(v4);
  runtime_printunlock(v5);
  runtime_throw((__int64 (*)(void))"morestack on g0", (__int64 (*)(void))0xF, v6, v7, v8, v9, v10, v11, v12);
}

==================================================

// function name: runtime_chanlen

//----- (000000000100B720) ----------------------------------------------------
// runtime.chanlen
__int64 __golang runtime_chanlen(_QWORD *a1)
{
  int v1; // ecx
  runtime_timer *v2; // rdx
  int v4; // [rsp+0h] [rbp-Ch]
  _QWORD *v5; // [rsp+14h] [rbp+8h]

  if ( !a1 )
    return 0;
  v1 = dword_1196558;
  v2 = (runtime_timer *)a1[4];
  if ( v2 && dword_1196558 )
  {
    v5 = a1;
    v4 = dword_1196558;
    runtime__ptr_timer_maybeRunChan(v2);
    a1 = v5;
    v1 = v4;
  }
  if ( !a1[4] || v1 )
    return *a1;
  else
    return 0;
}

==================================================

// function name: internal_runtime_exithook_Run

//----- (0000000001008200) ----------------------------------------------------
// internal/runtime/exithook.Run
__int64 __golang internal_runtime_exithook_Run(__int64 a1)
{
  __int64 v1; // rbx
  __int64 v2; // rdi
  __int64 v3; // rsi
  __int64 v4; // r8
  __int64 v5; // r9
  __int64 v6; // r10
  __int64 v7; // r11
  __int64 v8; // rax
  __int64 v9; // rcx
  _QWORD *v10; // rdx
  __int64 v11; // rcx
  char v13; // [rsp-16h] [rbp-58h]
  _QWORD v14[2]; // [rsp+2h] [rbp-40h] BYREF
  _QWORD v15[2]; // [rsp+12h] [rbp-30h] BYREF
  __int64 (**v16)(void); // [rsp+22h] [rbp-20h]
  __int128 v17; // [rsp+2Ah] [rbp-18h]

  v16 = 0;
  v17 = 0;
  while ( _InterlockedCompareExchange(&internal_runtime_exithook_locked, 1, 0) )
  {
    if ( (*(__int64 (**)(void))internal_runtime_exithook_Goid)() == internal_runtime_exithook_runGoid )
      (*(void (__golang **)(const char *, __int64))internal_runtime_exithook_Throw)("exit hook invoked exit", 22);
    (*(void (**)(void))internal_runtime_exithook_Gosched)();
  }
  v15[0] = internal_runtime_exithook_Run_deferwrap1;
  v15[1] = &internal_runtime_exithook_locked;
  v16 = (__int64 (**)(void))v15;
  _InterlockedExchange64(&internal_runtime_exithook_runGoid, (*(__int64 (**)(void))internal_runtime_exithook_Goid)());
  v14[0] = internal_runtime_exithook_Run_deferwrap2;
  v14[1] = &internal_runtime_exithook_runGoid;
  *(_QWORD *)&v17 = v14;
  *((_QWORD *)&v17 + 1) = &off_10EADC0;
  v8 = a1;
  while ( qword_1176358 )
  {
    v1 = internal_runtime_exithook_hooks;
    v3 = qword_1176358 - 1;
    v9 = 16 * (qword_1176358 - 1);
    v10 = *(_QWORD **)(internal_runtime_exithook_hooks + v9);
    v11 = *(unsigned __int8 *)(internal_runtime_exithook_hooks + v9 + 8);
    --qword_1176358;
    if ( !v8 || (_BYTE)v11 )
    {
      ((void (__golang *)(_QWORD, __int64, __int64))*v10)(*v10, internal_runtime_exithook_hooks, v11);
      v8 = a1;
    }
  }
  internal_runtime_exithook_Run_func1(v8, v1, 0, v2, v3, v4, v5, v6, v7, v13);
  (*(void (**)(void))v17)();
  return (*v16)();
}

==================================================

// function name: runtime_throw_func1

retval_1034480 __golang runtime__ptr__panic_nextDefer(runtime__panic *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 *a9);
// __int64 __golang runtime__ptr__panic_nextFrame_func1(); weak
__int64 __golang runtime__ptr__panic_initOpenCodedDefers(__int64 a1, unsigned int *a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime_gorecover(_QWORD); weak
__int64 __golang runtime_throw_func1(); // weak
void __golang runtime_fatal(__int64 (*a1)(void), __int64 (*a2)(void));
__int64 __golang runtime_fatal_func1(); // weak
__int64 __golang runtime_fatalthrow(int a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, char a10);
// __int64 __golang runtime_fatalthrow_func1(); weak
__int64 __golang runtime_fatalpanic(__int64 (*a1)(void), __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, char a10);
__int64 __golang runtime_fatalpanic_func1(); // weak
// __int64 __golang runtime_startpanic_m(_QWORD); weak
__int64 __golang runtime_dopanic_m(_QWORD *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 runtime_canpanic(void); // weak
// __int64 __golang runtime_shouldPushSigpanic(_QWORD, _QWORD, _QWORD); weak
// __int64 __golang runtime_isAbortPC(_QWORD); weak
void __golang runtime__ptr_Pinner_Pin(unsigned __int64 *a1, __int64 a2, __int64 a3);
void __golang runtime__ptr_Pinner_Unpin(_ptr_runtime_Pinner);
void __golang runtime__ptr_pinner_unpin(_ptr_runtime_pinner);
// __int64 __golang runtime_pinnerGetPtr(_QWORD); weak
__int64 __golang runtime_setPinned(__int64 a1, char a2);
__int64 __golang runtime_setPinned_func2(__int64 a1, __int64 a2, __int64 a3, unsigned __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime_setPinned_func1(); weak
// void __golang runtime__ptr_mspan_refreshPinnerBits(_ptr_runtime_mspan);
__int64 __golang runtime__ptr_mspan_incPinCounter(__int64 result, unsigned __int64 a2, __int64 a3, __int64 a4, unsigned __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime__ptr_mspan_decPinCounter(__int64 a1, unsigned __int64 a2, __int64 a3, unsigned __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_suspendG(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_1036A00 __golang runtime_resumeG(__int64 a1, char a2, char a3);
void __golang __noreturn runtime_asyncPreempt2(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_1036CE0 __golang runtime_isAsyncSafePoint(unsigned __int64 *a1, char *a2, unsigned __int64 a3, __int64 a4, __int64 a5, unsigned int *a6, unsigned int *a7, unsigned __int64 a8, __int64 a9);
int64 __golang runtime_recordForPanic(__int64 a1, signed __int64 a2, __int64 a3);
// __int64 __golang runtime_printlock(_QWORD); weak
// __int64 __golang runtime_printunlock(_QWORD); weak
void __golang runtime_gwrite(const __m128i *a1, signed __int64 a2, __int64 a3);
// __int64 __golang runtime_printsp(_QWORD); weak
// __int64 __golang runtime_printnl(_QWORD); weak
// __int64 __golang runtime_printbool(_QWORD); weak
void __golang runtime_printfloat(double a1);
// __int64 __golang runtime_printcomplex(_QWORD, double, double); weak
// __int64 __golang runtime_printuint(_QWORD); weak
// __int64 __golang runtime_printint(_QWORD); weak
// __int64 __golang runtime_printhex(_QWORD); weak
__int64 __golang runtime_printpointer(__int64 a1);
__int64 __golang runtime_printuintptr(__int64 a1);
// __int64 __golang runtime_printstring(_QWORD, _QWORD); weak
// __int64 __golang runtime_printslice(_QWORD, _QWORD, _QWORD); weak
__int64 __golang runtime_hexdumpWords(__int64 a1, unsigned __int64 a2, __int64 (__golang **a3)(char **));
__int64 __golang runtime_main(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime_main_func2(); weak
__int64 (__golang **runtime_init_6())();
void __golang runtime_goschedIfBusy(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_acquireSudog(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, _QWORD *a9);
__int64 __golang runtime_releaseSudog(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 *a9);
// void __golang __noreturn runtime_badmcall(_QWORD); weak
// void __golang __noreturn runtime_badmcall2(_QWORD); weak
// void __noreturn runtime_badreflectcall(void); weak
void __golang __noreturn runtime_badmorestackg0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, int a6, int a7, int a8, int a9);
void __golang __noreturn runtime_badmorestackg0_func1(); // weak
__int64 runtime_badmorestackgsignal(void); // weak
void __golang __noreturn runtime_switchToCrashStack(__int64 (__fastcall **a1)(__int64, __int64, _QWORD), __int64 a2, __int64 a3, __int64 a4, __int64 a5, int a6, int a7, int a8, int a9);
void __golang runtime_allgadd(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang runtime_forEachG(void (__golang **a1)(_QWORD), int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime_forEachGRace(_QWORD); weak
retval_1039000 __golang runtime_getGodebugEarly(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang runtime_schedinit();
// retval_10395E0 __golang runtime_mReserveID(_QWORD, _QWORD, _QWORD); weak
void __golang runtime_mcommoninit(_QWORD *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_ready(__int64 a1, __int64 a2, char a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_casfrom_Gscanstatus(__int64 a1, unsigned __int32 a2, unsigned __int32 a3);
bool __golang runtime_castogscanstatus(__int64 a1, unsigned __int32 a2, unsigned __int32 a3);
signed __int64 __golang runtime_casgstatus(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang runtime_casgstatus_func3(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang __noreturn runtime_casgstatus_func1(); // weak
signed __int64 __golang runtime_casGToWaitingForSuspendG(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_casGToPreemptScan(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_casGFromPreempted(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_103A800 __golang runtime_stopTheWorld(unsigned __int8 a1);
__int64 __golang runtime_stopTheWorld_func1(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_startTheWorld(unsigned __int8 a1, __int64 (*a2)(void), __int64 (*a3)(void), __int64 (*a4)(void), __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_startTheWorld_func1(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, char *a7, char *a8, __int64 a9);
retval_103AAA0 __golang runtime_stopTheWorldGC(unsigned __int8 a1);
__int64 __golang runtime_startTheWorldGC(unsigned __int8 a1, __int64 (*a2)(void), __int64 (*a3)(void), __int64 (*a4)(void), __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_103AB60 __golang runtime_stopTheWorldWithSema(unsigned __int8 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_startTheWorldWithSema(__int64 a1, char a2, __int64 r1_low, __int64 a4, __int64 a5, __int64 a6, char *a7, char *a8, __int64 a9);
// __int64 runtime_mstart0(void); weak
__int64 __golang runtime_mexit(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang runtime_forEachPInternal(void (__golang **a1)(__int64), int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang runtime_runSafePointFn();
runtime_m *__golang runtime_allocm(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime_allocm_func1(); weak
__int64 __golang runtime_needm(unsigned __int8 a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9);
__int64 __golang runtime_oneNewExtraM(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_dropm(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// retval_103C6A0 __golang runtime_getExtraM(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
// __int64 __golang runtime_addExtraM(_QWORD, _QWORD, _QWORD); weak
// __int64 __golang runtime_newm(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
__int64 __golang runtime_newm1(retval_104817A (__golang *a1)(), __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// retval_103CA00 __golang runtime_startTemplateThread(_QWORD); weak
// __int64 __golang runtime_stopm(_QWORD); weak
__int64 __golang runtime_startm(__int64 r0, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang runtime_handoffp(retval_1053980 *a1, int a2, _BOOL8 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_stoplockedm(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_startlockedm(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_gcstopm(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_execute(__int64 a1, char a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, unsigned __int64 a8, __int64 *a9);
_QWORD *__golang runtime_findRunnable(__int64 a1, int *a2, __int64 a3, __int64 r3, int *r4, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_pollWork(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, int a6, char *a7, char *a8, int a9);
retval_103EBE0 __golang runtime_stealWork(__int64 a1);
__int64 __golang runtime_checkRunqsNoP(__int64 a1, __int64 a2, __int64 a3, __int64 a4, unsigned __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_checkTimersNoP(__int64 a1, __int64 a2, __int64 a3, __int64 a4, unsigned __int64 a5, __int64 a6, __int64 a7);
// retval_103F1C0 __golang runtime_checkIdleGCNoP(); weak
__int64 __golang runtime_wakeNetPoller(__int64 result, int a2, __int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
// __int64 runtime_resetspinning(void); weak
__int64 *__golang runtime_injectglist(__int64 *result, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_schedule(__int64 a1, int *a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_park_m(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_goschedImpl(__int64 a1, char a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_goschedguarded_m(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_preemptPark(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, unsigned int *a6, unsigned int *a7, unsigned __int64 a8, __int64 a9);
__int64 __golang runtime_goyield_m(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang __noreturn runtime_goexit1(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang runtime_gdestroy(_QWORD *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_save(__int64 result, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
unsigned __int64 __golang runtime_reentersyscall(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_reentersyscall_func3(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang __noreturn runtime_reentersyscall_func2(); // weak
void __golang __noreturn runtime_reentersyscall_func1(); // weak
void __golang runtime_entersyscall_gcwait(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang __noreturn runtime_entersyscallblock_func3(); // weak
void __golang __noreturn runtime_entersyscallblock_func2(); // weak
void __golang __noreturn runtime_entersyscallblock_func1(); // weak
void __golang runtime_entersyscallblock_handoff(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime_exitsyscall_func2(); weak
// __int64 __golang runtime_exitsyscall_func1(); weak
__int64 __golang runtime_exitsyscallfast(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime_exitsyscallfast_func1(); weak
retval_1041760 __golang runtime_exitsyscallfast_reacquired(__int64 (*a1)(void), __int64 (*a2)(void), __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_exitsyscallfast_reacquired_func1(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7);
__int64 __golang runtime_exitsyscall0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 (*__golang runtime_malg(int a1))(void);
// __int64 __golang runtime_malg_func1(); weak
unsigned __int64 __golang runtime_newproc(__int64 (*a1)(void), __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
signed __int64 __golang runtime_newproc_func1(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_newproc1(_QWORD *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 runtime_saveAncestors(void); weak
void __golang runtime_gfput(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
_QWORD *__golang runtime_gfget(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime_gfget_func2(); weak
// __int64 __golang runtime_gfget_func1(); weak
void __golang runtime_gfpurge(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime_unlockOSThread(_QWORD); weak
// __int64 __golang runtime__System(); weak
// __int64 __golang runtime__ExternalCode(); weak
// __int64 __golang runtime__LostExternalCode(); weak
// __int64 __golang runtime__GC(); weak
// __int64 __golang runtime__LostSIGPROFDuringAtomic64(); weak
// __int64 __golang runtime__LostContendedRuntimeLock(); weak
__int64 __golang runtime_sigprof(__int64 result, _QWORD *a2, __int64 a3, unsigned __int64 *a4, __int64 a5, int a6, __int64 a7, _QWORD *a8, __int64 a9);
volatile signed __int32 *__golang runtime__ptr_p_init(__int64 a1, int a2);
void __golang runtime__ptr_p_destroy(_ptr_runtime_p);
// __int64 __golang runtime__ptr_p_destroy_freemcache_func2(); weak
void __golang runtime__ptr_p_destroy_func1(__int64 a1, _QWORD *a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_procresize(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_acquirep(__int64 a1);
// retval_1044080 __golang runtime_wirep(_QWORD); weak
void __golang __noreturn runtime_wirep_func2(); // weak
__int64 __golang runtime_releasep(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_releasepNoTrace(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// retval_1044420 __golang runtime_incidlelocked(_QWORD); weak
// retval_1044480 __golang runtime_checkdead(_QWORD); weak
__int64 __golang runtime_retake(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime_preemptall(_QWORD, _QWORD, _QWORD); weak
__int64 __golang runtime_preemptone(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang runtime_schedtrace(__int64 a1);
// __int64 __golang runtime_schedEnableUser(_QWORD); weak
// retval_1045BA0 __golang runtime_globrunqget(_QWORD, _QWORD); weak
__int64 __golang runtime_pidleput(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_1045EC0 __golang runtime_pidleget(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, int a8, int a9);
// retval_1046040 __golang runtime_pidlegetSpinning(_QWORD); weak
signed __int64 __golang runtime_runqput(signed __int64 result, signed __int64 a2, char a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_runqputslow(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang runtime_runqputbatch(__int64 a1, __int64 *a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_1046460 __golang runtime_runqdrain(__int64 a1);
__int64 __golang runtime_runqgrab(__int64 a1, __int64 a2, int a3, char a4, __int64 a5, __int64 a6, int a7, __int64 a8, int a9);
__int64 __golang runtime_runqsteal(__int64 a1, __int64 a2, char a3, __int64 a4, __int64 a5, __int64 a6, int a7, __int64 a8, int a9);
unsigned int *__golang runtime_doInit1(unsigned int *result, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime__ptr_profBuf_canWriteRecord(_QWORD, _QWORD); weak
// __int64 __golang runtime__ptr_profBuf_canWriteTwoRecords(_QWORD, _QWORD, _QWORD); weak
void __golang runtime__ptr_profBuf_write(_QWORD *a1, _QWORD *a2, __int64 a3, const __m128i *a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, double a10);
// retval_1047460 __golang runtime__ptr_profBuf_close(_QWORD, _QWORD); weak
// __int64 __golang runtime__ptr_profBuf_wakeupExtra(_QWORD); weak
retval_1047520 __golang runtime__ptr_profBuf_read(volatile __int64 *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, double a8);
void __golang runtime_randinit(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_readTimeRandom(__int64 a1, __int64 a2, __int64 a3);
// __int64 runtime_bootstrapRand(void); weak
// __int64 runtime_bootstrapRandReseed(void); weak
__int64 __golang runtime_mrandinit(__int64 a1);
int __golang runtime_retryOnEAGAIN(retval_104817A (__golang **a1)());
// __int64 __golang runtime__ptr_ticksType_init(_QWORD); weak
__int64 __golang runtime__ptr_godebugInc_IncNonDefault(__int64 result);
// __int64 __golang runtime_godebugNotify(_QWORD, _QWORD); weak
__int64 __golang runtime_writeErrData(__int64 a1, unsigned int a2);
// __int64 __golang runtime_args(_QWORD, _QWORD); weak
__int64 runtime_goargs(void); // weak
__int64 __golang runtime_goenvs_unix(_QWORD); // weak
// __int64 runtime_testAtomic64(void); weak
void __golang __noreturn runtime_check(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_parsedebugvars(_QWORD); // weak
char ***__golang runtime_reparsedebugvars(__int64 a1, __int64 a2);
// __int64 __golang runtime_parsegodebug(_QWORD, _QWORD, _QWORD); weak
string __golang runtime_waitReason_String(runtime_waitReason);
retval_1049480 __golang runtime_getcallerfp(); // weak
unsigned __int64 __golang runtime__ptr_rwmutex_rlock(unsigned __int64 result, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang runtime__ptr_rwmutex_rlock_func1(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime__ptr_rwmutex_runlock(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime_secure(_QWORD); weak
unsigned __int64 __golang runtime_readyWithTime(retval_106D280 *a1, __int64 (*a2)(void), __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime_readyWithTime_goready_func1(); weak
// retval_1049920 __golang runtime_semacquire1(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
// __int64 __golang runtime_semrelease1(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
void __golang runtime__ptr_semaRoot_queue(__int64 a1, unsigned __int64 a2, __int64 a3, char a4);
// __int64 __golang runtime__ptr_semaRoot_rotateLeft(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
// __int64 __golang runtime__ptr_semaRoot_rotateRight(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
__int64 __golang runtime_dumpregs(__int64 a1);
void (__noreturn *__golang runtime__ptr_sigctxt_preparePanic(__int64 a1, int a2, __int64 a3))();
// retval_104B080 __golang runtime__ptr_sigctxt_fixsigcode(_QWORD); weak
__int64 __golang runtime_doSigPreempt(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, unsigned int *a6, unsigned int *a7, unsigned __int64 a8, __int64 a9);
__int64 __golang runtime_preemptM(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang runtime_sigtrampgo(unsigned int a1, __int64 a2, __int64 a3);
// __int64 __golang runtime_sigprofNonGo(_QWORD, _QWORD, _QWORD); weak
__int64 __golang runtime_sigprofNonGoPC(__int64 result, __int64 a2, __int64 a3, __int64 a4, int a5, int a6, int a7, int a8, int a9);
retval_104B8A0 __golang runtime_adjustSignalStack(int a1, __int64 a2, __int64 a3, int a4, __int64 a5, int a6, int a7, int a8, int a9);
void __golang runtime_adjustSignalStack2(unsigned int a1, __int64 a2, __int64 a3, char a4);
__int64 __golang runtime_sighandler(__int64 result, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, unsigned int *a7, _QWORD *a8, __int64 a9);
__int64 __golang runtime_fatalsignal(__int64 a1, _QWORD *a2, __int64 a3, __int64 a4);
// retval_104C580 __golang runtime_dieFromSignal(_QWORD); weak
__int64 __golang runtime_raisebadsignal(__int64 result, __int64 a2, __int64 a3, int a4, __int64 *a5, int a6, int a7, int a8, int a9);
// void __golang __noreturn runtime_sigNotOnStack(_QWORD, _QWORD, _QWORD); weak
__int64 __golang runtime_badsignal(__int64 a1, __int64 a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9);
// __int64 runtime_sigfwdgo(void); weak
// retval_104CBA0 __golang runtime_sigblock(_QWORD); weak
__int64 __golang runtime_unblocksig(int a1, int a2, __int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
__int64 __golang runtime_minitSignalStack(__int64 a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9);
__int64 __golang runtime_minitSignalMask(__int64 a1, __int64 *a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9);
__int64 __golang runtime_unminitSignals(__int64 a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9);
// __int64 runtime_signalstack(void); weak
// __int64 __golang runtime_sigsend(_QWORD); weak
// void __noreturn runtime_panicmakeslicelen(void); weak
__int64 (*__golang runtime_makeslicecopy(unsigned __int64 *a1, signed __int64 a2, unsigned __int64 a3, const __m128i *a4))(void);
// __int64 __golang runtime_stackpoolalloc(_QWORD); weak
// __int64 __golang runtime_stackpoolfree(_QWORD, _QWORD); weak
void __golang runtime_stackcacherefill(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime_stackcacherelease(_QWORD, _QWORD, _QWORD); weak
__int64 __golang runtime_stackcache_clear(__int64 result, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_104D920 __golang runtime_stackalloc(unsigned int a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 r7, __int64 r8, unsigned int a10);
void __golang runtime_stackfree(unsigned __int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
unsigned __int64 __golang runtime_adjustpointers(unsigned __int64 result, int *a2, unsigned __int64 *a3, __int64 a4, __int64 a5);
unsigned int **__golang runtime_adjustframe(unsigned int **result, unsigned __int64 *a2);
__int64 __golang runtime_syncadjustsudogs(__int64 a1, __int64 a2, unsigned __int64 *a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime_copystack(_QWORD, _QWORD); weak
__int64 __golang runtime_newstack(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, unsigned int *a6, unsigned int *a7, unsigned __int64 a8, __int64 a9);
__int64 runtime_nilfunc(); // weak
// __int64 __golang runtime_gostartcallfn(_QWORD, _QWORD); weak
__int64 __golang runtime_shrinkstack(__int64 result, __int64 a2, __int64 a3, __int64 a4, __int64 a5, unsigned int *a6, unsigned int *a7, unsigned __int64 a8, __int64 a9);
// retval_104FAE0 __golang runtime_gcComputeStartingStackSize(_QWORD); weak
retval_104FC00 __golang runtime__ptr_stkframe_argMapInternal(_QWORD *a1);
retval_104FEE0 __golang runtime__ptr_stkframe_getStackMap(unsigned int **a1);
__int64 __golang runtime_stkobjinit(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_1050660 __golang runtime_concatstrings(__int64 a1, __int64 a2, unsigned __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// retval_1050860 __golang runtime_concatstring2(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
// retval_1050900 __golang runtime_concatstring3(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
// retval_10509C0 __golang runtime_concatstring4(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
// __int64 __golang runtime_concatstring5(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64, __int64); weak
// retval_1050BE0 __golang runtime_slicebytetostring(_QWORD, _QWORD, _QWORD); weak
// retval_1050CE0 __golang runtime_rawstringtmp(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
// retval_1050DA0 __golang runtime_stringtoslicebyte(_QWORD, _QWORD, _QWORD); weak
// retval_1050E60 __golang runtime_intstring(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
__int64 *__golang runtime_rawbyteslice(unsigned __int64 a1, __int64 a2, double a3, __int64 a4, void (__golang *a5)(), char *a6, __int64 a7, __int64 a8, __int64 a9, __int64 *a10);
// retval_10510A0 __golang runtime_atoi64(_QWORD, _QWORD); weak
retval_1051180 __golang runtime_parseByteCount(__int64 a1, __int64 a2);
__int64 __golang runtime_findnull(const __m128i *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 runtime_badsystemstack(void); // weak
bool __golang runtime__ptr_Frames_Next(void ***a1, __int64 *a2, __int64 a3, __int64 a4, __int64 a5, unsigned int *a6, unsigned int *r6, unsigned __int64 r7, __int64 *r8, __int128 a10, __int64 a11, __int64 a12, __int64 a13, __int64 a14, __int64 r2_low, __int64 a16, __int64 a17, unsigned int *a18, _QWORD *a19);
retval_1051CA0 __golang runtime_expandCgoFrames(__int64 a1);
// __int64 runtime_modulesinit(void); weak
// __int64 __golang runtime__ptr_moduledata_textAddr(_QWORD, _QWORD); weak
// retval_1052260 __golang runtime__ptr_moduledata_funcName(_QWORD, _QWORD); weak
uintptr __golang runtime__ptr_Func_Entry(_ptr_runtime_Func);
retval_1052360 __golang runtime_pcvalue(unsigned int *a1, _QWORD *a2, unsigned int a3, unsigned __int64 a4, char a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, __int64 a11, unsigned int a12, __int64 a13, char a14);
// retval_1052A40 __golang runtime_funcpkgpath(_QWORD, _QWORD); weak
// __int64 __golang runtime_funcfile(_QWORD); weak
__int64 __golang runtime_funcMaxSPDelta(unsigned int *a1, _QWORD *a2, __int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
__int64 __golang runtime_pcdatavalue(unsigned int *a1, _QWORD *a2, unsigned int a3, unsigned __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_pcdatavalue1(unsigned int *a1, _QWORD *a2, unsigned int a3, unsigned __int64 a4, char a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_1052E40 __golang runtime_pcdatavalue2(unsigned int *a1, _QWORD *a2, unsigned int a3, unsigned __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// retval_1052EC0 __golang runtime_step(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
retval_1053060 __golang runtime__ptr_inlineUnwinder_next(unsigned int **a1, __int64 a2, int a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8);
void __golang runtime__ptr_synctestGroup_changegstatus(__int64 a1, __int64 a2, int a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime__ptr_synctestGroup_changegstatus_goready_func1(); weak
void __golang runtime__ptr_synctestGroup_incActive(_ptr_runtime_synctestGroup);
void __golang runtime__ptr_synctestGroup_decActive(_ptr_runtime_synctestGroup);
// __int64 __golang runtime__ptr_synctestGroup_decActive_goready_func1(); weak
// __int64 __golang runtime_pthread_attr_init(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64); weak
// __int64 __golang runtime_pthread_attr_getstacksize(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64, __int64); weak
// __int64 __golang runtime_pthread_attr_setdetachstate(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64, __int64); weak
// __int64 __golang runtime_raise(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, char); weak
// __int64 __golang runtime_pthread_kill(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, char); weak
// retval_1053760 __golang runtime_mmap(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
// __int64 __golang runtime_munmap(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64); weak
// __int64 __golang runtime_madvise(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64); weak
// __int64 __golang runtime_usleep(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, char); weak
// __int64 __golang runtime_usleep_no_g(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, char); weak
// retval_1053980 __golang runtime_nanotime1(_QWORD); weak
// __int64 __golang runtime_sigaction(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, char); weak
// __int64 __golang runtime_sigprocmask(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, char); weak
// __int64 __golang runtime_sigaltstack(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64); weak
// __int64 __golang runtime_raiseproc(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, char); weak
// retval_1053BA0 __golang runtime_kqueue(); weak
// __int64 __golang runtime_kevent(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, char, __int64, __int64, __int64, __int64, __int64); weak
// __int64 __golang runtime_pthread_mutex_init(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64, __int64); weak
// __int64 __golang runtime_pthread_mutex_lock(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64); weak
// __int64 __golang runtime_pthread_mutex_unlock(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64); weak
// __int64 __golang runtime_pthread_cond_init(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64, __int64); weak
// __int64 __golang runtime_pthread_cond_signal(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64); weak
// __int64 __golang runtime_arc4random_buf(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64); weak
__int64 __golang runtime_libcCall(__int64 (__fastcall *a1)(__int64), __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, char a10);
bool __golang runtime__ptr_timer_updateHeap(_ptr_runtime_timer);
_QWORD *__golang runtime__ptr_timers_addHeap(_QWORD *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 *a9);
void __golang runtime__ptr_timer_maybeRunAsync(_ptr_runtime_timer);
volatile signed __int8 *__golang runtime__ptr_timer_maybeRunAsync_func1(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
bool __golang runtime__ptr_timer_stop(_ptr_runtime_timer);
void __golang runtime__ptr_timers_deleteMin(_ptr_runtime_timers);
__int64 __golang runtime__ptr_timer_modify(_ptr_runtime_timer a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang runtime__ptr_timer_maybeAdd(_ptr_runtime_timer);
void __golang runtime__ptr_timers_cleanHead(_ptr_runtime_timers);
retval_1054DC0 __golang runtime__ptr_timers_take(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 *a9);
runtime_timers *__golang runtime__ptr_timers_adjust(runtime_timers *result, int64 a2, char a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_10551E0 __golang runtime__ptr_timers_check(_ptr_runtime_timers a1, int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
int64 __golang runtime__ptr_timers_run(_ptr_runtime_timers, int64);
volatile signed __int8 *__golang runtime__ptr_timer_unlockAndRun(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_timeSleepUntil(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime__ptr_timers_siftUp(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
_QWORD *__golang runtime__ptr_timers_siftDown(_QWORD *result, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, _QWORD *a9);
void __golang runtime__ptr_timers_initHeap(_ptr_runtime_timers);
void __golang runtime__ptr_timer_maybeRunChan(_ptr_runtime_timer);
volatile signed __int8 *__golang runtime__ptr_timer_maybeRunChan_func1(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang runtime_blockTimerChan(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang runtime_unblockTimerChan(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang runtime_traceAdvance_func6(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime_traceAdvance_forEachP_func7(); weak
void __golang runtime_traceAdvance_func4(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang runtime_traceAdvance_func3(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, _QWORD *a9);
void __golang runtime_traceAdvance_func1(__int64 (*a1)(void), __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
signed __int64 __golang runtime_traceAdvance_func1_1(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 (*__golang runtime_traceRegisterLabelsAndReasons(__int64 (*result)(void)))(void);
// __int64 __golang runtime_traceReader(_QWORD, _QWORD, _QWORD); weak
void __golang runtime__ptr_traceAdvancerState_stop(__int64 *a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang runtime__ptr_wakeableSleep_wake(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang runtime__ptr_wakeableSleep_close(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_SpanAlloc(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_SpanFree(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_HeapObjectAlloc(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_HeapObjectFree(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_GoroutineStackAlloc(__int64 a1, unsigned __int64 a2, __int64 a3, unsigned __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_GoroutineStackFree(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
_BYTE *__golang runtime__ptr_unwinder_initAt(_BYTE *a1, __int64 a2, _QWORD *a3, __int64 a4, unsigned __int64 *a5, unsigned int *a6, unsigned int *a7, unsigned __int64 a8, __int64 a9);
_BYTE *__golang runtime__ptr_unwinder_resolveInternal(_BYTE *result, __int64 a2, char a3, __int64 a4, __int64 a5);
// __int64 __golang runtime__ptr_unwinder_next(_QWORD); weak
__int64 __golang runtime__ptr_unwinder_finishInternal(__int64 result);
unsigned int *__golang runtime__ptr_unwinder_symPC(unsigned int **a1);
__int64 __golang runtime__ptr_unwinder_cgoCallers(_QWORD *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8);
signed __int64 __golang runtime_tracebackPCs(unsigned int **a1, __int64 a2, __int64 a3, unsigned __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8);
__int64 __golang runtime_printArgs(__int64 result, _QWORD *a2, __int64 a3, unsigned __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_1058380 __golang runtime_funcNamePiecesForPrint(const __m128i *a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime_printFuncName(_QWORD, _QWORD); weak
__int64 __golang runtime_printcreatedby(_QWORD *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, unsigned int *a6, unsigned int *a7, unsigned __int64 a8, __int64 a9);
// __int64 __fastcall runtime_printcreatedby1(_QWORD, _QWORD, _QWORD, _QWORD); weak
__int64 __golang runtime_tracebacktrap(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
// __int64 __golang runtime_traceback1(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
retval_1058C20 __golang runtime_traceback1_func1(unsigned __int8 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, unsigned int *a7, unsigned __int64 a8, __int64 a9);
retval_1058DC0 __golang runtime_traceback2(__int64 a1, unsigned __int8 a2, __int64 a3, __int64 a4);
// __int64 __golang runtime_traceback2_func1(); weak
signed __int64 __golang runtime_callers_func1(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, unsigned __int64 a8, __int64 a9);
signed __int64 __golang runtime_gcallers(unsigned __int64 *a1, __int64 a2, __int64 a3, unsigned __int64 a4, __int64 a5, __int64 a6, unsigned int *a7, unsigned __int64 a8, __int64 a9);
// __int64 __golang runtime_showframe(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
__int64 __golang runtime_showfuncinfo(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_isExportedRuntime(_QWORD *a1, __int64 a2, __int64 a3, int a4, __int64 a5, int a6, int a7, int a8, int a9);
__int64 __golang runtime_goroutineheader(_QWORD *a1);
__int64 __golang runtime_tracebackothers(_QWORD *a1);
__int64 __golang runtime_tracebackothers_func1(__int64 result, __int64 a2, __int64 a3, __int64 a4, __int64 a5, unsigned int *a6, unsigned int *a7, unsigned __int64 a8, __int64 a9);
__int64 __golang runtime_tracebackHexdump(unsigned __int64 a1, unsigned __int64 a2, __int64 a3, __int64 (__golang *a4)(char **));
// __int64 __golang runtime_tracebackHexdump_func1(); weak
bool __golang runtime_isSystemGoroutine(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, unsigned int *a6, unsigned int *a7, unsigned __int64 a8, __int64 a9);
// __int64 __golang runtime_printOneCgoTraceback(_QWORD, _QWORD, _QWORD); weak
// __int64 __golang runtime_callCgoSymbolizer(_QWORD); weak
// __int64 __golang runtime_cgoContextPCs(_QWORD); weak
retval_105AD60 __golang runtime_traceWriter_event(__int64 a1, __int64 a2, __int64 a3, __int64 a4, char a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceWriter_ensure(__int64 result, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_105AFE0 __golang runtime_traceWriter_flush(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang runtime_traceWriter_flush_func1(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_105B0C0 __golang runtime_traceWriter_refill(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime_traceWriter_refill_func1(); weak
__int64 __golang runtime__ptr_traceBuf_varintAt(__int64 result, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
char __golang runtime_traceBufFlush(_QWORD *a1, char a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang runtime_traceStopReadCPU(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceReadCPU(__int64 a1, double a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8);
__int64 (*__golang runtime_traceCPUFlush(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9))(void);
void __golang runtime_traceCPUFlush_func1(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
signed __int64 __golang runtime_traceCPUSample(signed __int64 result, __int64 a2, int *a3, __int64 a4, __int64 a5, __int64 a6);
retval_105C160 __golang runtime_traceLocker_eventWriter(__int64 a1, unsigned __int64 a2, unsigned __int8 a3, unsigned __int8 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceEventWriter_event(__int64 a1, __int64 a2, char a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_startPC(__int64 a1, __int64 a2, void *a3, __int64 a4, __int64 a5, unsigned int *a6, unsigned int *a7, unsigned __int64 a8, __int64 a9);
retval_105C620 __golang runtime__ptr_traceMap_put(volatile signed __int64 *a1, const __m128i *a2, unsigned __int64 a3);
_QWORD *__golang runtime__ptr_traceMap_newTraceMapNode(__int64 a1, const __m128i *a2, unsigned __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime__ptr_traceMap_reset(volatile __int64 *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime__ptr_traceRegionAlloc_alloc(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime__ptr_traceRegionAlloc_drop(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_105CB60 __golang runtime_traceLockInit(); // weak
__int64 runtime_traceAllocFreeEnabled(void); // weak
retval_105CBA0 runtime_traceAcquire();
retval_105CBC0 __golang runtime_traceAcquireEnabled();
retval_105CC60 __golang runtime_traceLocker_ok(__int64 a1, __int64 a2);
__int64 __golang runtime_traceRelease(__int64 result);
__int64 __golang runtime_traceLocker_Gomaxprocs(__int64 a1, unsigned __int64 a2, int a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_ProcStart(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_ProcStop(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_GCActive(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_GCStart(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_GCDone(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_STWStart(__int64 a1, unsigned __int64 a2, unsigned __int8 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_STWDone(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_105D220 __golang runtime_traceLocker_GCSweepStart(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_GCSweepSpan(__int64 result, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_GCSweepDone(__int64 result, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_GCMarkAssistStart(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_GCMarkAssistDone(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_GoCreate(__int64 a1, unsigned __int64 a2, __int64 a3, void *a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_GoStart(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_GoEnd(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_GoStop(__int64 a1, unsigned __int64 a2, unsigned __int8 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_GoPark(__int64 a1, unsigned __int64 a2, unsigned __int8 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_GoUnpark(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4);
unsigned __int64 __golang runtime_traceLocker_emitUnblockStatus(__int64 a1, __int64 a2, __int64 a3, unsigned __int64 a4);
__int64 __golang runtime_traceLocker_GoSysCall(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_GoSysExit(__int64 a1, unsigned __int64 a2, char a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_ProcSteal(__int64 a1, unsigned __int64 a2, int *a3, char a4, __int64 a5, __int64 a6, __int64 a7);
__int64 __golang runtime_traceLocker_HeapAlloc(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_HeapGoal(__int64 a1, unsigned __int64 a2, __int64 a3);
__int64 __golang runtime_traceLocker_GoCreateSyscall(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_GoDestroySyscall(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
signed __int64 __golang runtime_traceThreadDestroy(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang runtime_traceThreadDestroy_func1(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceStack(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, unsigned __int64 a8, __int64 a9);
// __int64 __golang runtime__ptr_traceStackTable_put(_QWORD, _QWORD, _QWORD, _QWORD); weak
__int64 __golang runtime__ptr_traceStackTable_dump(__int64 *a1, __int64 (*a2)(void));
__int64 __golang runtime_dumpStacksRec(__int64 a1, __int64 a2, __int64 (*a3)(void), __int64 a4, __int64 a5, __m128i *a6, __int64 a7, unsigned __int64 a8, int a9);
retval_105F120 __golang runtime_makeTraceFrames(__int64 (*a1)(void), uintptr *a2, size_t a3, size_t a4);
retval_105F3C0 __golang runtime_makeTraceFrame(__int64 (*a1)(void), __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, __int64 a11, const __m128i *a12, __int64 a13, const __m128i *a14, __int64 a15, __int64 a16);
__int64 __golang runtime_fpunwindExpand(__m128i *a1, __int64 a2, __int64 a3, unsigned __int64 *a4, __int64 a5, __int64 a6, __int64 a7, unsigned __int64 a8, __int64 a9);
__int64 __golang runtime_startPCForTrace(void *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, unsigned int *a6, unsigned int *a7, unsigned __int64 a8, __int64 a9);
retval_105F880 __golang runtime_traceWriter_writeGoStatus(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, unsigned __int8 a7, char a8, __int64 a9);
retval_105F9A0 __golang runtime_traceWriter_writeProcStatusForP(__int64 r0, unsigned __int64 r1, __int64 r2, __int64 a4, int *a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_105FB00 __golang runtime_traceWriter_writeProcStatus(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, unsigned __int8 a6, char a7, __int64 a8, __int64 a9);
__int64 __golang runtime_goStatusToTraceGoStatus(int a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime__ptr_traceStringTable_put(__int64 a1, __int64 (*a2)(void), const __m128i *a3, unsigned __int64 a4);
// __int64 __golang runtime__ptr_traceStringTable_put_func1(); weak
void __golang runtime__ptr_traceStringTable_writeString(__int64 a1, __int64 a2, unsigned __int64 a3, const __m128i *a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime__ptr_traceStringTable_reset(__int64 a1, __int64 (*a2)(void), __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang runtime__ptr_traceStringTable_reset_func1(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
unsigned __int64 __golang runtime_traceFrequency(__int64 (*a1)(void), __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang runtime_traceFrequency_func1(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_1060340 __golang runtime__ptr_traceTypeTable_put(volatile signed __int64 *a1, __int64 r1);
__int64 __golang runtime__ptr_traceTypeTable_dump(__int64 *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_dumpTypesRec(__int64 a1, __int64 a2, __int64 a3, unsigned __int8 a4, __int64 a5, int a6, int a7, int a8, int a9);
// retval_1060920 __golang runtime_rtype_string(_QWORD); weak
__int64 (*__golang runtime_getGCMaskOnDemand(__int64 (*a1)(void), int a2, __int64 (*a3)(void), __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9))(void);
unsigned __int64 *__golang runtime_getGCMaskOnDemand_func1(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, unsigned __int64 *a7, unsigned __int64 a8, unsigned __int64 a9);
_BYTE *__golang runtime_bitCursor_write(__int64 a1, unsigned __int64 a2, unsigned __int8 *a3, unsigned __int64 a4);
unsigned __int64 *__golang runtime_buildGCMask(unsigned __int64 *result, __int64 a2, unsigned __int64 a3, __int64 a4, __int64 a5, __int64 a6, unsigned __int64 *a7, unsigned __int64 a8, unsigned __int64 a9);
// __int64 __golang runtime_resolveNameOff(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// __int64 __golang runtime_resolveTypeOff(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64); weak
// __int64 __golang runtime_rtype_textOff(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
retval_1061580 __golang runtime_pkgPath(_BYTE *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, int a8, int a9);
void runtime_typelinksinit();
__int64 __golang runtime_typesEqual(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// void __golang __noreturn runtime_panicunsafestringlen(_QWORD); weak
// void __noreturn runtime_panicunsafestringnilptr(void); weak
// void __golang __noreturn runtime_panicunsafeslicelen(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
// void __golang __noreturn runtime_panicunsafeslicenilptr(_QWORD, _QWORD, _QWORD); weak
// retval_1062A40 __golang runtime_decoderune(_QWORD, _QWORD); weak
retval_1062D60 runtime_printCgoTraceback_func1();
void __golang runtime_traceAdvance_func2(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceAdvance_func5(int *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_schedtrace_func1(__int64 a1);
// __int64 __golang runtime_injectglist_func1(_QWORD); weak
void __golang __noreturn runtime_casgstatus_func2(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_init_6_func1(); // weak
__int64 runtime__ptr_scavengerState_init_func4(); // weak
__int64 __golang runtime_gcResetMarkState_func1(__int64 result);
__int64 __golang runtime_gcBgMarkWorker_func1(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6);
void __golang runtime_gcMarkTermination_func4(__int64 a1);
// __int64 __golang runtime_gcMarkTermination_func4_1(); weak
void __golang runtime_gcMarkDone_func1(runtime_gcWork *a1, __int64 a2, __int64 a3, int a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_debugCallWrap1_func1(_QWORD *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_debugCallWrap_func2(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime_nilinterhash(_QWORD, _QWORD); weak
__int64 __golang runtime_typehash(__int64 a1, __m128i *a2, unsigned __int64 a3);
__int64 __golang runtime_atomicwb(_QWORD *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_1064E00 __golang internal_runtime_atomic_storePointer(volatile __int64 *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
bool __golang internal_runtime_atomic_casPointer(volatile signed __int64 *a1, signed __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_1064EA0 __golang sync_atomic_StorePointer(volatile __int64 *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang sync_atomic_SwapPointer(volatile __int64 *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
bool __golang sync_atomic_CompareAndSwapPointer(volatile signed __int64 *a1, signed __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_cgocall(__int64 (__fastcall *a1)(__int64), __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang reflect_chanlen(_QWORD *a1);
__int64 __golang runtime_getitab(__int64 a1, abi_Type *a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime_convT64(_QWORD, _QWORD); weak
// __int64 __golang runtime_convTstring(_QWORD); weak
// __int64 __golang runtime_convTslice(_QWORD, _QWORD, _QWORD); weak
__int64 *runtime_getStaticuint64s();
__int64 *__golang runtime_mallocgc(__int64 (*a1)(void), unsigned __int64 a2, __int64 a3, void (__golang *a4)(), __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 *a9, double a10);
// __int64 __golang internal_runtime_maps_newobject(_QWORD); weak
// __int64 reflect_unsafe_New(void); weak
// __int64 runtime_newarray(void); weak
__int64 __golang internal_runtime_maps_newarray(_QWORD, _QWORD); // weak
retval_1065820 __golang internal_runtime_maps_mapKeyError(__int64 a1, _QWORD *a2);
// __int64 __golang runtime_makemap_small(_QWORD); weak
_QWORD *__golang runtime_makemap(__int64 a1, signed __int64 a2, _QWORD *a3);
__int64 __golang reflect_maplen(__int64 a1);
// __int64 __golang runtime_typedmemmove(_QWORD, _QWORD, _QWORD); weak
__int64 __golang reflect_typedmemmove(__int64 a1, __int64 a2, __int64 a3);
__int64 __golang internal_runtime_maps_typedmemmove(_QWORD, _QWORD, _QWORD); // weak
// __int64 __golang runtime_typedslicecopy(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
__int64 __golang reflect_typedmemclr(__int64 a1, __int64 a2);
__int64 __golang runtime_memclrHasPointers(_OWORD *a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, _QWORD *a9);
// retval_1065B60 __golang runtime_findObject(_QWORD, _QWORD, _QWORD); weak
// __int64 __golang reflect_verifyNotInHeapPtr(_QWORD); weak
__int64 __golang internal_godebug_registerMetric(const __m128i *a1, unsigned __int64 a2, __int64 a3);
__int64 __golang runtime_blockevent(__int64 a1, __int64 a2);
__int64 __golang sync_event(__int64 result, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 internal_poll_runtime_pollServerInit(); // weak
retval_1066080 __golang internal_poll_runtime_pollOpen(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang internal_poll_runtime_pollClose(runtime_pollDesc *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang internal_poll_runtime_pollReset(__int64 a1, __int64 a2);
__int64 __golang internal_poll_runtime_pollWait(__int64 a1, __int64 a2);
__int64 __golang internal_poll_runtime_pollUnblock(runtime_pollDesc *a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// retval_10665E0 __golang runtime_gopanic(_QWORD, _QWORD); weak
void __golang sync_fatal(__int64 (*a1)(void), __int64 (*a2)(void));
void __golang internal_runtime_maps_fatal(__int64 (*a1)(void), __int64 (*a2)(void));
void __golang __noreturn internal_sync_throw(__int64 (*a1)(void), __int64 (*a2)(void), __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang internal_sync_fatal(__int64 (*a1)(void), __int64 (*a2)(void));
__int64 __golang runtime_throw(__int64 (*a1)(void), __int64 (*a2)(void), __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang __noreturn runtime_gopark(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, _QWORD *a9);
// __int64 __golang runtime_wakep(_QWORD); weak
unsigned __int64 __golang runtime_entersyscall(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, char a10);
__int64 __golang runtime_entersyscallblock(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, char a10);
bool __golang runtime_exitsyscall(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, char a10);
__int64 __golang sync_runtime_procUnpin(); // weak
_BOOL8 __golang internal_sync_runtime_canSpin(__int64 a1);
__int64 __golang internal_sync_runtime_doSpin(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_rand(_QWORD, _QWORD); // weak
__int64 internal_runtime_maps_rand(void); // weak
retval_1067380 __golang syscall_runtime_envs(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, int a7, int a8, int a9);
retval_1067440 __golang os_runtime_args(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, int a7, int a8, int a9);
__int64 __golang internal_godebug_setUpdate(__int64 a1);
retval_1067580 __golang internal_godebug_setNewIncNonDefault(__int64 a1);
__int64 __golang runtime_debug_SetTraceback(__int64 a1, __int64 a2);
// __int64 __golang reflect_resolveNameOff(_QWORD, _QWORD); weak
// __int64 __golang reflect_resolveTypeOff(_QWORD, _QWORD); weak
__int64 __golang reflect_resolveTextOff(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9);
__int64 __golang reflect_addReflectOff(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_1067980 __golang internal_poll_runtime_Semacquire(__int64 a1);
__int64 __golang sync_runtime_Semrelease(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9);
retval_1067A00 __golang internal_sync_runtime_SemacquireMutex(__int64 a1, __int64 a2, __int64 a3);
retval_1067A60 __golang sync_runtime_SemacquireRWMutexR(__int64 a1, __int64 a2, __int64 a3);
__int64 __golang internal_poll_runtime_Semrelease(int a1, __int64 a2, __int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
__int64 __golang internal_sync_runtime_Semrelease(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9);
__int64 __golang sync_runtime_notifyListCheck(__int64 result);
__int64 __golang internal_sync_runtime_nanotime(__int64 a1);
unsigned __int64 __golang os_sigpipe(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __noreturn runtime_sigpanic(void); // weak
// __int64 __golang runtime_makeslice(_QWORD, _QWORD); weak
// retval_1068120 __golang runtime_growslice(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
void __golang runtime_morestackc(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_10688E0 __golang runtime_gostring(const __m128i *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
char __golang reflect_memmove(__m128i *a1, const __m128i *a2, unsigned __int64 a3);
char __golang runtime_moduledataverify1(unsigned int **a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, unsigned int a6, unsigned int *a7, int a8, int a9);
retval_1069200 __golang runtime_findfunc(void *a1, __int64 j, __int64 a3, __int64 a4, __int64 a5, unsigned int *textsectionmap, unsigned int *a7, unsigned __int64 a8, __int64 a9);
retval_10693A0 __golang runtime_funcline1(unsigned int *a1, _QWORD *a2, unsigned __int64 a3, char a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_10694A0 __golang runtime_newInlineUnwinder(__int64 a1, _QWORD *a2, unsigned __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_1069560 __golang syscall_syscall(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_1069600 __golang syscall_syscallX(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_10696A0 __golang syscall_syscall6(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_1069760 __golang syscall_syscall6X(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_1069820 __golang syscall_syscallPtr(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_10698C0 __golang syscall_rawSyscall(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime_exit(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, char); weak
// retval_1069980 __golang runtime_walltime(); weak
// __int64 __golang runtime_fcntl(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD); weak
retval_1069A60 __golang time_runtimeNow();
__int64 __golang time_runtimeNano(__int64 a1);
// __int64 __golang runtime_write(_QWORD, _QWORD, _QWORD); weak
retval_1069B80 time_now();
__int64 __golang runtime_traceAdvance(unsigned __int8 a1);
// __int64 __golang runtime_callers(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
__int64 __golang runtime_mapinitnoop(_QWORD); // weak
__int64 __golang gogo(__int64 a1, __int64 a2);
__int64 __golang callRet(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, int a6, int a7, int a8, int a9);
void __golang gosave_systemstack_switch(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, char a10);
void __golang setg_gcc(__int64 a1, __int64 a2, __int64 a3, unsigned __int64 a4);
unsigned __int64 __golang aeshashbody(const __m128i *a1, unsigned __int64 a2, unsigned __int64 a3);
// unsigned __int64 __usercall __spoils<rdx,rcx,rbx,rdi,rsi,r8,r9,r10,r12,r13,xmm0,xmm1,xmm2,xmm3,xmm4,xmm5,xmm6,xmm7,xmm8,xmm9,xmm10,xmm11,xmm12,xmm13,xmm14> gcWriteBarrier@<r11>();
void __gostk debugCall32(char a1);
void __gostk debugCall64(char a1);
void __gostk debugCall128(char a1);
void __gostk debugCall256(char a1);
void __gostk debugCall512(char a1);
void __gostk debugCall1024(char a1);
void __gostk debugCall2048(char a1);
void __gostk debugCall4096(char a1);
void __gostk debugCall8192(char a1);
void __gostk debugCall16384(char a1);
void __gostk debugCall32768(char a1);
void __gostk debugCall65536(char a1);
__int64 runtime_asminit(void); // weak
__int64 runtime_mstart(void); // weak
__int64 __golang runtime_gogo(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10);
void __golang __noreturn runtime_mcall(void (__golang **rax0)(_QWORD *), __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a1);
void __noreturn runtime_systemstack_switch(); // weak
unsigned __int64 __golang runtime_systemstack(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 (**a10)(void));
void __golang __noreturn runtime_switchToCrashStack0(__int64 (__fastcall **a1)(__int64, __int64, _QWORD), __int64 a2, __int64 a3, __int64 a4, __int64 a5);
void __golang __noreturn runtime_morestack(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, unsigned int *a6, unsigned int *a7, unsigned __int64 a8, __int64 a9, __int64 a10, char a11);
void __golang __noreturn runtime_morestack_noctxt(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, unsigned int *a6, unsigned int *a7, unsigned __int64 a8, __int64 a9);
__int64 __golang runtime_spillArgs(__int64 result, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, double a17, double a18, double a19, double a20, double a21, double a22, double a23, double a24);
retval_106B760 __golang runtime_unspillArgs();
__int64 __golang runtime_reflectcall(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, retval_106BA60 (__golang **a11)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double), const void *a12, __int64 a13, __int64 a14, __int64 a15);
__int64 __golang runtime_call16(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, retval_106BA60 (__golang **a11)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double), const void *a12, unsigned int a13, unsigned int a14);
__int64 __golang runtime_call32(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, retval_106BB00 (__golang **a11)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double), const void *a12, unsigned int a13, unsigned int a14);
__int64 __golang runtime_call64(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, retval_106BBA0 (__golang **a11)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double), const void *a12, unsigned int a13, unsigned int a14);
__int64 __golang runtime_call128(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, retval_106BC55 (__golang **a11)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double), const void *a12, unsigned int a13, unsigned int a14);
__int64 __golang runtime_call256(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, retval_106BD1B (__golang **a11)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double), const void *a12, unsigned int a13, unsigned int a14);
__int64 __golang runtime_call512(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, retval_106BDFB (__golang **a11)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double), const void *a12, unsigned int a13, unsigned int a14);
__int64 __golang runtime_call1024(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, retval_106BEDB (__golang **a11)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double), const void *a12, unsigned int a13, unsigned int a14);
__int64 __golang runtime_call2048(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, retval_106BFBB (__golang **a11)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double), const void *a12, unsigned int a13, unsigned int a14);
__int64 __golang runtime_call4096(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, retval_106C0A3 (__golang **a11)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double), const void *a12, unsigned int a13, unsigned int a14);
__int64 __golang runtime_call8192(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, retval_106C183 (__golang **a11)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double), const void *a12, unsigned int a13, unsigned int a14);
__int64 __golang runtime_call16384(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, retval_106C263 (__golang **a11)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double), const void *a12, unsigned int a13, unsigned int a14);
__int64 __golang runtime_call32768(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, retval_106C343 (__golang **a11)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double), const void *a12, unsigned int a13, unsigned int a14);
__int64 __golang runtime_call65536(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, retval_106C423 (__golang **a11)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double), const void *a12, unsigned int a13, unsigned int a14);
__int64 __golang runtime_call131072(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, retval_106C503 (__golang **a11)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double), const void *a12, unsigned int a13, unsigned int a14);
__int64 __golang runtime_call262144(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, retval_106C5E3 (__golang **a11)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double), const void *a12, unsigned int a13, unsigned int a14);
__int64 __golang runtime_call524288(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, retval_106C6C3 (__golang **a11)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double), const void *a12, unsigned int a13, unsigned int a14);
__int64 __golang runtime_call1048576(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64, __int64, __int64, _DWORD, _DWORD, __int64, __int64); // weak
__int64 __golang runtime_call2097152(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64, __int64, __int64, _DWORD, _DWORD, __int64, __int64); // weak
__int64 __golang runtime_call4194304(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64, __int64, __int64, _DWORD, _DWORD, __int64, __int64); // weak
__int64 __golang runtime_call8388608(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64, __int64, __int64, _DWORD, _DWORD, __int64, __int64); // weak
__int64 __golang runtime_call16777216(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64, __int64, __int64, _DWORD, _DWORD, __int64, __int64); // weak
__int64 __golang runtime_call33554432(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64, __int64, __int64, _DWORD, _DWORD, __int64, __int64); // weak
__int64 __golang runtime_call67108864(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64, __int64, __int64, _DWORD, _DWORD, __int64, __int64); // weak
__int64 __golang runtime_call134217728(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64, __int64, __int64, _DWORD, _DWORD, __int64, __int64); // weak
__int64 __golang runtime_call268435456(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64, __int64, __int64, _DWORD, _DWORD, __int64, __int64); // weak
__int64 __golang runtime_call536870912(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64, __int64, __int64, _DWORD, _DWORD, __int64, __int64); // weak
__int64 __golang runtime_call1073741824(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64, __int64, __int64, _DWORD, _DWORD, __int64, __int64); // weak
__int64 __golang runtime_procyield(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, int a10);
__int64 __golang runtime_publicationBarrier(_QWORD); // weak
__int64 __golang runtime_asmcgocall_no_g(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 (__fastcall *a10)(__int64, __int64, _QWORD *, __int64), __int64 a11);
__int64 __golang runtime_asmcgocall_landingpad(__int64 (__fastcall *a1)(__int64), __int64 a2);
retval_106D180 __golang runtime_asmcgocall(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 (__fastcall *a10)(__int64), __int64 a11);
void __gostk runtime_setg(unsigned __int64 a1);
void __golang __noreturn runtime_abort(_QWORD); // weak
retval_106D280 __golang runtime_cputicks(unsigned __int64 a1);
unsigned __int64 __golang runtime_memhash(const __m128i *a1, unsigned __int64 a2, unsigned __int64 a3);
unsigned __int64 __golang runtime_strhash(__int64 a1, unsigned __int64 a2);
__int64 __golang runtime_memhash32(unsigned int *a1, __int64 a2);
__int64 __golang runtime_memhash64(signed __int64 *a1, unsigned __int64 a2);
bool __gostk runtime_checkASM();
__int64 runtime_return0(void); // weak
void __golang __noreturn runtime_goexit(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __noreturn runtime_sigpanic0(); // weak
void runtime_gcWriteBarrier1();
void runtime_gcWriteBarrier2();
void runtime_gcWriteBarrier3();
void runtime_gcWriteBarrier4();
void runtime_gcWriteBarrier5();
void runtime_gcWriteBarrier6();
void runtime_gcWriteBarrier7();
void runtime_gcWriteBarrier8();
retval_106D500 __golang runtime_debugCallV2(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_debugCallPanicked(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, __int64 a11);
void __golang __noreturn runtime_panicIndex(int64 a1, _QWORD a2, signed __int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
void __golang __noreturn runtime_panicIndexU(int64 a1, __int64 a2, signed __int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
void __golang __noreturn runtime_panicSliceAlen(__int64 a1, __int64 a2, int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
void __golang __noreturn runtime_panicSliceAlenU(__int64 a1, __int64 a2, int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
void __golang __noreturn runtime_panicSliceAcap(__int64 a1, __int64 a2, int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
void __golang __noreturn runtime_panicSliceAcapU(__int64 a1, __int64 a2, int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
void __golang __noreturn runtime_panicSliceB(int64 a1, __int64 a2, signed __int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
void __golang __noreturn runtime_panicSliceBU(int64 a1, __int64 a2, signed __int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
void __golang __noreturn runtime_panicSlice3Alen(__int64 a1, signed __int64 a2, __int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
void __golang __noreturn runtime_panicSlice3C(int64 a1, __int64 a2, signed __int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
__int64 runtime_getfp(void); // weak
// _OWORD *__usercall runtime_duffzero@<rdi>();
retval_106DAA0 __golang runtime_duffcopy(__int64 a1, __int64 a2, __int64 a3, _OWORD *a4, __int128 *a5);
__int64 __golang runtime_memclrNoHeapPointers(_OWORD *a1, unsigned __int64 _RBX, double _XMM0_8);
char __golang runtime_memmove(__m128i *a1, const __m128i *a2, unsigned __int64 a3);
void __golang __noreturn runtime_asyncPreempt(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_106EA20 __golang runtime_sigprofNonGoWrapper(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang __noreturn runtime_exit_trampoline(__int64 a1, __int64 a2, __int64 a3, int *a4);
int __golang runtime_open_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
ssize_t __golang runtime_write_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
int __golang runtime_madvise_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
uint64_t runtime_nanotime_trampoline();
int __fastcall runtime_walltime_trampoline(timespec *__tp);
int __golang runtime_sigaction_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
int __golang runtime_sigprocmask_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
int __golang runtime_sigaltstack_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
int runtime_raiseproc_trampoline();
__int64 __golang runtime_sigfwd(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 (__fastcall *a10)(_QWORD, __int64, __int64), unsigned int a11, __int64 a12, __int64 a13);
void __golang runtime_sigtramp(__int64 a1, __int64 a2, __int64 a3, unsigned int a4, __int64 a5);
void __golang runtime_cgoSigtramp(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5);
void *__golang runtime_mmap_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
int __golang runtime_munmap_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
int __golang runtime_usleep_trampoline(__int64 a1, __int64 a2, __int64 a3, useconds_t *a4);
void runtime_settls();
int __golang runtime_sysctl_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
int runtime_kqueue_trampoline();
int __golang runtime_kevent_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
int __golang runtime_fcntl_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
retval_106EFC0 __golang runtime_mstart_stub(__int64 a1, __int64 a2, __int64 a3, unsigned __int64 *a4);
int __golang runtime_pthread_attr_init_trampoline(__int64 a1, __int64 a2, __int64 a3, pthread_attr_t **a4);
int __golang runtime_pthread_attr_getstacksize_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
int __golang runtime_pthread_attr_setdetachstate_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
int __golang runtime_pthread_create_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
int __golang runtime_raise_trampoline(__int64 a1, __int64 a2, __int64 a3, int *a4);
int __golang runtime_pthread_mutex_init_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
int __golang runtime_pthread_mutex_lock_trampoline(__int64 a1, __int64 a2, __int64 a3, pthread_mutex_t **a4);
int __golang runtime_pthread_mutex_unlock_trampoline(__int64 a1, __int64 a2, __int64 a3, pthread_mutex_t **a4);
int __golang runtime_pthread_cond_init_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
int __golang runtime_pthread_cond_wait_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
int __golang runtime_pthread_cond_timedwait_relative_np_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
int __golang runtime_pthread_cond_signal_trampoline(__int64 a1, __int64 a2, __int64 a3, pthread_cond_t **a4);
pthread_t runtime_pthread_self_trampoline();
int __golang runtime_pthread_kill_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
xpc_object_t runtime_osinit_hack_trampoline();
void __golang runtime_arc4random_buf_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
__int64 __golang runtime_syscall(__int64 a1, __int64 a2, __int64 a3, _QWORD *a4);
__int64 __golang runtime_syscallX(__int64 a1, __int64 a2, __int64 a3, _QWORD *a4);
__int64 __golang runtime_syscallPtr(__int64 a1, __int64 a2, __int64 a3, _QWORD *a4);
__int64 __golang runtime_syscall6(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
__int64 __golang runtime_syscall6X(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
int runtime_issetugid_trampoline();
string __golang runtime__ptr_lockRank_String(_ptr_runtime_lockRank);
string __golang runtime__ptr_plainError_Error(_ptr_runtime_plainError);
string __golang runtime__ptr_waitReason_String(_ptr_runtime_waitReason);
string __golang runtime__ptr_errorString_Error(_ptr_runtime_errorString);
string __golang runtime__ptr_errorAddressString_Error(_ptr_runtime_errorAddressString);
string __golang runtime__ptr_boundsError_Error(_ptr_runtime_boundsError);
__int64 __golang runtime_metricReader_compute_fm(__int64 a1, _QWORD *a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10);
__int64 __golang runtime__ptr_itabTableType_add_fm(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10);
unsigned __int128 __golang runtime_debugCallCheck_0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10);
void __golang __noreturn runtime_debugCallWrap_0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 (*a10)(void));
__int64 __golang runtime_reflectcallmove_0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, int a6, int a7, int a8, int a9, __int64 a10, __int64 a11, __int64 a12, __int64 a13, __int64 a14);
unsigned __int64 __golang runtime_wbBufFlush_0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 runtime_osinit_0(); // weak
void __golang __noreturn runtime_asyncPreempt2_0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __gostk __noreturn runtime_badmcall_0(__int64 a1);
void __gostk __noreturn runtime_badmcall2_0(__int64 a1);
void __noreturn runtime_badreflectcall_0(void); // weak
void __golang __noreturn runtime_badmorestackg0_0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, int a6, int a7, int a8, int a9);
__int64 runtime_badmorestackgsignal_0(void); // weak
void runtime_schedinit_0();
__int64 runtime_mstart0_0(void); // weak
void __golang __noreturn runtime_goexit1_0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
unsigned __int64 __golang runtime_newproc_0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 (*a10)(void));
__int64 __golang runtime_args_0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, unsigned int a10, __int64 a11);
void __golang __noreturn runtime_check_0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_sigprofNonGo_0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, unsigned int a10, __int64 a11, __int64 a12);
__int64 __golang runtime_newstack_0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, unsigned int *a6, unsigned int *a7, unsigned __int64 a8, __int64 a9);
void __golang __noreturn runtime_morestackc_0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_badsystemstack_0(_QWORD, _QWORD, _QWORD, _QWORD); // weak
__int64 __golang runtime_reflectcall_0(__int64 a1, retval_106BA60 (__golang **a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double), const void *a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, char a10);
__int64 __golang runtime_asmcgocall_0(__int64 (__fastcall *a1)(__int64), __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_106FC20 __golang runtime_fcntl_0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9);
unsigned int __gostk runtime_write_0(__int64 a1, __int64 a2, unsigned int a3);
bool __golang type__eq_runtime_Frame(__int64 a1, __int64 a2);
bool __golang type__eq_runtime_modulehash(__int64 a1, __int64 a2);
bool __golang type__eq_runtime_bitvector(__int64 a1, __int64 a2);
bool __golang type__eq_runtime__func(const __m128i *a1, const __m128i *a2);
__int64 type__eq_runtime_PanicNilError(); // weak
bool __golang type__eq_runtime_boundsError(__int64 a1, __int64 a2);
bool __golang type__eq_runtime__panic(__int64 a1, __int64 a2);
bool __golang type__eq_runtime_mcache(const __m128i *a1, const __m128i *a2);
bool __golang type__eq_runtime_mspan(__int64 a1, __int64 a2);
bool __golang type__eq_runtime_mSpanList(_QWORD *a1, _QWORD *a2);
bool __golang type__eq_runtime_gcBits(_BYTE *a1, _BYTE *a2);
bool __golang type__eq_runtime_special(__int64 a1, __int64 a2);
bool __golang type__eq_struct__runtime_gList_runtime_n_int32_(__int64 a1, __int64 a2);
bool __golang type__eq_runtime_hchan(__int64 a1, __int64 a2);
bool __golang type__eq_runtime_pTraceState(const __m128i *a1, const __m128i *a2);
__int64 __golang type__eq_runtime_traceSchedResourceState(const __m128i *a1, const __m128i *a2);
__int64 type__eq_runtime_notInHeap(); // weak
bool __golang type__eq_runtime_limiterEvent(_QWORD *a1, _QWORD *a2);
bool __golang type__eq_runtime_gcWork(const __m128i *a1, const __m128i *a2);
bool __golang type__eq_runtime_workbuf(const __m128i *a1, const __m128i *a2);
bool __golang type__eq_runtime_mTraceState(const __m128i *a1, const __m128i *a2);
bool __golang type__eq_runtime_traceBuf(const __m128i *a1, const __m128i *a2);
bool __golang type__eq_runtime_mOS(__int64 a1, __int64 a2);
__int64 __golang type__eq_runtime_gTraceState(const __m128i *a1, const __m128i *a2);
bool __golang type__eq_runtime_errorAddressString(__int64 a1, __int64 a2);
bool __golang type__eq_runtime_untracedG_4(const __m128i *a1, const __m128i *a2);
bool __golang type__eq_runtime_TypeAssertionError(__int64 a1, __int64 a2);
bool __golang type__eq_runtime_piController(__int64 a1, __int64 a2);
bool __golang type__eq__2_runtime_Frame(__int64 a1, __int64 a2);
retval_1070820 __golang sync_atomic__ptr_Uint32_Store(volatile __int32 *a1, __int32 a2);
__int64 __golang sync_atomic_SwapUintptr(volatile __int64 *a1, __int64 a2);
bool __golang sync_atomic_CompareAndSwapUintptr(volatile signed __int64 *a1, signed __int64 a2, signed __int64 a3);
retval_1070880 __golang sync_atomic_StoreUintptr(volatile __int64 *a1, __int64 a2);
bool __golang type__eq_sync_atomic_Bool(_DWORD *a1, _DWORD *a2);
bool __golang type__eq_sync_atomic_Uint32(_DWORD *a1, _DWORD *a2);
bool __golang type__eq_sync_atomic_Uint64(_QWORD *a1, _QWORD *a2);
// string __golang internal_reflectlite_rtype_String(reflectlite_rtype);
// string __golang internal_reflectlite_rtype_Name(reflectlite_rtype);
uintptr __golang internal_reflectlite_elem(reflectlite_rtype a1);
// reflectlite_Type __golang internal_reflectlite_rtype_Elem(reflectlite_rtype);
signed __int64 __golang internal_reflectlite_rtype_Len(reflectlite_rtype);
bool __golang internal_reflectlite_rtype_Comparable(reflectlite_rtype);
bool __golang internal_reflectlite__ptr_rtype_Comparable(_ptr_reflectlite_rtype);
reflectlite_Type __golang internal_reflectlite__ptr_rtype_Elem(_ptr_reflectlite_rtype);
signed __int64 __golang internal_reflectlite__ptr_rtype_Len(_ptr_reflectlite_rtype);
string __golang internal_reflectlite__ptr_rtype_Name(_ptr_reflectlite_rtype);
string __golang internal_reflectlite__ptr_rtype_String(_ptr_reflectlite_rtype);
string __golang errors__ptr_errorString_Error(_ptr_errors_errorString);
__int64 __golang errors_Is(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
__int64 __golang errors_is(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, double a6);
retval_1071260 __golang unicode_utf8_DecodeRune(unsigned __int8 *a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, int a8, int a9);
retval_1071400 __golang unicode_utf8_DecodeRuneInString(unsigned __int8 *a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, int a8, int a9);
retval_10715A0 __golang unicode_utf8_encodeRuneNonASCII(__int64 a1, unsigned __int64 a2, __int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
__int64 __golang unicode_utf8_appendRuneNonASCII(__int64 result, __int64 a2, unsigned __int64 a3, int a4);
// __int64 __golang strconv__ptr_decimal_Assign(_QWORD, _QWORD); weak
// __int64 __golang strconv__ptr_decimal_Shift(_QWORD, _QWORD); weak
// __int64 __golang strconv__ptr_decimal_Round(_QWORD, _QWORD); weak
retval_1071FC0 __golang strconv_genericFtoa(__int64 r0, __int64 a2, unsigned __int64 r2, unsigned __int8 a4, __int64 a5, __int64 a6, double a7);
__int64 __golang strconv_bigFtoa(int a1, int a2, int a3, __int64 a4, unsigned __int8 a5, unsigned __int8 a6, __int64 a7, __int64 a8, _QWORD *a9);
// __int64 __golang strconv_formatDigits(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64, __int64, __int64, __int64, __int64); weak
// __int64 __golang strconv_roundShortest(_QWORD, _QWORD, _QWORD, _QWORD); weak
__int64 __golang strconv_fmtE(__int64 result, __int64 r1, unsigned __int64 r2, char a4, char *a5, __int64 a6, unsigned __int64 a7, __int64 a8, __int64 a9, __int64 a10, char a11);
__int64 __golang strconv_fmtF(__int64 result, __int64 r1, unsigned __int64 r2, unsigned __int64 a4, const __m128i *a5, unsigned __int64 a6, unsigned __int64 a7, __int64 a8, __int64 a9, __int64 a10);
// __int64 __fastcall strconv_fmtB(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
__int64 __golang strconv_fmtX(__int64 r0, __int64 r1, unsigned __int64 r2, __int64 a4, unsigned __int8 a5, char a6, __int64 a7, __int64 a8, _QWORD *a9);
unsigned __int64 __golang strconv_ryuFtoaFixed32(unsigned __int64 result, unsigned int a2, __int64 a3, signed __int64 a4);
unsigned __int64 __golang strconv_ryuFtoaFixed64(unsigned __int64 result, unsigned __int64 a2, __int64 a3, signed __int64 a4);
unsigned __int64 __golang strconv_formatDecimal(char *a1, unsigned __int64 a2, char a3, char *a4, unsigned __int64 a5, int a6, unsigned __int64 a7, const char *a8, int a9);
// __int64 __golang strconv_ryuFtoaShortest(_QWORD, _QWORD, _QWORD, _QWORD); weak
__int64 *__golang strconv_ryuDigits32(__int64 *result, unsigned int a2, unsigned int a3, unsigned int a4, bool a5, __int64 a6, __int64 a7, __int64 a8, int a9);
// retval_10752C0 __golang strconv_mult64bitPow10(_QWORD, _QWORD, _QWORD); weak
// retval_10753A0 __golang strconv_mult128bitPow10(_QWORD, _QWORD, _QWORD); weak
retval_10754C0 __golang strconv_FormatInt(__int64 a1, unsigned __int64 a2, __int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
retval_10755A0 __golang strconv_formatBits(unsigned __int64 r0, __int64 a2, unsigned __int64 r2, unsigned __int64 a4, unsigned __int64 a5, char a6, char a7);
__m128i *__golang strconv_appendQuotedWith(__m128i *result, unsigned __int64 a2, unsigned __int64 a3, unsigned __int8 *a4, unsigned __int64 a5, __int64 a6, __int64 a7, unsigned int a8);
// __int64 __fastcall strconv_appendEscapedRune(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
// __int64 __golang strconv_IsPrint(_QWORD); weak
// void __golang internal_sync__ptr_Mutex_lockSlow(_ptr_sync_Mutex_0);
// __int64 __golang internal_sync__ptr_Mutex_unlockSlow(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
__int64 __golang sync__ptr_Once_doSlow(__int64 a1, void (**a2)(void));
// __int64 __golang sync__ptr_Once_doSlow_deferwrap2(int, int, int, int, int, int, int, int, int, char); weak
// __int64 __golang sync__ptr_Once_doSlow_deferwrap1(int, int, int, int, int, int, int, int, int, char); weak
// __int64 __golang sync__ptr_Pool_Put(_QWORD, _QWORD, _QWORD); weak
// interface_ __golang sync__ptr_Pool_Get(_ptr_sync_Pool);
retval_1077140 __golang sync__ptr_Pool_getSlow(__int64 *a1, unsigned __int64 a2);
// __int64 __golang sync__ptr_poolDequeue_pushHead(_QWORD); weak
// retval_1077760 __golang sync__ptr_poolDequeue_popHead(_QWORD); weak
__int64 __golang sync__ptr_poolChain_pushHead(sync_poolChainElt **a1);
retval_1077BA0 __golang sync__ptr_poolChain_popHead(__int64 *a1);
// __int64 __golang sync__ptr_poolChain_popTail(_QWORD); weak
__int64 __golang internal_sync__ptr_HashTrieMap_go_shape_interface__comma_go_shape_interface___iter(__int64 a1, __int64 a2, __int64 a3, unsigned __int8 (__golang **a4)(_QWORD, _QWORD, _QWORD, _QWORD));
__int64 __golang internal_sync__ptr_HashTrieMap_go_shape_interface__comma_go_shape_interface___Range(__int64 a1, __int64 a2, unsigned __int8 (__golang **a3)(_QWORD, _QWORD, _QWORD, _QWORD));
retval_10780E0 __golang internal_sync__ptr_HashTrieMap_go_shape_interface__comma_go_shape_interface___expand(__int64 a1, __int64 a2, __int64 a3, __int64 a4, unsigned __int64 a5, __int64 a6, sync_indirect_go_shape_interface__comma_go_shape_interface__ *a7);
retval_1078320 __golang internal_sync__ptr_HashTrieMap_go_shape_interface__comma_go_shape_interface___LoadOrStore(__int64 a1, __int64 a2, void *a3, void *a4, __int64 a5, __int64 a6);
// __int64 __golang internal_sync__ptr_HashTrieMap_go_shape_interface__comma_go_shape_interface___LoadOrStore_deferwrap1(int, int, int, int, int, int, int, int, int, char); weak
retval_1078A20 __golang internal_sync__ptr_HashTrieMap_go_shape_interface__comma_go_shape_interface___Load(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
__int64 __golang internal_sync__ptr_HashTrieMap_go_shape_interface__comma_go_shape_interface___initSlow(__int64 a1, __int64 a2);
// __int64 __golang internal_sync__ptr_HashTrieMap_go_shape_interface__comma_go_shape_interface___initSlow_deferwrap1(int, int, int, int, int, int, int, int, int, char); weak
__int64 __golang type__eq_sync_Mutex(_DWORD *a1, _DWORD *a2);
bool __golang type__eq_sync_atomic_Pointer_sync_poolChainElt_(_QWORD *a1, _QWORD *a2);
bool __golang type__eq_sync_poolLocal(const __m128i *a1, const __m128i *a2);
__int64 __golang type__eq_sync_poolLocalInternal(_QWORD *a1, _QWORD *a2);
bool __golang type__eq_sync_poolChain(_QWORD *a1, _QWORD *a2);
bool __golang type__eq_sync_atomic_Pointer_internal_sync_indirect_interface__comma_interface___(_QWORD *a1, _QWORD *a2);
__int64 __golang type__eq_internal_sync_indirect_interface__comma_interface__(__int64 a1, __int64 a2);
__int64 __golang type__eq_internal_sync_entry_interface__comma_interface__(__int64 a1, __int64 a2);
bool __golang type__eq_sync_atomic_Pointer_internal_sync_entry_interface__comma_interface___(_QWORD *a1, _QWORD *a2);
__int64 __golang type__eq__16_sync_atomic_Pointer_internal_sync_node_interface__comma_interface___(__int64 a1, __int64 a2);
bool __golang type__eq_sync_atomic_Pointer_internal_sync_node_interface__comma_interface___(_QWORD *a1, _QWORD *a2);
__int64 __golang type__eq_sync_Once(_DWORD *a1, _DWORD *a2);
__int64 __golang type__eq_internal_sync_entry_go_shape_interface__comma_go_shape_interface__(__int64 a1, __int64 a2);
bool __golang type__eq_sync_atomic_Pointer_internal_sync_entry_go_shape_interface__comma_go_shape_interface___(_QWORD *a1, _QWORD *a2);
__int64 __golang type__eq_internal_sync_indirect_go_shape_interface__comma_go_shape_interface__(__int64 a1, __int64 a2);
__int64 __golang type__eq__16_sync_atomic_Pointer_go_shape_struct__internal_sync_isEntry_bool__(__int64 a1, __int64 a2);
bool __golang type__eq_sync_atomic_Pointer_go_shape_struct__internal_sync_isEntry_bool__(_QWORD *a1, _QWORD *a2);
void unicode_init();
// retval_10795C0 __golang internal_itoa_Itoa(_QWORD, _QWORD, _QWORD); weak
void reflect_init();
__int64 __golang reflect__ptr_abiSeq_addArg(__int64 *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, int a8, _QWORD *a9);
// retval_1079B60 __golang reflect__ptr_abiSeq_addRcvr(_QWORD); weak
__int64 __golang reflect__ptr_abiSeq_regAssign(_QWORD *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, int a7, int a8, int a9);
__int64 __golang reflect__ptr_abiSeq_assignIntN(_QWORD *a1, __int64 a2, __int64 a3, unsigned __int64 a4, unsigned __int8 a5);
retval_107A620 __golang reflect_newAbiDesc(__int64 a1, __int64 a2);
// __int64 __fastcall reflect_intFromReg(_QWORD, _QWORD, _QWORD, _QWORD); weak
// __int64 __golang reflect_intToReg(_QWORD, _QWORD, _QWORD, _QWORD); weak
// __int64 __golang reflect_moveMakeFuncArgPtrs(_QWORD, _QWORD); weak
void __golang reflect_mapIterStart(__int64 a1, _QWORD *a2, __int64 *a3);
void __golang reflect_mapIterNext(__int64 *a1);
__int64 __golang reflect__ptr_MapIter_Key(_QWORD *a1);
__int64 __golang reflect__ptr_MapIter_Value(_QWORD *a1);
bool __golang reflect__ptr_MapIter_Next(__int64 *a1);
// void __golang reflect_flag_panicNotMap(reflect_flag);
retval_107B7C0 __golang reflect__ptr_rtype_exportedMethods(__int64 a1);
uintptr __golang reflect_elem(reflect_rtype *a1);
// string __golang reflect_ChanDir_String(reflect_ChanDir);
__int64 *__golang reflect__ptr_structType_Field(abi_Name *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, size_t len);
retval_107BBC0 __golang reflect_funcLayout(reflect_rtype *a1, reflect_rtype *a2);
// __int64 __golang reflect_funcLayout_func1(); weak
int *__golang reflect_addTypeBits(int *result, unsigned __int64 a2, __int64 a3, int a4, int a5, int a6, __int64 a7, int a8, _QWORD *a9);
__int64 __golang reflect_packEface(__int64 result, __int64 a2, __int16 a3);
// void __golang reflect_Value_panicNotBool(reflect_Value);
retval_107CD80 __golang reflect_Value_bytesSlow(__int64 a1, __int64 a2, __int16 a3, __int64 r3, __int64 a5, __int64 r5, __int64 r6, __int64 r7);
retval_107CF80 __golang reflect_methodReceiver(__int64 a1, __int64 a2, __int64 a3, __int64 *a4, __int64 a5, unsigned __int64 a6);
__int64 __golang reflect_callMethod(unsigned __int64 *a1, __int64 a2, _BYTE *a3, _QWORD *a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, unsigned __int64 *a10);
retval_107E2A0 __golang reflect_Value_Elem(abi_Type *a1, _QWORD *a2, char a3);
__int64 __golang reflect_Value_Field(__int64 a1, __int64 a2, char a3, unsigned __int64 a4);
// retval_107E580 __golang reflect_Value_Index(_QWORD, _QWORD, _QWORD); weak
signed __int64 __golang reflect_Value_lenNonSlice(reflect_Value);
// __int64 __golang reflect_copyVal(_QWORD, _QWORD); weak
// signed __int64 __golang reflect_Value_NumField(reflect_Value);
uintptr __golang reflect_Value_Pointer(reflect_Value);
string __golang reflect_Value_stringNonString(reflect_Value);
reflect_Type __golang reflect_Value_typeSlow(reflect_Value);
_ptr_abi_Type __golang reflect_Value_abiTypeSlow(reflect_Value);
retval_107F0A0 __golang reflect_Value_UnsafePointer(_QWORD *a1, _QWORD *a2, __int16 a3);
bool __golang reflect_Value_Comparable(reflect_Value);
// string __golang reflect__ptr_rtype_String(_ptr_reflect_rtype);
reflect_Kind __golang reflect__ptr_rtype_Kind(_ptr_reflect_rtype);
bool __golang reflect__ptr_rtype_Comparable(_ptr_reflect_rtype);
// __int64 __golang reflect_valueInterface(_QWORD, _QWORD, _QWORD, _QWORD); weak
retval_107FA40 __golang reflect_methodValueCall(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, double a17, double a18, double a19, double a20, double a21, double a22, double a23, double a24, char a25);
__int64 __golang type__eq_reflect_Method(__int64 a1, __int64 a2);
string __golang reflect__ptr_Kind_String(_ptr_reflect_Kind);
string __golang reflect__ptr_ChanDir_String(_ptr_reflect_ChanDir);
bool __golang reflect__ptr_Value_Comparable(_ptr_reflect_Value);
reflect_Kind __golang reflect__ptr_Value_Kind(_ptr_reflect_Value);
signed __int64 __golang reflect__ptr_Value_Len(_ptr_reflect_Value);
string __golang reflect__ptr_Value_String(_ptr_reflect_Value);
__int64 __golang reflect_moveMakeFuncArgPtrs_0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, __int64 a11);
__int64 __golang reflect_callMethod_0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, unsigned __int64 *a10, __int64 a11, _BYTE *a12, _QWORD *a13);
bool __golang type__eq_reflect_ValueError(__int64 a1, __int64 a2);
bool __golang type__eq_reflect_makeFuncCtxt(__int64 a1, __int64 a2);
__int64 __golang type__eq_reflect_methodValue(__int64 a1, __int64 a2);
retval_1080040 __golang internal_fmtsort_Sort(abi_Type *data, void *a2, reflect_flag a3);
__int64 __golang internal_fmtsort_compare(abi_Type *data, double *a2, reflect_flag a3, abi_Type *a4, double *a5, reflect_flag a6);
// retval_1081160 __golang internal_fmtsort_nilCompare(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
__int64 __golang internal_fmtsort_Sort_func1(abi_Type *a1, double *a2, reflect_flag a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, abi_Type *a10, double *a11, reflect_flag a12);
__int64 __golang slices_stableCmpFunc_go_shape_struct__Key_reflect_Value_Value_reflect_Value__(__int64 result, __int64 a2, unsigned __int64 a3, __int128 *a4, __int64 a5, _QWORD *a6);
unsigned __int64 __golang slices_symMergeCmpFunc_go_shape_struct__Key_reflect_Value_Value_reflect_Value__(unsigned __int64 result, __int64 a2, unsigned __int64 a3, _OWORD *a4, int64 a5, char *a6, char *a7, _QWORD *a8);
__int64 __golang slices_rotateCmpFunc_go_shape_struct__Key_reflect_Value_Value_reflect_Value__(__int64 a1, __int64 a2, unsigned __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, _OWORD *i, __int64 a9);
retval_1082C60 __golang internal_bisect_New(const char *a1, unsigned __int64 a2);
// __int64 __golang internal_bisect__ptr_Matcher_stack(_QWORD, _QWORD, _QWORD); weak
retval_1083A20 __golang internal_bisect_printStack(__int64 a1, __int64 a2, unsigned __int64 a3, uintptr *a4, size_t a5, size_t a6);
__int64 __golang internal_bisect_Hash(__int64 a1, __int64 r1);
string __golang internal_bisect__ptr_parseError_Error(_ptr_bisect_parseError);
bool __golang type__eq_internal_bisect_cond(__int64 a1, __int64 a2);
bool __golang type__eq_sync_atomic_Pointer_internal_bisect_dedup_(_QWORD *a1, _QWORD *a2);
void __golang internal_godebug__ptr_Setting_IncNonDefault(_ptr_godebug_Setting);
void __golang internal_godebug__ptr_Setting_register(_ptr_godebug_Setting);
string __golang internal_godebug__ptr_Setting_Value(_ptr_godebug_Setting);
// __int64 __golang internal_godebug__ptr_Setting_Value_func1(); weak
godebug_setting *__golang internal_godebug_lookup(const __m128i *a1, char *a2);
__int64 __golang internal_godebug_update(__int64 a1, unsigned __int64 a2, __int64 a3, unsigned __int64 a4);
// __int64 __golang internal_godebug_update_func1(); weak
// __int64 __golang internal_godebug_update_deferwrap1(int, int, int, int, int, int, int, int, int, char); weak
__int64 __golang internal_godebug_parse(__int64 result, __int64 a2, unsigned __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, int a8, int a9);
void __golang internal_godebug__ptr_Setting_IncNonDefault_fm(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, char a10);
__int64 __golang sync_atomic__ptr_Uint64_Load_fm(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, char a10);
void __golang internal_godebug__ptr_Setting_register_fm(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, char a10);
bool __golang type__eq_internal_godebug_setting(__int64 a1, __int64 a2);
bool __golang type__eq_sync_atomic_Pointer_internal_godebug_value_(_QWORD *a1, _QWORD *a2);
bool __golang type__eq_internal_godebug_value(__int64 a1, __int64 a2);
bool __golang type__eq_internal_godebug_Setting(__int64 a1, __int64 a2);
// retval_1085DA0 __golang syscall_Getenv(_QWORD, _QWORD); weak
retval_1086040 __golang syscall_SetNonblock(__int64 a1, char a2);
__int64 syscall_init_0(); // weak
__int64 __golang syscall_adjustFileLimit(_QWORD *a1);
// retval_10861E0 __golang syscall_ByteSliceFromString(_QWORD, _QWORD); weak
// retval_10862A0 __golang syscall_Getwd(); weak
// retval_10863C0 __golang syscall_SysctlUint32(_QWORD, _QWORD); weak
retval_1086480 __golang syscall_nametomib(__int64 a1, __int64 a2);
// string __golang syscall_Errno_Error(syscall_Errno);
bool __golang syscall_Errno_Is(syscall_Errno, error);
// __int64 __golang syscall_Close(_QWORD); weak
// retval_10868C0 __golang syscall_Dup(); weak
retval_1086980 __golang syscall_Getrlimit(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __fastcall syscall_Open(_QWORD, _QWORD, _QWORD, _QWORD); weak
// retval_1086B80 __golang syscall_read(_QWORD, _QWORD, _QWORD, _QWORD); weak
// retval_1086C80 __golang syscall_Seek(_QWORD, _QWORD, _QWORD); weak
retval_1086D60 __golang syscall_setrlimit(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// retval_1086E20 __golang syscall_write(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
retval_10871A0 __golang syscall_Fstat(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// retval_10875A0 __golang syscall_fcntl(_QWORD, _QWORD, _QWORD); weak
// __int64 __golang syscall_closedir(_QWORD); weak
retval_1087740 __golang syscall_readdir_r(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_10878C0 __golang syscall_sysctl(__int64 *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
int __cdecl syscall_libc_getrlimit_trampoline(int, rlimit *);
int __cdecl syscall_libc_readdir_r_trampoline(DIR *, dirent *, dirent **);
int __cdecl syscall_libc_setrlimit_trampoline(int, const rlimit *);
int __cdecl syscall_libc_sysctl_trampoline(int *, u_int, void *, size_t *, void *, size_t);
int __cdecl syscall_libc_fstat64_trampoline(int, stat64 *);
string __golang syscall__ptr_Errno_Error(_ptr_syscall_Errno);
bool __golang syscall__ptr_Errno_Is(_ptr_syscall_Errno, error);
retval_1087EC0 __golang time_appendInt(__int64 r0, __int64 r1, unsigned __int64 r2, unsigned __int64 a4, __int64 a5, double a6, __int64 a7, __int64 a8, int a9, int a10);
// retval_10882A0 __golang time_appendNano(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
string __golang time_Time_String(time_Time);
string __golang time_Time_GoString(time_Time);
retval_1088C60 __golang time_Time_Format(__int64 a1, __int64 a2, __int64 a3, const __m128i *a4, unsigned __int64 a5);
__int64 __golang time_Time_AppendFormat(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, unsigned __int64 a6, const __m128i *a7, unsigned __int64 a8);
retval_1088FA0 __golang time_Time_appendFormat(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, unsigned __int64 a6, __int64 a7, unsigned __int64 a8);
retval_108B440 __golang time_quote(__int64 a1, signed __int64 a2);
__int64 __golang time_Time_appendFormatRFC3339(int a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, unsigned __int64 a6, char a7);
retval_108BD60 __golang time_preadn(__int64 a1, __int64 a2, unsigned __int64 a3, __int64 a4, __int64 a5);
retval_108BEC0 __golang time_absDays_date(__int64 a1);
retval_108BF80 __golang time_absDays_yearYday(__int64 a1);
// __int64 __golang time_Time_absSec(_QWORD, _QWORD); weak
// retval_108C180 __golang time_Time_locabs(); weak
retval_108C6E0 __golang time_tzset(_BYTE *a1, __int64 a2, __int64 a3, __int64 a4, int a5, __int64 a6, __int64 a7, int a8, int a9);
retval_108CC80 __golang time_tzsetName(_BYTE *a1, __int64 a2, __int64 a3, int a4, int a5, __int64 a6, __int64 a7, int a8, int a9);
// retval_108CE60 __golang time_tzsetOffset(_QWORD, _QWORD); weak
// retval_108D3A0 __golang time_tzsetRule(_QWORD); weak
__int64 __golang time_tzruleTime(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7);
// retval_108E0E0 __golang time__ptr_dataIO_big8(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
retval_108E260 __golang time_LoadLocationFromTZData(__int64 a1, size_t a2, signed __int64 a3, signed __int64 a4, __int64 a5, __int64 a6, int a7, signed __int64 a8);
retval_108F740 __golang time_loadTzinfoFromZip(__int64 a1, __int64 a2, const __m128i *a3, __int64 a4, __int64 a5);
__int64 __golang time_loadTzinfoFromZip_deferwrap1(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, char a10);
// retval_1090320 __golang time_loadTzinfo(_QWORD, _QWORD, _QWORD, _QWORD); weak
retval_10903E0 __golang time_loadLocation(__int64 a1, size_t a2, _QWORD *a3, __int64 a4);
__int64 __golang time_readFile_deferwrap1(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, char a10);
const char *time_initLocal();
retval_1091000 __golang time_nextStdChunk(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, int a5, __int64 a6, __int64 a7, int a8, int a9);
string __golang time__ptr_Time_GoString(_ptr_time_Time);
string __golang time__ptr_Time_String(_ptr_time_Time);
string __golang time__ptr_fileSizeError_Error(_ptr_time_fileSizeError);
bool __golang type__eq_time_zone(__int64 a1, __int64 a2);
bool __golang type__eq_time_zoneTrans(__int64 a1, __int64 a2);
retval_1092260 __golang io_fs_FormatDirEntry(__int64 a1, __int64 a2);
// string __golang io_fs_FileMode_String(fs_FileMode);
bool __golang io_fs_FileMode_IsDir(fs_FileMode);
__int64 __golang io_fs_FileMode_Type(int a1);
string __golang io_fs__ptr_PathError_Error(_ptr_fs_PathError);
error __golang io_fs__ptr_PathError_Unwrap(_ptr_fs_PathError);
__int64 __golang type__eq_io_fs_PathError(__int64 a1, __int64 a2);
bool __golang io_fs__ptr_FileMode_IsDir(_ptr_fs_FileMode);
string __golang io_fs__ptr_FileMode_String(_ptr_fs_FileMode);
__int64 __golang io_fs__ptr_FileMode_Type(_DWORD *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, char a10);
// retval_10928C0 __golang internal_filepathlite_Base(_QWORD, _QWORD); weak
__int64 __golang internal_testlog_Getenv(__int64 result, __int64 a2);
__int64 __golang internal_testlog_Stat(__int64 result, __int64 a2);
// retval_1092A60 __golang internal_syscall_unix_Fcntl(_QWORD, _QWORD, _QWORD); weak
string __golang internal_poll__ptr_DeadlineExceededError_Error(_ptr_poll_DeadlineExceededError);
// __int64 __golang internal_poll__ptr_fdMutex_rwlock(_QWORD, _QWORD); weak
// error __golang internal_poll__ptr_FD_decref(_ptr_poll_FD);
// void __golang internal_poll__ptr_FD_writeUnlock(_ptr_poll_FD);
// retval_1092F80 __golang internal_poll__ptr_FD_OpenDir(); weak
// __int64 __golang internal_poll__ptr_pollDesc_prepare(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// __int64 __golang internal_poll__ptr_pollDesc_wait(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64, __int64); weak
// __int64 __golang internal_poll__ptr_FD_Init(_QWORD, _QWORD, _QWORD, _QWORD); weak
// error __golang internal_poll__ptr_FD_Close(_ptr_poll_FD);
retval_10D43A0 __golang internal_poll__ptr_FD_Write(_ptr_poll_FD, _slice_uint8);
void __golang internal_poll__ptr_FD_Write_deferwrap1(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, char a10);
retval_1093BE0 __golang internal_poll__ptr_FD_Fstat(volatile signed __int64 *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_1093D80 __golang internal_poll__ptr_FD_Fstat_deferwrap1(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, char a10);
// retval_1093DE0 __golang internal_poll_DupCloseOnExec(_QWORD); weak
retval_1093F00 __golang internal_poll__ptr_FD_Dup(volatile signed __int64 *a1);
retval_10940A0 __golang internal_poll__ptr_FD_Dup_deferwrap1(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, char a10);
retval_1094100 internal_poll_dupCloseOnExecOld();
// __int64 __golang internal_poll_dupCloseOnExecOld_deferwrap1(int, int, int, int, int, int, int, int, int, char); weak
string __golang internal_poll__ptr_errNetClosing_Error(_ptr_poll_errNetClosing);
bool __golang type__eq_internal_poll_FD(const __m128i *a1, const __m128i *a2);
// retval_1094640 __golang os__ptr_File_Readdirnames(_QWORD, _QWORD, _QWORD); weak
retval_10946E0 __golang os__ptr_File_readdir(__int64 a1, __int64 a2, __int64 a3);
// retval_10952A0 __golang os_Getenv(_QWORD, _QWORD); weak
string __golang os__ptr_SyscallError_Error(_ptr_os_SyscallError);
error __golang os__ptr_SyscallError_Unwrap(_ptr_os_SyscallError);
__int64 __golang os_underlyingErrorIs(__int64 a1, _QWORD *a2, RTYPE **a3, __int64 a4);
retval_10D43A0 __golang os__ptr_File_Write(_ptr_os_File, _slice_uint8);
retval_10957E0 __golang os__ptr_File_wrapErr(__int64 a1, char *a2, size_t a3, RTYPE **a4, __int64 a5);
os_File *__golang os_NewFile(signed __int64 a1, char *a2, size_t a3);
os_File *__golang os_newFile(signed __int64 a1, char *a2, size_t a3, __int64 a4, char a5);
retval_1095E20 __golang os_openDirNolog(char *a1, size_t a2, __int64 a3, __int64 a4, __int64 a5);
error __golang os__ptr_file_close(_ptr_os_file);
string __golang os__ptr_unixDirent_Name(_ptr_os_unixDirent);
bool __golang os__ptr_unixDirent_IsDir(_ptr_os_unixDirent);
fs_FileMode __golang os__ptr_unixDirent_Type(_ptr_os_unixDirent);
string __golang os__ptr_unixDirent_String(_ptr_os_unixDirent);
retval_10961A0 __golang os_newUnixDirent(char *a1, size_t a2, char *a3, size_t a4, fs_FileMode a5);
retval_1096340 os_Getwd();
__int64 __golang os_fillFileStatFromSys(__int64 a1, __int64 a2, __int64 a3);
retval_10D24E0 __golang os__ptr_File_Stat(_ptr_os_File);
// retval_10970C0 __golang os_statNolog(_QWORD, _QWORD); weak
// __int64 __golang os_lstatNolog(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
string __golang os__ptr_fileStat_Name(_ptr_os_fileStat);
fs_FileMode __golang os__ptr_fileStat_Mode(_ptr_os_fileStat);
bool __golang type__eq_os_fileStat(__int64 a1, __int64 a2);
bool __golang type__eq_os_file(__int64 a1, __int64 a2);
bool __golang type__eq_sync_atomic_Pointer_os_dirInfo_(_QWORD *a1, _QWORD *a2);
__int64 __golang type__eq_os_unixDirent(__int64 a1, __int64 a2);
__int64 __golang type__eq_os_LinkError(__int64 a1, __int64 a2);
__int64 __golang type__eq_os_SyscallError(__int64 a1, __int64 a2);
void __golang fmt__ptr_fmt_writePadding(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, int a7, int a8, int a9);
void __golang fmt__ptr_fmt_pad(__int64 a1, const __m128i *a2, signed __int64 a3, __int64 a4, __int64 a5, __int64 a6, int a7, int a8, int a9);
void __golang fmt__ptr_fmt_padString(__int64 **a1, const __m128i *a2, signed __int64 a3, __int64 a4, __int64 a5, __int64 a6, int a7, int a8, int a9);
void __golang fmt__ptr_fmt_fmtUnicode(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, int a7, __int64 a8, int a9);
// __int64 __golang fmt__ptr_fmt_fmtInteger(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
retval_1098900 __golang fmt__ptr_fmt_truncate(__int64 a1, __int64 a2, signed __int64 a3, unsigned __int64 a4, __int64 a5, __int64 a6, __int64 a7, int a8, int a9);
// __int64 __golang fmt__ptr_fmt_fmtS(_QWORD, _QWORD, _QWORD); weak
// __int64 __golang fmt__ptr_fmt_fmtBs(_QWORD); weak
void __golang fmt__ptr_fmt_fmtSbx(__int64 a1, __int64 a2, unsigned __int64 a3, __int64 a4, unsigned __int64 a5, __int64 a6, __int64 a7, unsigned __int64 a8, int a9);
// __int64 __golang fmt__ptr_fmt_fmtQ(_QWORD, _QWORD, _QWORD); weak
void __golang fmt__ptr_fmt_fmtC(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, int a7, int a8, int a9);
void __golang fmt__ptr_fmt_fmtFloat(__int64 a1, __int64 a2, int a3, __int64 a4, double a5);
// __int64 __golang fmt_Fprintln(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
// retval_1099FA0 __golang fmt_getField(_QWORD, _QWORD, _QWORD); weak
// __int64 fmt__ptr_pp_unknownType(void); weak
// __int64 __golang fmt__ptr_pp_badVerb(_QWORD, _QWORD); weak
// __int64 __golang fmt__ptr_pp_fmtBool(_QWORD, _QWORD, _QWORD); weak
__int64 __golang fmt__ptr_pp_fmt0x64(__int64 a1, __int64 a2, char a3);
// __int64 __fastcall fmt__ptr_pp_fmtInteger(_QWORD, _QWORD, _QWORD, _QWORD); weak
// __int64 __golang fmt__ptr_pp_fmtFloat(double); weak
// __int64 __golang fmt__ptr_pp_fmtComplex(double, double); weak
// __int64 __fastcall fmt__ptr_pp_fmtString(_QWORD, _QWORD, _QWORD, _QWORD); weak
void __golang fmt__ptr_pp_fmtBytes(_QWORD *a1, __int64 a2, signed __int64 a3, __int64 a4, __int64 a5, const __m128i *a6, unsigned __int64 a7, __int64 a8, int a9);
// __int64 __golang fmt__ptr_pp_fmtPointer(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
void __golang fmt__ptr_pp_catchPanic(__int64 *a1, __int64 a2, _QWORD *a3, unsigned int a4, const __m128i *a5, unsigned __int64 a6);
// __int64 __golang fmt__ptr_pp_handleMethods(_QWORD, _QWORD); weak
void __golang fmt__ptr_pp_printArg(_QWORD *a1, reflect_rtype *a2, unsigned __int8 *a3, __int64 a4, __int64 a5, __int64 a6, int a7, int a8, _QWORD *a9);
void __golang fmt__ptr_pp_printValue(_QWORD *a1, abi_Type *data, _QWORD *a3, reflect_flag a4, __int64 a5, __int64 a6);
bool __golang type__eq_fmt_fmt(__int64 a1, __int64 a2);
void __fastcall main_main();
__int64 go_textfipsstart(); // weak
void go_textfipsend();
void __cdecl __noreturn _exit(int);
// int open(const char *, int, ...);
// ssize_t __cdecl write(int __fd, const void *__buf, size_t __nbyte);
// int *__error(void);
// int __cdecl madvise(void *, size_t, int);
// uint64_t mach_absolute_time(void);
// kern_return_t __cdecl mach_timebase_info(mach_timebase_info_t info);
// int __cdecl clock_gettime(clockid_t __clock_id, timespec *__tp);
// int __cdecl sigaction(int, const sigaction *, sigaction *);
// int __cdecl pthread_sigmask(int, const sigset_t *, sigset_t *);
// int __cdecl sigaltstack(const stack_t *, stack_t *);
// pid_t getpid(void);
// int __cdecl kill(pid_t, int);
// void *__cdecl mmap(void *, size_t, int, int, int, off_t);
// int __cdecl munmap(void *, size_t);
// int __cdecl usleep(useconds_t);
// int __cdecl sysctl(int *, u_int, void *, size_t *, void *, size_t);
// int kqueue(void);
// int __cdecl kevent(int kq, const kevent *changelist, int nchanges, kevent *eventlist, int nevents, const timespec *timeout);
// int fcntl(int, int, ...);
// int __cdecl pthread_attr_init(pthread_attr_t *);
// int __cdecl pthread_attr_getstacksize(const pthread_attr_t *, size_t *);
// int __cdecl pthread_attr_setdetachstate(pthread_attr_t *, int);
// int __cdecl pthread_create(pthread_t *, const pthread_attr_t *, void *(__cdecl *)(void *), void *);
// int __cdecl raise(int);
// int __cdecl pthread_mutex_init(pthread_mutex_t *, const pthread_mutexattr_t *);
// int __cdecl pthread_mutex_lock(pthread_mutex_t *);
// int __cdecl pthread_mutex_unlock(pthread_mutex_t *);
// int __cdecl pthread_cond_init(pthread_cond_t *, const pthread_condattr_t *);
// int __cdecl pthread_cond_wait(pthread_cond_t *, pthread_mutex_t *);
// int __cdecl pthread_cond_timedwait_relative_np(pthread_cond_t *, pthread_mutex_t *, const timespec *);
// int __cdecl pthread_cond_signal(pthread_cond_t *);
// pthread_t pthread_self(void);
// int __cdecl pthread_kill(pthread_t, int);
// bool __cdecl notify_is_valid_token(int val);
// xpc_object_t xpc_date_create_from_current(void);
// void __cdecl arc4random_buf(void *__buf, size_t __nbytes);
// int issetugid(void);

//-------------------------------------------------------------------------
// Data declarations

int dword_1000000 = -17958193; // weak
_UNKNOWN loc_106B506; // weak
_UNKNOWN loc_106D3C1; // weak
char a0123456789abcd[16] = "0123456789abcdef"; // weak
char a0123456789abcd_1[17] = "0123456789ABCDEFX"; // weak
char a0123456789abcd_3[36] = "0123456789abcdefghijklmnopqrstuvwxyz"; // weak
char a00010203040506[201] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899"; // weak
__int64 qword_10C5090 = 2LL; // weak
__int64 qword_10C5098 = 9LL; // weak
__int64 qword_10C50F0 = 4LL; // weak
__int64 qword_10C52A0[4] = { 58LL, 136LL, 341LL, 16LL }; // weak

==================================================

// function name: runtime_adjustSignalStack2

// 1053AA0: using guessed type __int64 __golang runtime_sigaltstack(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64);
// 11710E8: using guessed type __int64 (__golang **runtime_adjustSignalStack2Indirect[2])();

//----- (000000000104BB20) ----------------------------------------------------
// runtime.adjustSignalStack2
void __golang runtime_adjustSignalStack2(unsigned int a1, __int64 a2, __int64 a3, char a4)
{
  int v4; // ecx
  int v5; // ebx
  int v6; // edi
  int v7; // esi
  int v8; // r8d
  int v9; // r9d
  int v10; // r10d
  int v11; // r11d
  __int64 v12; // rax
  __int64 v13; // rcx
  __int64 v14; // rdi
  __int64 v15; // rsi
  __int64 v16; // r8
  __int64 v17; // r9
  __int64 v18; // r10
  __int64 v19; // r11

  runtime_setg(0);
  runtime_needm(1u, v5, v4, v6, v7, v8, v9, v10, v11);
  if ( !a4 )
    runtime_sigNotOnStack(a1, a2, a3);
  runtime_printlock(a1);
  runtime_printstring("signal ", 7);
  runtime_printuint(a1);
  v12 = runtime_printstring(" received on thread with no signal stack\n", 41);
  runtime_printunlock(v12);
  runtime_throw(
    (__int64 (*)(void))"non-Go code disabled sigaltstack",
    (__int64 (*)(void))0x20,
    v13,
    v14,
    v15,
    v16,
    v17,
    v18,
    v19);
  JUMPOUT(0x104BBDF);
}

==================================================

// function name: runtime_exitsyscallfast_reacquired_func1

// 104176D: variable 'v9' is possibly undefined

//----- (0000000001041800) ----------------------------------------------------
// runtime.exitsyscallfast_reacquired.func1
__int64 __golang runtime_exitsyscallfast_reacquired_func1(
        __int64 a1,
        __int64 a2,
        __int64 a3,
        __int64 a4,
        __int64 a5,
        __int64 a6,
        __int64 a7)
{
  _QWORD *v7; // rdx
  __int64 v8; // rcx
  __int64 v9; // rdi
  __int64 v10; // rsi
  __int64 v11; // r8
  __int64 v12; // r9
  __int64 v13; // r10
  __int64 v14; // r11
  unsigned __int64 v16; // [rsp+0h] [rbp-18h]
  __int64 v17; // [rsp+8h] [rbp-10h]

  v17 = v7[1];
  v16 = v7[2];
  runtime_traceLocker_ProcSteal(v17, v16, *(int **)(*(_QWORD *)(v7[3] + 48LL) + 208LL), 1, a5, a6, a7);
  return runtime_traceLocker_ProcStart(v17, v16, v8, v9, v10, v11, v12, v13, v14);
}

==================================================

// function name: runtime_goroutineheader

// 1059F77: conditional instruction was optimized away because rsi.8>=0

//----- (000000000105A060) ----------------------------------------------------
// runtime.goroutineheader
__int64 __golang runtime_goroutineheader(_QWORD *a1)
{
  __int64 v1; // r14
  __int64 v2; // rdx
  unsigned int v3; // ebx
  unsigned int v4; // ecx
  int v5; // edx
  unsigned int v6; // ecx
  __int64 v7; // rdx
  const char *v8; // r8
  __int64 v9; // rdx
  bool v10; // zf
  __int64 v11; // rdi
  __int64 v12; // rdi
  __int64 v13; // rcx
  __int64 v14; // rax
  __int64 v15; // rax
  __int64 v16; // rcx
  __int64 v17; // rax
  __int64 v18; // rcx
  __int64 v19; // rax
  __int64 v20; // rax
  __int64 v21; // rax
  __int64 v22; // rax
  _QWORD *v23; // rax
  __int64 v24; // rax
  __int64 v25; // rax
  __int64 v26; // rax
  __int64 v27; // rax
  retval_1053980 v29; // [rsp+0h] [rbp-50h]
  int v30; // [rsp+10h] [rbp-40h]
  unsigned int v31; // [rsp+14h] [rbp-3Ch]
  __int64 v32; // [rsp+18h] [rbp-38h]
  __int64 v33; // [rsp+20h] [rbp-30h]
  __int64 v34; // [rsp+28h] [rbp-28h]
  __int64 v35; // [rsp+30h] [rbp-20h]
  __int64 v36; // [rsp+30h] [rbp-20h]
  const char *v37; // [rsp+38h] [rbp-18h]
  __int64 v38; // [rsp+40h] [rbp-10h]
  _QWORD *v39; // [rsp+58h] [rbp+8h]

  v2 = *(_QWORD *)(v1 + 48);
  v3 = *(unsigned __int8 *)(v2 + 290);
  if ( !(_BYTE)v3 )
  {
    v4 = (unsigned int)runtime_traceback_cache >> 2;
    if ( *(_DWORD *)(v2 + 244) >= 2u )
      v4 = 2;
    v3 = v4;
  }
  v5 = *((_DWORD *)a1 + 38);
  v6 = v5 & 0xFFFFEFFF;
  if ( (v5 & 0xFFFFEFFF) >= 0xA )
  {
    v9 = 3;
    v8 = "???";
  }
  else
  {
    v7 = 2LL * (v5 & 0xFFFFEFFF);
    v8 = (&runtime_gStatusStrings)[v7];
    v9 = (__int64)(&runtime_gStatusStrings)[v7 + 1];
  }
  v10 = v6 == 4;
  if ( v6 == 4 )
  {
    v11 = *((unsigned __int8 *)a1 + 184);
    if ( (_BYTE)v11 )
    {
      if ( (unsigned __int8)v11 < 0x2Cu )
      {
        v12 = 2 * v11;
        v8 = (const char *)runtime_waitReasonStrings[v12];
        v9 = runtime_waitReasonStrings[v12 + 1];
        v10 = 1;
      }
      else
      {
        v10 = 1;
        v9 = 19;
        v8 = "unknown wait reason";
      }
    }
    else
    {
      v10 = 1;
    }
  }
  v39 = a1;
  v31 = *((_DWORD *)a1 + 38);
  v37 = v8;
  v33 = v9;
  v30 = v3;
  if ( v10 || v6 == 3 )
  {
    if ( a1[22] )
    {
      v29 = runtime_nanotime1(a1);
      a1 = v39;
      v13 = (*(_QWORD *)&v29 - v39[22]) / 60000000000LL;
    }
    else
    {
      v13 = 0;
    }
  }
  else
  {
    v13 = 0;
  }
  v32 = v13;
  v35 = a1[20];
  runtime_printlock(v35);
  runtime_printstring("goroutine ", 10);
  v14 = runtime_printuint(v35);
  runtime_printunlock(v14);
  v15 = (__int64)v39;
  v16 = v39[6];
  if ( v16 && *(_DWORD *)(v16 + 244) >= 2u && *(_QWORD **)(v16 + 192) == v39 || v30 >= 2 )
  {
    runtime_printlock(v39);
    runtime_printstring(" gp=", 4);
    v17 = runtime_printpointer((__int64)v39);
    runtime_printunlock(v17);
    v18 = v39[6];
    if ( v18 )
    {
      v38 = v39[6];
      v34 = *(_QWORD *)(v18 + 232);
      runtime_printlock(v34);
      runtime_printstring(" m=", 3);
      runtime_printint(v34);
      runtime_printstring(" mp=", 4);
      v19 = runtime_printpointer(v38);
    }
    else
    {
      runtime_printlock(v39);
      v19 = runtime_printstring(" m=nil", 6);
    }
    v15 = runtime_printunlock(v19);
  }
  runtime_printlock(v15);
  runtime_printstring(" [", 2);
  v20 = runtime_printstring(v37, v33);
  runtime_printunlock(v20);
  if ( (v31 & 0x1000) != 0 )
  {
    runtime_printlock(v31);
    v21 = runtime_printstring(" (scan)", 7);
    runtime_printunlock(v21);
  }
  if ( v32 > 0 )
  {
    runtime_printlock(v32);
    runtime_printstring(", ", 2);
    runtime_printint(v32);
    v22 = runtime_printstring(" minutes", 8);
    runtime_printunlock(v22);
  }
  v23 = v39;
  if ( v39[27] )
  {
    runtime_printlock(v39);
    v24 = runtime_printstring(", locked to thread", 18);
    runtime_printunlock(v24);
    v23 = v39;
  }
  v25 = v23[49];
  if ( v25 )
  {
    v36 = *(_QWORD *)(*(_QWORD *)(v25 + 88) + 160LL);
    runtime_printlock(v36);
    runtime_printstring(", synctest group ", 17);
    v26 = runtime_printuint(v36);
    v25 = runtime_printunlock(v26);
  }
  runtime_printlock(v25);
  v27 = runtime_printstring("]:\n", 3);
  return runtime_printunlock(v27);
}

==================================================

// function name: runtime_traceWriter_flush_func1

//----- (000000000105B060) ----------------------------------------------------
// runtime.traceWriter.flush.func1
void __golang runtime_traceWriter_flush_func1(
        __int64 a1,
        int a2,
        __int64 a3,
        __int64 a4,
        __int64 a5,
        __int64 a6,
        __int64 a7,
        __int64 a8,
        __int64 a9)
{
  __int64 v9; // rdx
  __int64 v10; // rbx
  __int64 v11; // rdi
  __int64 v12; // rsi
  __int64 v13; // r8
  __int64 v14; // r9
  __int64 v15; // r10
  __int64 v16; // r11
  __int64 v17; // rcx
  _QWORD *v18; // rax
  __int64 v19; // [rsp+0h] [rbp-10h]

  v19 = *(_QWORD *)(v9 + 8);
  runtime_lock2((volatile signed __int8 *)&runtime_trace, a2, v19, a4, a5, a6, a7, a8, a9);
  v17 = v19;
  v18 = *(_QWORD **)(v19 + 24);
  if ( v18 )
    runtime_traceBufFlush(v18, *(_QWORD *)(v19 + 8), v19, v11, v12, v13, v14, v15, v16);
  runtime_unlock2(&runtime_trace, v10, v17, v11, v12, v13, v14, v15, v16);
}

==================================================

// function name: runtime_traceLocker_startPC

// 105C506: variable 'v9' is possibly undefined

//----- (000000000105C580) ----------------------------------------------------
// runtime.traceLocker.startPC
__int64 __golang runtime_traceLocker_startPC(
        __int64 a1,
        __int64 a2,
        void *a3,
        __int64 a4,
        __int64 a5,
        unsigned int *a6,
        unsigned int *a7,
        unsigned __int64 a8,
        __int64 a9)
{
  char v10; // [rsp+0h] [rbp-20h]
  _QWORD v11[3]; // [rsp+8h] [rbp-18h] BYREF

  v10 = a2;
  v11[0] = -1;
  v11[1] = runtime_startPCForTrace(a3, a2, (__int64)a3, a4, a5, a6, a7, a8, a9) + 1;
  return runtime__ptr_traceStackTable_put(&qword_1176CC0[22 * (v10 & 1)], v11, 2, 2);
}

==================================================

// function name: runtime_shrinkstack

// 104F6C0: using guessed type __int64 runtime_nilfunc();

//----- (000000000104F760) ----------------------------------------------------
// runtime.shrinkstack
__int64 __golang runtime_shrinkstack(
        __int64 result,
        __int64 a2,
        __int64 a3,
        __int64 a4,
        __int64 a5,
        unsigned int *a6,
        unsigned int *a7,
        unsigned __int64 a8,
        __int64 a9)
{
  __int64 v9; // r14
  int v10; // edx
  __int64 v11; // rcx
  bool v12; // dl
  unsigned __int64 v13; // rdx
  __int64 v14; // rcx
  unsigned __int64 v15; // rcx
  _QWORD *v16; // [rsp+18h] [rbp+8h]

  if ( !*(_QWORD *)result )
LABEL_35:
    runtime_throw(
      (__int64 (*)(void))"missing stack in shrinkstack",
      (__int64 (*)(void))0x1C,
      a3,
      a4,
      a5,
      (__int64)a6,
      (__int64)a7,
      a8,
      a9);
  v10 = *(_DWORD *)(result + 152);
  if ( (v10 & 0x1000) == 0 )
  {
    a5 = *(_QWORD *)(*(_QWORD *)(v9 + 48) + 192LL);
    if ( result != a5 || (a4 = v9, v9 == a5) || v10 != 2 )
    {
      runtime_throw(
        (__int64 (*)(void))"bad status in shrinkstack",
        (__int64 (*)(void))0x19,
        a3,
        a4,
        a5,
        (__int64)a6,
        (__int64)a7,
        a8,
        a9);
      goto LABEL_35;
    }
  }
  if ( *(_QWORD *)(result + 112) )
  {
    v11 = 0;
  }
  else if ( *(_BYTE *)(result + 188) )
  {
    v11 = 0;
  }
  else if ( *(_BYTE *)(result + 193) )
  {
    v11 = 0;
  }
  else
  {
    if ( byte_11772D0 )
      v12 = (*(_DWORD *)(result + 152) & 0xFFFFEFFF) == 4;
    else
      v12 = 0;
    if ( !v12 )
      goto LABEL_19;
    v13 = *(unsigned __int8 *)(result + 184);
    if ( v13 >= 0x2C )
      goto LABEL_33;
    if ( *((_BYTE *)runtime_isWaitingForSuspendG + v13) )
      v11 = 0;
    else
LABEL_19:
      v11 = 1;
  }
  if ( !(_BYTE)v11 )
  {
LABEL_32:
    runtime_throw(
      (__int64 (*)(void))"shrinkstack at bad time",
      (__int64 (*)(void))0x17,
      v11,
      a4,
      a5,
      (__int64)a6,
      (__int64)a7,
      a8,
      a9);
LABEL_33:
    runtime_panicIndex(v13, a2);
  }
  v14 = *(_QWORD *)(v9 + 48);
  if ( *(_QWORD *)(v14 + 192) == result )
  {
    v14 = *(_QWORD *)(result + 48);
    if ( *(_QWORD *)(v14 + 864) )
    {
      runtime_throw(
        (__int64 (*)(void))"shrinking stack in libcall",
        (__int64 (*)(void))0x1A,
        v14,
        a4,
        a5,
        (__int64)a6,
        (__int64)a7,
        a8,
        a9);
      goto LABEL_32;
    }
  }
  if ( dword_11964FC <= 0 )
  {
    v16 = (_QWORD *)result;
    result = runtime_findfunc((void *)*(_QWORD *)(result + 304), a2, v14, a4, a5, a6, a7, a8, a9)._r0;
    if ( !result || *(_BYTE *)(result + 40) != 7 )
    {
      result = (__int64)v16;
      v15 = v16[1] - *v16;
      if ( v15 >> 1 >= 0x800 && v15 >> 2 > v16[1] - v16[7] + 800LL )
        return runtime_copystack(v16, v15 >> 1);
    }
  }
  return result;
}

==================================================

// function name: runtime_runqgrab

//----- (00000000010465A0) ----------------------------------------------------
// runtime.runqgrab
__int64 __golang runtime_runqgrab(
        __int64 a1,
        __int64 a2,
        int a3,
        char a4,
        __int64 a5,
        __int64 a6,
        int a7,
        __int64 a8,
        int a9)
{
  signed __int32 v9; // edx
  unsigned __int32 v10; // r8d
  unsigned __int32 v11; // esi
  unsigned int v12; // r8d
  signed __int64 v13; // rdx
  __int64 v14; // rsi
  signed __int64 v15; // rax
  unsigned int i; // esi
  signed __int64 v18; // [rsp+8h] [rbp-10h]
  __int64 v19; // [rsp+20h] [rbp+8h]
  __int64 v20; // [rsp+28h] [rbp+10h]
  int v21; // [rsp+30h] [rbp+18h]
  char v22; // [rsp+34h] [rbp+1Ch]

  v19 = a1;
  v20 = a2;
  v21 = a3;
  v22 = a4;
  while ( 1 )
  {
    v9 = *(_DWORD *)(a1 + 392);
    v10 = *(_DWORD *)(a1 + 396) - v9;
    v11 = v10 >> 1;
    v12 = v10 - (v10 >> 1);
    if ( v12 )
      break;
    if ( !a4 )
      return 0;
    v13 = *(_QWORD *)(a1 + 2448);
    if ( !v13 )
      return 0;
    if ( *(_DWORD *)(a1 + 4) == 1 )
    {
      v18 = *(_QWORD *)(a1 + 2448);
      runtime_usleep(a1, a2, a3, a4, v11, 0, a7, a8, a9, 3);
      a1 = v19;
      a3 = v21;
      v13 = v18;
      a2 = v20;
      a4 = v22;
    }
    v14 = a1;
    v15 = _InterlockedCompareExchange64((volatile signed __int64 *)(a1 + 2448), 0, v13);
    LOBYTE(a7) = v13 == v15;
    if ( v13 == v15 )
    {
      *(_QWORD *)(a2 + 8LL * (unsigned __int8)a3) = v13;
      return 1;
    }
LABEL_2:
    a1 = v14;
  }
  if ( v12 > 0x80 )
  {
    v14 = a1;
    goto LABEL_2;
  }
  for ( i = 0; i < v12; ++i )
  {
    a8 = (unsigned __int8)(i + a3);
    *(_QWORD *)(a2 + 8 * a8) = *(_QWORD *)(a1 + 8LL * (unsigned __int8)(i + v9) + 400);
  }
  a7 = a1;
  if ( v9 != _InterlockedCompareExchange((volatile signed __int32 *)(a1 + 392), v12 + v9, v9) )
  {
    v14 = a1;
    goto LABEL_2;
  }
  return v12;
}

==================================================

// function name: runtime_switchToCrashStack

// 1038C80: using guessed type __int64 runtime_badmorestackgsignal();

//----- (0000000001038CC0) ----------------------------------------------------
// runtime.switchToCrashStack
void __golang __noreturn runtime_switchToCrashStack(
        __int64 (__fastcall **a1)(__int64, __int64, _QWORD),
        __int64 a2,
        __int64 a3,
        __int64 a4,
        __int64 a5,
        int a6,
        int a7,
        int a8,
        int a9)
{
  signed __int64 v9; // r14
  signed __int64 v11; // rax
  __int64 v12; // rax
  __int64 v13; // rax

  v11 = _InterlockedCompareExchange64(&runtime_crashingG, v9, 0);
  if ( !v11 )
    runtime_switchToCrashStack0(a1, a2, (__int64)a1, a4, v9);
  if ( runtime_crashingG == v9 )
  {
    v12 = runtime_writeErrData((__int64)"fatal: recursive switchToCrashStack\n", 0x24u);
    runtime_abort(v12);
  }
  runtime_usleep_no_g(v11, a2, runtime_crashingG, a4, v9, a6, a7, a8, a9, 100);
  v13 = runtime_writeErrData((__int64)"fatal: concurrent switchToCrashStack\n", 0x25u);
  runtime_abort(v13);
}

==================================================

// function name: runtime_mrandinit

// 1053980: using guessed type retval_1053980 __golang runtime_nanotime1(_QWORD);

//----- (0000000001048040) ----------------------------------------------------
// runtime.mrandinit
__int64 __golang runtime_mrandinit(__int64 a1)
{
  __int64 i; // rcx
  __int64 v2; // rax
  __int64 v3; // rcx
  __int64 result; // rax
  __int128 v5; // [rsp+0h] [rbp-30h]
  __int128 v6; // [rsp+10h] [rbp-20h]
  __int64 v7; // [rsp+20h] [rbp-10h]

  v5 = 0;
  v6 = 0;
  for ( i = 0; i < 4; i = v3 + 1 )
  {
    v7 = i;
    v2 = runtime_bootstrapRand();
    v3 = v7;
    *((_QWORD *)&v5 + v7) = v2;
  }
  runtime_bootstrapRandReseed();
  *(_OWORD *)(a1 + 1680) = v5;
  *(_OWORD *)(a1 + 1696) = v6;
  internal_chacha8rand_block((unsigned int *)(a1 + 1680), (__m128i *)(a1 + 1424), 0);
  *(_DWORD *)(a1 + 1720) = 0;
  *(_QWORD *)(a1 + 1712) = 0x2000000000LL;
  result = runtime_rand();
  *(_QWORD *)(a1 + 1728) = result;
  return result;
}

==================================================

// function name: runtime_casGFromPreempted

// 103A6DB: variable 'v9' is possibly undefined

//----- (000000000103A760) ----------------------------------------------------
// runtime.casGFromPreempted
__int64 __golang runtime_casGFromPreempted(
        __int64 a1,
        int a2,
        __int64 a3,
        __int64 a4,
        __int64 a5,
        __int64 a6,
        __int64 a7,
        __int64 a8,
        __int64 a9)
{
  __int64 v10; // rax

  if ( a2 != 9 || (_DWORD)a3 != 4 )
    runtime_throw((__int64 (*)(void))"bad g transition", (__int64 (*)(void))0x10, a3, a4, a5, a6, a7, a8, a9);
  *(_BYTE *)(a1 + 184) = 29;
  if ( _InterlockedCompareExchange((volatile signed __int32 *)(a1 + 152), 4, 9) != 9 )
    return 0;
  v10 = *(_QWORD *)(a1 + 392);
  if ( v10 )
    runtime__ptr_synctestGroup_changegstatus(v10, a1, 9, 4, a5, a6, a7, a8, a9);
  return 1;
}

==================================================

// function name: runtime_newproc_func1

// 1041CA2: variable 'v9' is possibly undefined

//----- (0000000001041D00) ----------------------------------------------------
// runtime.newproc.func1
signed __int64 __golang runtime_newproc_func1(
        __int64 a1,
        __int64 a2,
        __int64 a3,
        __int64 a4,
        __int64 a5,
        __int64 a6,
        __int64 a7,
        __int64 a8,
        __int64 a9)
{
  __int64 v9; // rdx
  __int64 v10; // r14
  signed __int64 v11; // rax
  __int64 v12; // rdi
  __int64 v13; // rsi
  __int64 v14; // r8
  __int64 v15; // r9
  __int64 v16; // r10
  __int64 v17; // r11
  signed __int64 result; // rax

  v11 = runtime_newproc1(*(_QWORD **)(v9 + 8), *(_QWORD *)(v9 + 16), *(_QWORD *)(v9 + 24), 0, 0, a6, a7, a8, a9);
  result = runtime_runqput(*(_QWORD *)(*(_QWORD *)(v10 + 48) + 208LL), v11, 1, v12, v13, v14, v15, v16, v17);
  if ( runtime_mainStarted )
    return runtime_wakep(result);
  return result;
}

==================================================

// function name: runtime_minitSignalStack

// 1053A60: using guessed type __int64 __golang runtime_sigprocmask(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, char);

//----- (000000000104CC80) ----------------------------------------------------
// runtime.minitSignalStack
__int64 __golang runtime_minitSignalStack(__int64 a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9)
{
  __int64 v9; // r14
  unsigned __int64 v10; // r14
  __int64 *v11; // rax
  __int64 v12; // rcx
  __int64 v13; // rax
  __int64 v14; // rdx
  __int64 v15; // rax
  __int64 result; // rax
  __int64 v17; // [rsp+10h] [rbp-28h] BYREF
  __int128 v18; // [rsp+18h] [rbp-20h]
  __int64 v19; // [rsp+28h] [rbp-10h]

  v19 = *(_QWORD *)(v9 + 48);
  v17 = 0;
  v18 = 0;
  runtime_sigaltstack((unsigned int)&v17, a2, a3, a4, a5, a6, a7, a8, a9, 0);
  v10 = __readgsqword(0x30u);
  if ( (BYTE8(v18) & 4) != 0 || !runtime_iscgo )
  {
    result = runtime_signalstack();
    *(_BYTE *)(v19 + 278) = 1;
  }
  else
  {
    v11 = *(__int64 **)(*(_QWORD *)(v10 + 48) + 80LL);
    v12 = *v11;
    v13 = v11[1];
    v14 = v19;
    *(_QWORD *)(v19 + 88) = v12;
    *(_QWORD *)(v14 + 96) = v13;
    *(_QWORD *)(v14 + 104) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 48) + 80LL) + 16LL);
    *(_QWORD *)(v14 + 112) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 48) + 80LL) + 24LL);
    *(_QWORD *)(v14 + 120) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 48) + 80LL) + 136LL);
    v15 = v17;
    **(_QWORD **)(*(_QWORD *)(v10 + 48) + 80LL) = v17;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 48) + 80LL) + 8LL) = v15 + v18;
    result = v15 + 928;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 48) + 80LL) + 16LL) = result;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 48) + 80LL) + 24LL) = result;
    *(_BYTE *)(v14 + 278) = 0;
  }
  return result;
}

==================================================

// function name: runtime_preemptM

// 1195F5C: using guessed type int runtime_pendingPreemptSignals;

//----- (000000000104B460) ----------------------------------------------------
// runtime.preemptM
__int64 __golang runtime_preemptM(
        __int64 a1,
        __int64 a2,
        __int64 a3,
        __int64 a4,
        __int64 a5,
        __int64 a6,
        __int64 a7,
        __int64 a8,
        __int64 a9)
{
  int v9; // ebx
  __int64 v10; // rdi
  __int64 v11; // rsi
  __int64 v12; // r8
  __int64 v13; // r9
  __int64 v14; // r10
  __int64 v15; // r11
  __int64 v16; // rcx

  runtime__ptr_rwmutex_rlock((unsigned __int64)runtime_execLock, a2, a3, a4, a5, a6, a7, a8, a9);
  v16 = a1;
  if ( !_InterlockedCompareExchange((volatile signed __int32 *)(a1 + 900), 1, 0) )
  {
    _InterlockedExchangeAdd(&runtime_pendingPreemptSignals, 1u);
    runtime_pthread_kill(*(_QWORD *)(a1 + 72), v9, a1, v10, v11, v12, v13, v14, v15, *(_QWORD *)(a1 + 72));
  }
  return runtime__ptr_rwmutex_runlock((__int64)runtime_execLock, v9, v16, v10, v11, v12, v13, v14, v15);
}

==================================================

// function name: runtime_wakeNetPoller

//----- (000000000103F380) ----------------------------------------------------
// runtime.wakeNetPoller
__int64 __golang runtime_wakeNetPoller(
        __int64 result,
        int a2,
        __int64 a3,
        int a4,
        int a5,
        int a6,
        int a7,
        int a8,
        int a9)
{
  char *v9; // rcx

  if ( qword_1177AA8 )
    return runtime_wakep();
  if ( !qword_1177AB0 || qword_1177AB0 > result )
  {
    v9 = runtime_netpollWakeSig;
    result = (unsigned int)_InterlockedCompareExchange((volatile signed __int32 *)runtime_netpollWakeSig, 1, 0);
    if ( !(_DWORD)result )
    {
      LOBYTE(v9) = 1;
      return runtime_wakeNetpoll(runtime_kq, a2, (__int64)v9, a4, a5, a6, a7, a8, a9);
    }
  }
  return result;
}

==================================================

// function name: runtime_memequal_varlen

return a1 == a2 || memeqbody((__int64)a1, a3, a3, a2, a1);

//----- (0000000001003160) ----------------------------------------------------
// runtime.memequal_varlen
bool __golang runtime_memequal_varlen(const __m128i *a1, const __m128i *a2, __int64 a3)
{
  __int64 v3; // rdx

  return a1 == a2 || memeqbody((__int64)a1, *(_QWORD *)(v3 + 8), a3, a2, a1);
}

==================================================

// function name: runtime_convTnoptr

// 1065940: using guessed type __int64 __golang runtime_typedmemmove(_QWORD, _QWORD, _QWORD);

//----- (000000000100F200) ----------------------------------------------------
// runtime.convTnoptr
__m128i *__golang runtime_convTnoptr(
        __int64 (**a1)(void),
        const __m128i *a2,
        double a3,
        __int64 a4,
        void (__golang *a5)(),
        __int64 a6,
        __int64 a7,
        __int64 a8,
        __int64 a9,
        __int64 *a10)
{
  __m128i *v11; // [rsp+0h] [rbp-10h]

  v11 = (__m128i *)runtime_mallocgc(*a1, (unsigned __int64)a1, 0, a5, a6, a7, a8, a9, a10, a3);
  runtime_memmove(v11, a2, (unsigned __int64)*a1);
  return v11;
}

==================================================

// function name: runtime_typeBitsBulkBarrier

// 1014665: variable 'v9' is possibly undefined

//----- (00000000010147E0) ----------------------------------------------------
// runtime.typeBitsBulkBarrier
void __golang runtime_typeBitsBulkBarrier(
        __int64 a1,
        __int64 a2,
        __int64 (*a3)(void),
        __int64 a4,
        __int64 a5,
        __int64 a6,
        __int64 a7,
        __int64 a8,
        __int64 a9)
{
  __int64 v9; // r14
  __int64 (*v10)(void); // rdx
  __int64 (*GCMaskOnDemand)(void); // rax
  __int64 v12; // rsi
  unsigned __int64 v13; // rdi
  __int64 v14; // r8
  _QWORD *v15; // r9
  _QWORD *v16; // r10
  unsigned __int64 v17; // r11
  _QWORD *v18; // r11
  retval_1060920 v19; // kr00_16
  __int64 v20; // rax
  __int64 v21; // rax
  __int64 v22; // rcx
  __int64 v23; // rdi
  __int64 v24; // rsi
  __int64 v25; // r8
  __int64 v26; // r9
  __int64 v27; // r10
  __int64 v28; // r11
  int v29; // [rsp+14h] [rbp-44h]
  unsigned __int64 v30; // [rsp+18h] [rbp-40h]
  __int64 v31; // [rsp+20h] [rbp-38h]
  __int64 (*v32)(void); // [rsp+30h] [rbp-28h]
  _QWORD *v33; // [rsp+40h] [rbp-18h]
  _QWORD *v34; // [rsp+48h] [rbp-10h]
  __int64 v35; // [rsp+50h] [rbp-8h]
  __int64 *v36; // [rsp+68h] [rbp+10h]
  __int64 v37; // [rsp+70h] [rbp+18h]
  __int64 (*v38)(void); // [rsp+78h] [rbp+20h]

  if ( !a1 )
  {
LABEL_20:
    runtime_throw(
      (__int64 (*)(void))"runtime: typeBitsBulkBarrier without type",
      (__int64 (*)(void))0x29,
      (__int64)a3,
      a4,
      a5,
      a6,
      a7,
      a8,
      a9);
    JUMPOUT(0x10149D7);
  }
  v36 = (__int64 *)a1;
  if ( *(_QWORD *)a1 != a4 )
  {
    v19 = runtime_rtype_string();
    v31 = *v36;
    runtime_printlock(v19._r0);
    runtime_printstring("runtime: typeBitsBulkBarrier with type  ", 40);
    runtime_printstring(v19._r0, v19._r1);
    runtime_printstring("  of size  ", 11);
    runtime_printuint(v31);
    runtime_printstring("  but memory size ", 18);
    v20 = runtime_printuint(a4);
    v21 = runtime_printnl(v20);
    runtime_printunlock(v21);
    runtime_throw(
      (__int64 (*)(void))"runtime: invalid typeBitsBulkBarrier",
      (__int64 (*)(void))0x24,
      v22,
      v23,
      v24,
      v25,
      v26,
      v27,
      v28);
    goto LABEL_20;
  }
  if ( (_BYTE)runtime_writeBarrier )
  {
    v37 = a2;
    v38 = a3;
    if ( (*(_BYTE *)(a1 + 20) & 0x10) != 0 )
    {
      GCMaskOnDemand = runtime_getGCMaskOnDemand((__int64 (*)(void))a1, a2, a3, a4, a5, a6, a7, a8, a9);
      a3 = v38;
      a2 = v37;
      v10 = GCMaskOnDemand;
      a1 = (__int64)v36;
    }
    else
    {
      v10 = *(__int64 (**)(void))(a1 + 32);
    }
    v12 = *(_QWORD *)(*(_QWORD *)(v9 + 48) + 208LL);
    v35 = v12;
    v13 = 0;
    LODWORD(v14) = 0;
    while ( *(_QWORD *)(a1 + 8) > v13 )
    {
      if ( (v13 & 0x3F) != 0 )
      {
        v14 = (unsigned int)v14 >> 1;
      }
      else
      {
        v14 = *(unsigned __int8 *)v10;
        v10 = (__int64 (*)(void))((char *)v10 + 1);
      }
      if ( (v14 & 1) != 0 )
      {
        v15 = (_QWORD *)(v13 + a2);
        v16 = (_QWORD *)((char *)a3 + v13);
        v17 = *(_QWORD *)(v12 + 4720) + 16LL;
        if ( *(_QWORD *)(v12 + 4728) < v17 )
        {
          v30 = v13;
          v29 = v14;
          v34 = (_QWORD *)(v13 + a2);
          v33 = (_QWORD *)((char *)a3 + v13);
          v32 = v10;
          runtime_wbBufFlush(a1, a2, (__int64)a3, v13, v12, v14, (__int64)v15, (__int64)v16, v17);
          a1 = (__int64)v36;
          a3 = v38;
          v10 = v32;
          a2 = v37;
          v12 = v35;
          v13 = v30;
          LODWORD(v14) = v29;
          v15 = v34;
          v16 = v33;
        }
        v18 = *(_QWORD **)(v12 + 4720);
        *(_QWORD *)(v12 + 4720) = v18 + 2;
        *v18 = *v15;
        v18[1] = *v16;
      }
      v13 += 8LL;
    }
  }
}

==================================================

// function name: runtime_netpollblockcommit

//----- (0000000001031DC0) ----------------------------------------------------
// runtime.netpollblockcommit
bool __golang runtime_netpollblockcommit(signed __int64 a1, volatile signed __int64 *a2)
{
  bool result; // al

  result = _InterlockedCompareExchange64(a2, a1, 2) == 2;
  if ( result )
    _InterlockedExchangeAdd(&runtime_netpollWaiters, 1u);
  return result;
}

==================================================

// function name: internal_abi_Name_IsBlank

return internal_abi__ptr_Type_ExportedMethods((__int64)a1)._r1;

//----- (0000000001001220) ----------------------------------------------------
// internal/abi.Name.IsBlank
bool __golang internal_abi_Name_IsBlank(abi_Name a1)
{
  __int64 v1; // rdi
  __int64 v2; // rcx
  __int64 v3; // rdx
  unsigned __int64 v5; // rbx
  __int64 v6; // rsi

  if ( a1.Bytes )
  {
    v2 = 0;
    v3 = 0;
    while ( 1 )
    {
      v5 = 7 * v2;
      v6 = a1.Bytes[v2 + 1];
      if ( 7 * v2 < 0 )
        runtime_panicshift(a1.Bytes, v5, v2, v1, v6);
      v1 = a1.Bytes[v2 + 1];
      v3 += -(__int64)(v5 < 0x40) & ((v6 & 0x7F) << v5);
      if ( (v6 & 0x80u) == 0LL )
        break;
      ++v2;
    }
    return v3 == 1 && a1.Bytes[2] == 95;
  }
  else
  {
    return 0;
  }
}

==================================================

// function name: runtime_mProf_Flush

//----- (000000000102EC00) ----------------------------------------------------
// runtime.mProf_Flush
void __golang runtime_mProf_Flush(
        __int64 a1,
        int a2,
        __int64 a3,
        __int64 a4,
        __int64 a5,
        __int64 a6,
        __int64 a7,
        __int64 a8,
        __int64 a9)
{
  int v9; // ett
  __int64 v10; // rbx
  __int64 v11; // rdi
  __int64 v12; // rsi
  __int64 v13; // r8
  __int64 v14; // r9
  __int64 v15; // r10
  __int64 v16; // r11
  __int64 v17; // rcx
  __int64 v18; // rbx
  __int64 v19; // rdi
  __int64 v20; // rsi
  __int64 v21; // r8
  __int64 v22; // r9
  __int64 v23; // r10
  __int64 v24; // r11
  unsigned int v25; // [rsp+0h] [rbp-18h]
  unsigned int v26; // [rsp+4h] [rbp-14h]
  volatile signed __int8 *v27; // [rsp+8h] [rbp-10h]
  retval_102ECE0 v28; // 0:kr40_72.72

  do
  {
    v25 = runtime_mProfCycle;
    v9 = runtime_mProfCycle;
  }
  while ( v9 != _InterlockedCompareExchange(&runtime_mProfCycle, runtime_mProfCycle | 1, runtime_mProfCycle) );
  if ( (v25 & 1) == 0 )
  {
    v26 = (v25 >> 1) % 3;
    runtime_lock2((volatile signed __int8 *)&runtime_profMemActiveLock, a2, v26, a4, a5, a6, a7, a8, a9);
    if ( v26 >= 3uLL )
      runtime_panicIndex(v26, v10);
    v27 = (volatile signed __int8 *)&runtime_profMemFutureLock[v26];
    runtime_lock2(v27, v10, (__int64)runtime_profMemFutureLock, v11, v12, v13, v14, v15, v16);
    v28 = runtime_mProf_FlushLocked(v26);
    runtime_unlock2(
      (volatile signed __int64 *)v27,
      v28._r1,
      v28._r2,
      v28._r3,
      v28._r4,
      v28._r5,
      v28._r6,
      v28._r7,
      v28._r8);
    runtime_unlock2(&runtime_profMemActiveLock, v18, v17, v19, v20, v21, v22, v23, v24);
  }
}

==================================================

// function name: internal_abi__ptr_Type_NumMethod

//----- (00000000010011C0) ----------------------------------------------------
// internal/abi.(*Type).NumMethod
signed __int64 __golang internal_abi__ptr_Type_NumMethod(_ptr_abi_Type a1)
{
  if ( (a1->Kind_ & 0x1F) == 0x14 )
    return *(_QWORD *)&a1[1].Hash;
  else
    return internal_abi__ptr_Type_ExportedMethods((__int64)a1)._r1;
}

==================================================

// function name: internal_runtime_maps__ptr_Map_putSlotSmallFastPtr

return (__int64)v15 + v13 + 8;

//----- (0000000001004200) ----------------------------------------------------
// internal/runtime/maps.(*Map).putSlotSmallFastPtr
__int64 __golang internal_runtime_maps__ptr_Map_putSlotSmallFastPtr(_QWORD *a1, __int64 a2, char a3, __int64 a4)
{
  unsigned __int64 *v4; // rdx
  unsigned int v5; // ecx
  __m128i v6; // xmm1
  unsigned __int64 i; // rsi
  unsigned __int64 v8; // r9
  unsigned __int64 v9; // r8
  unsigned __int64 v11; // rdx
  _QWORD *v13; // rsi
  _QWORD *v14; // r11
  unsigned __int64 v15; // rsi
  char v16; // [rsp+2h] [rbp-18h]
  unsigned __int64 *v17; // [rsp+Ah] [rbp-10h]
  _QWORD *v18; // [rsp+22h] [rbp+8h]
  __int64 v19; // [rsp+2Ah] [rbp+10h]
  __int64 v20; // [rsp+3Ah] [rbp+20h]

  v4 = (unsigned __int64 *)a1[2];
  v17 = v4;
  v5 = a3 & 0x7F;
  v6 = (__m128i)*v4;
  for ( i = (unsigned __int8)_mm_movemask_epi8(_mm_cmpeq_epi8(_mm_shufflelo_epi16(_mm_unpacklo_epi8((__m128i)v5, (__m128i)v5), 0), v6));
        i;
        i &= i - 1 )
  {
    _BitScanForward64(&v8, i);
    v9 = v8 * *(_QWORD *)(a2 + 88);
    if ( *(unsigned __int64 *)((char *)v4 + v9 + 8) == a4 )
      return (__int64)v4 + v9 + *(_QWORD *)(a2 + 96) + 8;
  }
  v11 = (unsigned int)_mm_movemask_epi8(v6);
  if ( !(_DWORD)v11 )
  {
    v18 = a1;
    v19 = a2;
    v20 = a4;
    v16 = v5;
    internal_runtime_maps_fatal(
      (__int64 (*)(void))"small map with no empty slot (concurrent map writes?)",
      (__int64 (*)(void))0x35);
    a1 = v18;
    LOBYTE(v5) = v16;
    v11 = 0;
    a2 = v19;
    a4 = v20;
  }
  if ( !_BitScanForward64(&v11, v11) )
    v11 = 64;
  v13 = (unsigned __int64 *)((char *)v17 + v11 * *(_QWORD *)(a2 + 88) + 8);
  if ( runtime_writeBarrier )
  {
    runtime_gcWriteBarrier2();
    *v14 = a4;
    v14[1] = *v13;
  }
  *v13 = a4;
  v15 = *(_QWORD *)(a2 + 96) + v11 * *(_QWORD *)(a2 + 88);
  *((_BYTE *)v17 + v11) = v5;
  ++*a1;
  return (__int64)v17 + v15 + 8;
}

==================================================

// function name: runtime_memequal32

//----- (0000000001009500) ----------------------------------------------------
// runtime.memequal32
bool __golang runtime_memequal32(_DWORD *a1, _DWORD *a2)
{
  return *a2 == *a1;
}

==================================================

// function name: runtime_allocmcache

// 1033B40: using guessed type void __golang __noreturn runtime_panicdivide(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

//----- (0000000001014EC0) ----------------------------------------------------
// runtime.allocmcache
__int64 *__golang runtime_allocmcache(
        __int64 a1,
        __int64 a2,
        __int64 a3,
        __int64 a4,
        __int64 a5,
        __int64 a6,
        __int64 a7,
        __int64 a8,
        __int64 a9)
{
  __int64 i; // rax
  __int64 v10; // rcx
  __int64 *v12; // [rsp+8h] [rbp-20h] BYREF
  __int64 (*v13[3])(void); // [rsp+10h] [rbp-18h] BYREF

  v12 = 0;
  v13[0] = (__int64 (*)(void))runtime_allocmcache_func1;
  v13[1] = (__int64 (*)(void))&v12;
  runtime_systemstack((__int64)v13, a2, a3, a4, a5, a6, a7, a8, a9, v13);
  for ( i = 0; i < 136; ++i )
    v12[i + 6] = (__int64)runtime_emptymspan;
  if ( runtime_MemProfileRate )
  {
    if ( runtime_MemProfileRate == 1 )
      v10 = 0;
    else
      v10 = (int)runtime_fastexprand(runtime_MemProfileRate);
  }
  else
  {
    v10 = 0x7FFFFFFFFFFFFFFFLL;
  }
  *v12 = v10;
  return v12;
}

==================================================

// function name: runtime_debugCallCheck_func1

// 100BD8D: variable 'v9' is possibly undefined

//----- (000000000100BE40) ----------------------------------------------------
// runtime.debugCallCheck.func1
void __golang runtime_debugCallCheck_func1(
        __int64 a1,
        __int64 a2,
        __int64 a3,
        __int64 a4,
        __int64 a5,
        unsigned int *a6,
        unsigned int *a7,
        unsigned __int64 a8,
        __int64 a9)
{
  __int64 v9; // rdx
  retval_1069200 v10; // kr00_16
  _QWORD *v11; // rax
  __int64 v12; // rcx
  _QWORD *v13; // r11
  retval_1052260 v14; // kr10_16
  bool v15; // zf
  bool v16; // zf
  bool v17; // zf
  bool v18; // zf
  __int64 v19; // rcx
  bool v20; // zf
  bool v21; // zf
  _QWORD *v22; // rax
  __int64 v23; // rcx
  _QWORD *v24; // r11
  __int64 v25; // rsi
  __int64 v26; // r8
  __int64 v27; // r9
  __int64 v28; // r10
  __int64 v29; // r11
  _QWORD *v30; // rax
  __int64 v31; // rcx
  _QWORD *v32; // r11
  __int64 v33; // [rsp+10h] [rbp-18h]
  unsigned __int64 *v34; // [rsp+18h] [rbp-10h]

  v34 = *(unsigned __int64 **)(v9 + 8);
  v33 = *(_QWORD *)(v9 + 16);
  v10 = runtime_findfunc((void *)*v34, a2, v33, a4, a5, a6, a7, a8, a9);
  if ( !v10._r0 )
  {
    v11 = (_QWORD *)v33;
    *(_QWORD *)(v33 + 8) = 26;
    if ( runtime_writeBarrier )
    {
      runtime_gcWriteBarrier1();
      *v13 = v12;
    }
    *v11 = "call from unknown function";
    return;
  }
  v14 = runtime__ptr_moduledata_funcName(v10._r1, *(unsigned int *)(v10._r0 + 4LL));
  if ( (__int64)v14._r1 > 12 )
  {
    if ( v14._r1 == 13 )
    {
      if ( *(char *)(v14._r0 + 9LL) > 50 )
      {
        v18 = *(_QWORD *)v14._r0 == 0x6C61436775626564LL;
        if ( *(_QWORD *)v14._r0 == 0x6C61436775626564LL )
        {
          if ( *(_DWORD *)(v14._r0 + 8LL) == 959460460 )
          {
            if ( *(_BYTE *)(v14._r0 + 12LL) == 54 )
              return;
            v18 = 1;
          }
          else
          {
            v18 = 1;
          }
        }
        if ( !v18 || *(_DWORD *)(v14._r0 + 8LL) != 959527020 || *(_BYTE *)(v14._r0 + 12LL) != 50 )
          goto LABEL_60;
      }
      else
      {
        v17 = *(_QWORD *)v14._r0 == 0x6C61436775626564LL;
        if ( *(_QWORD *)v14._r0 == 0x6C61436775626564LL )
        {
          if ( *(_DWORD *)(v14._r0 + 8LL) == 842019180 )
          {
            if ( *(_BYTE *)(v14._r0 + 12LL) == 52 )
              return;
            v17 = 1;
          }
          else
          {
            v17 = 1;
          }
        }
        if ( !v17 || *(_DWORD *)(v14._r0 + 8LL) != 875573868 || *(_BYTE *)(v14._r0 + 12LL) != 56 )
          goto LABEL_60;
      }
    }
    else
    {
      if ( v14._r1 != 14 )
        goto LABEL_60;
      v19 = *(_QWORD *)v14._r0;
      v20 = *(_QWORD *)v14._r0 == 0x6C61436775626564LL;
      if ( *(_QWORD *)v14._r0 == 0x6C61436775626564LL )
      {
        if ( *(_DWORD *)(v14._r0 + 8LL) == 859189612 )
        {
          if ( *(_WORD *)(v14._r0 + 12LL) == 13368 )
            return;
          v20 = 1;
        }
        else
        {
          v20 = 1;
        }
      }
      if ( !v20 )
        goto LABEL_60;
      if ( *(_DWORD *)(v14._r0 + 8LL) == 926036844 )
      {
        if ( *(_WORD *)(v14._r0 + 12LL) == 14390 )
          return;
        v21 = v19 == 0x6C61436775626564LL;
      }
      else
      {
        v21 = v19 == 0x6C61436775626564LL;
      }
      if ( !v21 || *(_DWORD *)(v14._r0 + 8LL) != 892679788 || *(_WORD *)(v14._r0 + 12LL) != 13875 )
        goto LABEL_60;
    }
  }
  else if ( v14._r1 == 11 )
  {
    v15 = *(_QWORD *)v14._r0 == 0x6C61436775626564LL;
    if ( *(_QWORD *)v14._r0 == 0x6C61436775626564LL )
    {
      if ( *(_WORD *)(v14._r0 + 8LL) == 13164 )
      {
        if ( *(_BYTE *)(v14._r0 + 10LL) == 50 )
          return;
        v15 = 1;
      }
      else
      {
        v15 = 1;
      }
    }
    if ( !v15 || *(_WORD *)(v14._r0 + 8LL) != 13932 || *(_BYTE *)(v14._r0 + 10LL) != 52 )
    {
LABEL_60:
      if ( (__int64)v14._r1 > 8 && *(_QWORD *)v14._r0 == 0x2E656D69746E7572LL )
      {
        v22 = (_QWORD *)v33;
        *(_QWORD *)(v33 + 8) = 31;
        if ( runtime_writeBarrier )
        {
          runtime_gcWriteBarrier1();
          *v24 = v23;
        }
        *v22 = "call from within the Go runtime";
      }
      else
      {
        if ( runtime__ptr_moduledata_textAddr(v10._r1, *(unsigned int *)v10._r0) != *v34 )
          --*v34;
        if ( (unsigned int)runtime_pcdatavalue(
                             (unsigned int *)v10._r0,
                             (_QWORD *)v10._r1,
                             0,
                             *v34,
                             v25,
                             v26,
                             v27,
                             v28,
                             v29) != -1 )
        {
          v30 = (_QWORD *)v33;
          *(_QWORD *)(v33 + 8) = 22;
          if ( runtime_writeBarrier )
          {
            runtime_gcWriteBarrier1();
            *v32 = v31;
          }
          *v30 = "call not at safe point";
        }
      }
    }
  }
  else
  {
    if ( v14._r1 != 12 )
      goto LABEL_60;
    v16 = *(_QWORD *)v14._r0 == 0x6C61436775626564LL;
    if ( *(_QWORD *)v14._r0 == 0x6C61436775626564LL )
    {
      if ( *(_DWORD *)(v14._r0 + 8LL) == 942813548 )
        return;
      v16 = 1;
    }
    if ( !v16
      || *(_DWORD *)(v14._r0 + 8LL) != 909455980
      && (*(_QWORD *)v14._r0 != 0x6C61436775626564LL || *(_DWORD *)(v14._r0 + 8LL) != 842085740) )
    {
      goto LABEL_60;
    }
  }
}

==================================================

// function name: runtime_makechan

// 1175F78: using guessed type __int64 _cgo_getstackbound;

//----- (0000000001009CA0) ----------------------------------------------------
// runtime.makechan
runtime_hchan *__golang runtime_makechan(
        __int64 a1,
        signed __int64 a2,
        __int64 a3,
        __int64 a4,
        __int64 a5,
        __int64 a6,
        __int64 a7,
        __int64 a8,
        __int64 a9)
{
  __int64 v9; // r14
  __int64 v10; // rdx
  unsigned __int64 v11; // rax
  __int64 v12; // rax
  runtime_hchan *v13; // rcx
  __int64 *v14; // r11
  __int64 v15; // rax
  __int64 v16; // rdx
  __int64 *v17; // r11
  __int64 v18; // rax
  __int64 v19; // rdx
  __int64 *v20; // r11
  abi_Type *v21; // rdx
  abi_Type **v22; // r11
  signed __int64 v24; // [rsp+10h] [rbp-20h]
  abi_Type *v25; // [rsp+18h] [rbp-18h]
  runtime_hchan *p_hchan; // [rsp+20h] [rbp-10h]

  v10 = *(_QWORD *)(a1 + 48);
  if ( *(_QWORD *)v10 >= 0x10000u )
LABEL_25:
    runtime_throw(
      (__int64 (*)(void))"makechan: invalid channel element type",
      (__int64 (*)(void))0x26,
      a3,
      a4,
      a5,
      a6,
      a7,
      a8,
      a9);
  if ( *(_BYTE *)(v10 + 21) > 8u )
  {
LABEL_24:
    runtime_throw((__int64 (*)(void))"makechan: bad alignment", (__int64 (*)(void))0x17, a3, a4, a5, a6, a7, a8, a9);
    goto LABEL_25;
  }
  v25 = *(abi_Type **)(a1 + 48);
  v11 = a2 * *(_QWORD *)v10;
  if ( !is_mul_ok(a2, *(_QWORD *)v10) || v11 > 0xFFFFFFFFFF98LL || a2 < 0 )
  {
    runtime_gopanic(&RTYPE_runtime_plainError, &off_10EB170);
    goto LABEL_24;
  }
  if ( v11 )
  {
    if ( *(_QWORD *)(v10 + 8) )
    {
      v24 = a2 * *(_QWORD *)v10;
      p_hchan = (runtime_hchan *)runtime_newobject(&RTYPE_runtime_hchan);
      v12 = runtime_mallocgc(v24, v25, 1);
      if ( runtime_writeBarrier )
      {
        runtime_gcWriteBarrier2();
        *v14 = v12;
        v13 = p_hchan;
        v14[1] = (__int64)p_hchan->buf;
      }
      else
      {
        v13 = p_hchan;
      }
      v13->buf = (unsafe_Pointer)v12;
    }
    else
    {
      v15 = runtime_mallocgc(v11 + 104, 0, 1);
      v16 = v15 + 104;
      if ( runtime_writeBarrier )
      {
        runtime_gcWriteBarrier2();
        *v17 = v16;
        v17[1] = *(_QWORD *)(v15 + 16);
      }
      *(_QWORD *)(v15 + 16) = v16;
      v13 = (runtime_hchan *)v15;
    }
  }
  else
  {
    v18 = runtime_mallocgc(104, 0, 1);
    v19 = v18 + 16;
    if ( runtime_writeBarrier )
    {
      runtime_gcWriteBarrier2();
      *v20 = v19;
      v20[1] = *(_QWORD *)(v18 + 16);
    }
    *(_QWORD *)(v18 + 16) = v19;
    v13 = (runtime_hchan *)v18;
  }
  v21 = v25;
  v13->elemsize = v25->Size_;
  if ( runtime_writeBarrier )
  {
    runtime_gcWriteBarrier2();
    *v22 = v21;
    v22[1] = v13->elemtype;
  }
  v13->elemtype = v21;
  v13->dataqsiz = a2;
  if ( *(_QWORD *)(v9 + 392) )
    v13->synctest = 1;
  return v13;
}

==================================================

// function name: runtime_init_1

// 1196558: using guessed type int dword_1196558;

//----- (000000000100B7A0) ----------------------------------------------------
// runtime.init.1
__int64 runtime_init_1()
{
  __int64 result; // rax

  if ( runtime_isIntel && byte_11966A9 )
    result = (unsigned __int8)byte_11966AA;
  else
    result = 0;
  if ( byte_11966A2 )
    runtime_memmoveBits |= 1u;
  if ( (_BYTE)result )
  {
    result = (unsigned __int8)runtime_memmoveBits | 2u;
    runtime_memmoveBits |= 2u;
  }
  return result;
}

==================================================

// function name: internal_runtime_atomic__ptr_Int32_Store

// 1002CA0: using guessed type __int64 type__eq_internal_runtime_sys_NotInHeap();

//----- (0000000001002CC0) ----------------------------------------------------
// internal/runtime/atomic.(*Int32).Store
retval_1002CC0 __golang internal_runtime_atomic__ptr_Int32_Store(volatile __int32 *a1, __int32 a2)
{
  retval_1002CC0 result; // 0:rax.8,8:rbx.8

  result._r1 = (unsigned int)_InterlockedExchange(a1, a2);
  result._r0 = a1;
  return result;
}

==================================================

// function name: internal_runtime_maps__ptr_table_split

internal_runtime_maps__ptr_table_grow(a1, a2, a3, 2 * *(_WORD *)(a1 + 2));

//----- (0000000001005700) ----------------------------------------------------
// internal/runtime/maps.(*table).split
void __golang internal_runtime_maps__ptr_table_split(__int64 a1, __int64 a2, __int64 a3)
{
  maps_table *v3; // rax
  __int64 v4; // rsi
  __int64 v5; // r8
  unsigned __int64 i; // rcx
  unsigned __int64 j; // rbx
  unsigned __int64 v8; // rdi
  int v9; // r10d
  __int64 v10; // r11
  unsigned __int64 v11; // rdi
  __int64 v12; // r12
  unsigned __int64 v13; // rax
  __int64 v14; // rcx
  char v15; // [rsp+0h] [rbp-4Ah]
  unsigned __int64 v16; // [rsp+Ah] [rbp-40h]
  unsigned __int64 v17; // [rsp+12h] [rbp-38h]
  maps_table *v18; // [rsp+1Ah] [rbp-30h]
  maps_table *v19; // [rsp+22h] [rbp-28h]
  unsigned __int64 v20; // [rsp+2Ah] [rbp-20h]
  __int64 v21; // [rsp+32h] [rbp-18h]
  __int64 v22; // [rsp+3Ah] [rbp-10h]

  v15 = *(_BYTE *)(a1 + 6);
  v19 = internal_runtime_maps_newTable(a2, 0x400u, -1, v15 + 1);
  v3 = internal_runtime_maps_newTable(a2, 0x400u, -1, v15 + 1);
  v18 = v3;
  v4 = a1;
  v5 = a2;
  for ( i = 0; *(_QWORD *)(v4 + 24) >= i; ++i )
  {
    v17 = i;
    v21 = *(_QWORD *)(v4 + 16) + i * *(_QWORD *)(v5 + 80);
    for ( j = 0; j < 8; ++j )
    {
      if ( *(char *)(v21 + j) >= 0 )
      {
        v8 = j * *(_QWORD *)(v5 + 88);
        v9 = *(_DWORD *)(v5 + 104);
        v10 = v8 + v21 + 8;
        if ( (v9 & 4) != 0 )
          v10 = *(_QWORD *)(v8 + v21 + 8);
        v16 = j;
        v11 = *(_QWORD *)(v5 + 96) + v8;
        v12 = v11 + v21 + 8;
        if ( (v9 & 8) != 0 )
          v12 = *(_QWORD *)(v11 + v21 + 8);
        v22 = v12;
        v20 = v10;
        v13 = (**(__int64 (__golang ***)(__int64, _QWORD))(v5 + 72))(v10, *(_QWORD *)(a3 + 8));
        v14 = (__int64)v18;
        if ( (v13 & -(__int64)((unsigned __int8)(63 - v15) < 0x40u) & (1LL << (63 - v15))) == 0 )
          v14 = (__int64)v19;
        internal_runtime_maps__ptr_table_uncheckedPutSlot(v14, a2, v13, v20, v22);
        v3 = v18;
        i = v17;
        j = v16;
        v4 = a1;
        v5 = a2;
      }
    }
  }
  internal_runtime_maps__ptr_Map_installTableSplit(a3, v4, (__int64)v19, (__int64)v3);
  *(_QWORD *)(a1 + 8) = -1;
}

==================================================

// function name: runtime_printpanicval

//----- (000000000100D0E0) ----------------------------------------------------
// runtime.printpanicval
__int64 __golang runtime_printpanicval(
        RTYPE *a1,
        _QWORD *a2,
        __int64 a3,
        __int64 a4,
        __int64 a5,
        __int64 a6,
        __int64 a7,
        __int64 a8,
        __int64 a9)
{
  __int64 v9; // rax
  __int64 v10; // rax
  __int64 result; // rax
  __int64 v12; // rax
  __int64 v13; // rax
  __int64 v14; // rax
  __int64 v15; // rax
  __int64 v16; // rax
  __int64 v17; // rax
  __int64 v18; // rax
  __int64 v19; // rax
  __int64 v20; // rax
  __int64 v21; // rax
  __int64 v22; // rax
  __int64 v23; // rax
  __int64 v24; // rax
  __int64 v25; // rax
  __int64 v26; // rax
  __int64 v27; // rax
  __int64 v28; // rax
  unsigned __int8 v29; // [rsp+1h] [rbp-65h]
  float v30; // [rsp+2h] [rbp-64h]
  float v31; // [rsp+6h] [rbp-60h]
  float v32; // [rsp+Ah] [rbp-5Ch]
  double v33; // [rsp+Eh] [rbp-58h]
  double v34; // [rsp+16h] [rbp-50h]
  double v35; // [rsp+1Eh] [rbp-48h]
  const __m128i *v36; // [rsp+26h] [rbp-40h]
  __int64 v37; // [rsp+2Eh] [rbp-38h]
  __int64 v38; // [rsp+36h] [rbp-30h]
  __int64 v39; // [rsp+3Eh] [rbp-28h]
  const __m128i *v40; // [rsp+46h] [rbp-20h]
  __int64 v41; // [rsp+4Eh] [rbp-18h]
  __int64 v42; // [rsp+4Eh] [rbp-18h]
  __int64 v43; // [rsp+4Eh] [rbp-18h]
  __int64 v44; // [rsp+56h] [rbp-10h]
  __int64 v45; // [rsp+56h] [rbp-10h]
  __int64 v46; // [rsp+56h] [rbp-10h]

  if ( a1 )
  {
    switch ( a1->hash & 0x3F )
    {
      case 0:
        if ( a1 != &RTYPE_complex64 )
          goto LABEL_37;
        v30 = *(float *)a2;
        v31 = *((float *)a2 + 1);
        v9 = runtime_printlock(a1);
        v10 = runtime_printcomplex(v9, v30, v31);
        return runtime_printunlock(v10);
      case 1:
        if ( a1 != &RTYPE_uint64_0 )
          goto LABEL_37;
        v37 = *a2;
        runtime_printlock(*a2);
        v12 = runtime_printuint(v37);
        return runtime_printunlock(v12);
      case 2:
      case 4:
      case 5:
      case 6:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
      case 0xF:
      case 0x11:
      case 0x12:
      case 0x13:
      case 0x15:
      case 0x17:
      case 0x18:
      case 0x19:
      case 0x1B:
      case 0x1C:
      case 0x1D:
      case 0x1E:
      case 0x20:
      case 0x21:
      case 0x22:
      case 0x24:
      case 0x25:
      case 0x26:
      case 0x27:
      case 0x28:
      case 0x29:
      case 0x2A:
      case 0x2B:
      case 0x2C:
      case 0x2D:
      case 0x2E:
      case 0x2F:
      case 0x30:
      case 0x31:
      case 0x33:
      case 0x35:
      case 0x36:
      case 0x37:
      case 0x38:
      case 0x3A:
      case 0x3B:
      case 0x3C:
      case 0x3E:
        goto LABEL_37;
      case 3:
        if ( a1 != &RTYPE_int8 )
          goto LABEL_37;
        v44 = *(char *)a2;
        runtime_printlock(v44);
        v13 = runtime_printint(v44);
        result = runtime_printunlock(v13);
        break;
      case 7:
        if ( a1 != &RTYPE_int64 )
          goto LABEL_37;
        v39 = *a2;
        runtime_printlock(*a2);
        v14 = runtime_printint(v39);
        result = runtime_printunlock(v14);
        break;
      case 0xD:
        if ( a1 != &RTYPE_complex128 )
          goto LABEL_37;
        v33 = *(double *)a2;
        v34 = *((double *)a2 + 1);
        v15 = runtime_printlock(a1);
        v16 = runtime_printcomplex(v15, v33, v34);
        result = runtime_printunlock(v16);
        break;
      case 0xE:
        if ( a1 != &RTYPE_uint32_0 )
          goto LABEL_37;
        v41 = *(unsigned int *)a2;
        runtime_printlock(v41);
        v17 = runtime_printuint(v41);
        result = runtime_printunlock(v17);
        break;
      case 0x10:
        if ( a1 != &RTYPE_int32 )
          goto LABEL_37;
        v45 = *(int *)a2;
        runtime_printlock(v45);
        v18 = runtime_printint(v45);
        result = runtime_printunlock(v18);
        break;
      case 0x14:
        if ( a1 != &RTYPE_float32 )
          goto LABEL_37;
        v32 = *(float *)a2;
        runtime_printlock(a1);
        runtime_printfloat(v32);
        result = runtime_printunlock(v19);
        break;
      case 0x16:
        if ( a1 != &RTYPE_int16 )
          goto LABEL_37;
        v46 = *(__int16 *)a2;
        runtime_printlock(v46);
        v20 = runtime_printint(v46);
        result = runtime_printunlock(v20);
        break;
      case 0x1A:
        if ( a1 != &RTYPE_uint_0 )
          goto LABEL_37;
        v38 = *a2;
        runtime_printlock(*a2);
        v21 = runtime_printuint(v38);
        result = runtime_printunlock(v21);
        break;
      case 0x1F:
        if ( a1 != &RTYPE_float64 )
          goto LABEL_37;
        v35 = *(double *)a2;
        runtime_printlock(a1);
        runtime_printfloat(v35);
        result = runtime_printunlock(v22);
        break;
      case 0x23:
        if ( a1 != &RTYPE_string )
          goto LABEL_37;
        result = runtime_printindented((const __m128i *)*a2, a2[1], (__int64)&RTYPE_string, a4, a5, a6, a7, a8, a9);
        break;
      case 0x32:
        if ( a1 != &RTYPE_uint8_0 )
          goto LABEL_37;
        v42 = *(unsigned __int8 *)a2;
        runtime_printlock(v42);
        v23 = runtime_printuint(v42);
        result = runtime_printunlock(v23);
        break;
      case 0x34:
        if ( a1 != &RTYPE_bool )
          goto LABEL_37;
        v29 = *(_BYTE *)a2;
        runtime_printlock(*(unsigned __int8 *)a2);
        v24 = runtime_printbool(v29);
        result = runtime_printunlock(v24);
        break;
      case 0x39:
        if ( a1 != &RTYPE_int )
          goto LABEL_37;
        v40 = (const __m128i *)*a2;
        runtime_printlock(*a2);
        v25 = runtime_printint(v40);
        result = runtime_printunlock(v25);
        break;
      case 0x3D:
        if ( a1 != &RTYPE_uint16_0 )
          goto LABEL_37;
        v43 = *(unsigned __int16 *)a2;
        runtime_printlock(v43);
        v26 = runtime_printuint(v43);
        result = runtime_printunlock(v26);
        break;
      case 0x3F:
        if ( a1 == &RTYPE_uintptr )
        {
          v36 = (const __m128i *)*a2;
          runtime_printlock(*a2);
          v27 = runtime_printuint(v36);
          result = runtime_printunlock(v27);
        }
        else
        {
LABEL_37:
          result = runtime_printanycustomtype((__int64)a1, a2);
        }
        break;
    }
  }
  else
  {
    runtime_printlock(0);
    v28 = runtime_printstring("nil", 3);
    return runtime_printunlock(v28);
  }
  return result;
}

==================================================

// function name: runtime_gcMarkRootPrepare

//----- (000000000101CAE0) ----------------------------------------------------
// runtime.gcMarkRootPrepare
__int64 runtime_gcMarkRootPrepare()
{
  __int64 v0; // rcx
  __int64 v1; // rax
  __int64 i; // rdx
  _QWORD *v3; // rbx
  __int64 v4; // rsi
  __int64 v5; // rax
  __int64 v6; // rcx
  __int64 *v7; // r11
  __int64 v8; // rax
  __int64 v9; // rcx
  __int64 *v10; // r11
  int v11; // ecx

  xmmword_1176AE8 = 0;
  if ( runtime_modulesSlice )
  {
    v0 = *(_QWORD *)runtime_modulesSlice;
    v1 = *(_QWORD *)(runtime_modulesSlice + 8);
  }
  else
  {
    v1 = 0;
    v0 = 0;
  }
  for ( i = 0; v1 > i; ++i )
  {
    v3 = *(_QWORD **)(v0 + 8 * i);
    if ( (__int64)xmmword_1176AE8 < (__int64)((unsigned __int64)(v3[27] - v3[26] + 0x3FFFFLL) >> 18) )
      *(_QWORD *)&xmmword_1176AE8 = (unsigned __int64)(v3[27] - v3[26] + 0x3FFFFLL) >> 18;
    v4 = v3[29] - v3[28];
    if ( *((__int64 *)&xmmword_1176AE8 + 1) < (__int64)((unsigned __int64)(v4 + 0x3FFFF) >> 18) )
      *((_QWORD *)&xmmword_1176AE8 + 1) = (unsigned __int64)(v4 + 0x3FFFF) >> 18;
  }
  v5 = qword_118F5D8;
  v6 = qword_118F5D0;
  qword_118F608 = qword_118F5D8;
  qword_118F610 = qword_118F5D8;
  if ( runtime_writeBarrier )
  {
    runtime_gcWriteBarrier2();
    *v7 = v6;
    v7[1] = qword_118F600;
  }
  qword_118F600 = v6;
  qword_1176AF8 = 16 * v5;
  v8 = qword_11761D8;
  v9 = runtime_allgs;
  *(_QWORD *)&xmmword_1176B28 = qword_11761D8;
  *((_QWORD *)&xmmword_1176B28 + 1) = qword_11761D8;
  if ( runtime_writeBarrier )
  {
    runtime_gcWriteBarrier2();
    *v10 = v9;
    v10[1] = qword_1176B20;
  }
  qword_1176B20 = v9;
  qword_1176B00 = v8;
  dword_1176AC8 = 0;
  dword_1176ACC = v8 + qword_1176AF8 + DWORD2(xmmword_1176AE8) + xmmword_1176AE8 + 2;
  dword_1176B08 = 2;
  dword_1176B0C = xmmword_1176AE8 + 2;
  dword_1176B10 = DWORD2(xmmword_1176AE8) + xmmword_1176AE8 + 2;
  v11 = qword_1176AF8 + DWORD2(xmmword_1176AE8) + xmmword_1176AE8;
  dword_1176B14 = v11 + 2;
  dword_1176B18 = v8 + v11 + 2;
  return (unsigned int)(v8 + v11 + 2);
}

==================================================

// function name: internal_runtime_maps__ptr_Map_putSlotSmall

//----- (0000000001003A60) ----------------------------------------------------
// internal/runtime/maps.(*Map).putSlotSmall
char *__golang internal_runtime_maps__ptr_Map_putSlotSmall(_QWORD *a1, __int64 a2, char a3, __int64 a4)
{
  unsigned __int64 v4; // rsi
  unsigned __int64 v5; // r10
  _QWORD *v6; // r8
  __int64 v7; // rdx
  char *v8; // rcx
  __int64 v10; // rsi
  __int64 v11; // r10
  __int64 v12; // rax
  unsigned __int64 *v13; // rdx
  __int64 v14; // rsi
  __int64 *v15; // r11
  __int64 v16; // rdi
  char *v17; // rsi
  __int64 v18; // rax
  __int64 *v19; // rcx
  __int64 *v20; // r11
  char v21; // [rsp+0h] [rbp-48h]
  unsigned __int64 v22; // [rsp+8h] [rbp-40h]
  __int64 v23; // [rsp+10h] [rbp-38h]
  unsigned __int64 v24; // [rsp+18h] [rbp-30h]
  __int64 v25; // [rsp+18h] [rbp-30h]
  __int64 *v26; // [rsp+20h] [rbp-28h]
  _QWORD *v27; // [rsp+28h] [rbp-20h]
  unsigned __int64 *v28; // [rsp+30h] [rbp-18h]
  __int64 v30; // [rsp+58h] [rbp+10h]
  __int64 v31; // [rsp+68h] [rbp+20h]

  v30 = a2;
  v31 = a4;
  v28 = (unsigned __int64 *)a1[2];
  v21 = a3 & 0x7F;
  v4 = (unsigned __int8)_mm_movemask_epi8(
                          _mm_cmpeq_epi8(
                            _mm_shufflelo_epi16(_mm_unpacklo_epi8((__m128i)(a3 & 0x7F), (__m128i)(a3 & 0x7F)), 0),
                            (__m128i)*v28));
  while ( v4 )
  {
    v22 = v4;
    _BitScanForward64(&v5, v4);
    v24 = v5;
    v6 = (unsigned __int64 *)((char *)v28 + v5 * *(_QWORD *)(a2 + 88) + 8);
    if ( (*(_DWORD *)(a2 + 104) & 4) != 0 )
      v6 = (_QWORD *)*v6;
    v27 = v6;
    if ( (**(unsigned __int8 (__golang ***)(__int64, _QWORD *))(*(_QWORD *)(a2 + 48) + 24LL))(a4, v6) )
    {
      v7 = v30;
      if ( (*(_DWORD *)(v30 + 104) & 1) != 0 )
      {
        internal_runtime_maps_typedmemmove(*(_QWORD *)(v30 + 48), v27, v31);
        v7 = v30;
      }
      v8 = (char *)v28 + *(_QWORD *)(v7 + 96) + v24 * *(_QWORD *)(v7 + 88) + 8;
      if ( (*(_DWORD *)(v7 + 104) & 8) != 0 )
        return *(char **)v8;
      return v8;
    }
    v4 = (v22 - 1) & v22;
    a2 = v30;
    a4 = v31;
  }
  LODWORD(v10) = _mm_movemask_epi8((__m128i)*v28);
  if ( (_DWORD)v10 )
  {
    _BitScanForward64((unsigned __int64 *)&v10, (unsigned int)v10);
    v25 = v10;
    v11 = (__int64)v28 + v10 * *(_QWORD *)(a2 + 88) + 8;
    if ( (*(_DWORD *)(a2 + 104) & 4) != 0 )
    {
      v23 = v10 * *(_QWORD *)(a2 + 88);
      v12 = internal_runtime_maps_newobject(*(_QWORD *)(a2 + 48));
      if ( runtime_writeBarrier )
      {
        runtime_gcWriteBarrier2();
        *v15 = v12;
        v13 = v28;
        v14 = v23;
        v15[1] = *(unsigned __int64 *)((char *)v28 + v23 + 8);
      }
      else
      {
        v13 = v28;
        v14 = v23;
      }
      *(unsigned __int64 *)((char *)v13 + v14 + 8) = v12;
      a2 = v30;
      a4 = v31;
      v11 = v12;
    }
    internal_runtime_maps_typedmemmove(*(_QWORD *)(a2 + 48), v11, a4);
    v16 = v25;
    v17 = (char *)v28 + *(_QWORD *)(v30 + 96) + v25 * *(_QWORD *)(v30 + 88) + 8;
    if ( (*(_DWORD *)(v30 + 104) & 8) != 0 )
    {
      v26 = (__int64 *)((char *)v28 + *(_QWORD *)(v30 + 96) + v25 * *(_QWORD *)(v30 + 88) + 8);
      v18 = internal_runtime_maps_newobject(*(_QWORD *)(v30 + 56));
      if ( runtime_writeBarrier )
      {
        runtime_gcWriteBarrier2();
        *v20 = v18;
        v19 = v26;
        v20[1] = *v26;
      }
      else
      {
        v19 = v26;
      }
      *v19 = v18;
      v16 = v25;
      v17 = (char *)v18;
    }
    *((_BYTE *)v28 + v16) = v21;
    ++*a1;
    return v17;
  }
  else
  {
    internal_runtime_maps_fatal(
      (__int64 (*)(void))"small map with no empty slot (concurrent map writes?)",
      (__int64 (*)(void))0x35);
    return 0;
  }
}

==================================================

// function name: runtime_debugCallWrap1

retval_100BD80 __golang runtime_debugCallCheck(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang runtime_debugCallCheck_func1(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, unsigned int *a6, unsigned int *a7, unsigned __int64 a8, __int64 a9);
void __golang __noreturn runtime_debugCallWrap(__int64 (*a1)(void), __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
runtime_guintptr __golang runtime_debugCallWrap_func1(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang __noreturn runtime_debugCallWrap1(); // weak
__int64 __golang runtime_debugCallWrap2(void (*a1)(void));
// __int64 __golang runtime_debugCallWrap2_func1(int, int, int, int, int, int, int, int, int, char); weak
// retval_100C500 __golang runtime_gogetenv(_QWORD, _QWORD); weak
string __golang runtime_plainError_Error(runtime_plainError);
// string __golang runtime_boundsError_Error(runtime_boundsError);
__int64 __golang runtime_printpanicval(RTYPE *a1, _QWORD *a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_printanycustomtype(__int64 a1, _QWORD *a2);
__int64 __golang runtime_printindented(const __m128i *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// void __golang __noreturn runtime_panicwrap(_QWORD); weak
// __int64 __golang runtime_checkfds(_QWORD); weak
__int64 __golang runtime_memhashFallback(unsigned __int64 *a1, __int64 a2, unsigned __int64 a3);
__int64 __golang runtime_memhash32Fallback(unsigned int *a1, __int64 a2);
__int64 __golang runtime_memhash64Fallback(_QWORD *a1, unsigned __int64 a2);
volatile signed __int64 *__golang runtime__ptr_timeHistogram_record(volatile signed __int64 *result, signed __int64 a2);
_QWORD *runtime_timeHistogramMetricsBuckets();
// retval_100E8C0 __golang runtime__ptr_itabTableType_find(_QWORD, _QWORD, _QWORD); weak
__int64 __golang runtime_itabAdd(__int64 a1, double a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 *a10);
// __int64 __golang runtime__ptr_itabTableType_add(_QWORD, _QWORD); weak
retval_100EB00 __golang runtime_itabInit(abi_Name **a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, int a8, int a9);
// retval_100EF20 __golang runtime_itabsinit(); weak
// void __golang __noreturn runtime_panicdottypeE(_QWORD, _QWORD, _QWORD); weak
__int64 *__golang runtime_convT(__int64 (**a1)(void), __int64 a2, double a3, __int64 a4, void (__golang *a5)(), __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 *a10);
__m128i *__golang runtime_convTnoptr(__int64 (**a1)(void), const __m128i *a2, double a3, __int64 a4, void (__golang *a5)(), __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 *a10);
__int64 __golang runtime_typeAssert(volatile signed __int64 *a1, abi_Type *a2, double a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 *a10);
__int64 *__golang runtime_buildTypeAssertCache(_QWORD *a1, __int64 a2, __int64 a3, void (__golang *a4)(), __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 *a9, double a10);
retval_100F660 __golang runtime_interfaceSwitch(__int64 a1, abi_Type *a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, double a10);
__int64 *__golang runtime_buildInterfaceSwitchCache(_QWORD *a1, __int64 a2, __int64 a3, void (__golang *a4)(), __int64 a5, _QWORD *a6, __int64 a7, __int64 a8, __int64 *a9, double a10);
// __int64 __golang runtime__ptr_lfstack_push(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
__int64 __golang runtime_lfnodeValidate(__int64 a1);
// __int64 __golang runtime_notewakeup(_QWORD); weak
signed __int64 __golang runtime_notesleep(volatile signed __int64 *a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_notetsleep_internal(volatile signed __int64 *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime_notetsleep(_QWORD, _QWORD); weak
// __int64 __golang runtime_notetsleepg(_QWORD, _QWORD); weak
__int64 __golang runtime_lockVerifyMSize(__int64 a1, __int64 a2, __int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
// retval_1010320 __golang runtime_lock(_QWORD); weak
volatile signed __int8 *__golang runtime_lock2(volatile signed __int8 *result, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime_unlock(_QWORD); weak
void __golang runtime_unlock2(volatile signed __int64 *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_unlock2Wake(volatile signed __int64 *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_mallocinit(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_1010DE0 __golang runtime__ptr_mheap_sysAlloc(_QWORD *a1, __int64 a2, _QWORD *a3, __int64 r3, __int64 r4, __int64 r5);
retval_1011540 __golang runtime_sysReserveAligned(__int64 a1, __int64 a2, __int64 a3);
void __golang runtime__ptr_mheap_enableMetadataHugePages(__int64 a1);
__int64 __golang runtime__ptr_mcache_nextFree(__int64 a1, __int64 a2);
retval_1011900 __golang runtime_mallocgcTiny(unsigned __int64 a1);
retval_1011BE0 __golang runtime_mallocgcSmallNoscan(unsigned __int64 a1, __int64 a2, unsigned int a3, int a4, double a5, __int64 a6, int a7, int a8, int a9, int a10);
retval_1011F00 __golang runtime_mallocgcSmallScanNoHeader(__int64 (*a1)(void), __int64 a2, char a3, int a4, double a5, __int64 a6, __int64 a7, int a8, int a9, int a10);
retval_1012260 __golang runtime_mallocgcSmallScanHeader(__int64 a1, __int64 a2, char a3, double a4, __int64 a5, __int64 a6, int a7, int a8, int a9, int a10);
retval_10125E0 __golang runtime_mallocgcLarge(unsigned __int64 a1, __int64 a2, char a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_preMallocgcDebug(__int64 (*a1)(void), __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_postMallocgcDebug(__int64 result, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang runtime_deductAssistCredit(__int64 a1, unsigned __int64 a2, __int64 a3, void (__golang *a4)(), __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 *a9);
__int64 __golang runtime_memclrNoHeapPointersChunked(__int64 result, _OWORD *a2, double a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10);
// void *__golang runtime_newobject(const RTYPE *); idb
unsigned __int64 __golang runtime_profilealloc(unsigned __int64 a1, __int64 (*a2)(void), __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_fastexprand(__int64 a1);
__int64 __golang runtime_persistentalloc(__int64 (*a1)(void), __int64 (*a2)(void), __int64 (*a3)(void), __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime_persistentalloc_func1(); weak
retval_1012E80 __golang runtime_persistentalloc1(unsigned __int64 a1, unsigned __int64 a2, __int64 *r2, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 r8);
// retval_1013140 __golang runtime__ptr_linearAlloc_alloc(_QWORD, _QWORD, _QWORD, _QWORD); weak
// __int64 __golang runtime_wbZero(_QWORD); weak
// __int64 __golang runtime_wbMove(_QWORD, _QWORD, _QWORD); weak
// __int64 __golang runtime_reflectcallmove(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// __int64 __golang runtime_typedmemclr(_QWORD, _QWORD); weak
retval_1013420 __golang runtime__ptr_mspan_typePointersOf(__int64 a1, __int64 *a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_10134C0 __golang runtime__ptr_mspan_typePointersOfUnchecked(__int64 a1, __int64 *a2, __int64 (*a3)(void), __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_1013580 __golang runtime__ptr_mspan_typePointersOfType(__int64 a1, __int64 a2, __int64 (*a3)(void), __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_1013600 __golang runtime_typePointers_next(__int64 (*a1)(void), __int64 a2, unsigned __int64 a3, __int64 a4, unsigned __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_1013760 __golang runtime_typePointers_fastForward(__int64 (*a1)(void), __int64 a2, __int64 (*a3)(void), __int64 a4, unsigned __int64 a5, unsigned __int64 a6, __int64 a7, __int64 a8, __int64 a9);
unsigned __int64 __golang runtime_bulkBarrierPreWrite(unsigned __int64 result, __int64 a2, unsigned __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, _QWORD *a9);
__int64 (*__golang runtime_bulkBarrierPreWriteSrcOnly(__int64 (*result)(void), __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9))(void);
void __golang runtime__ptr_mspan_initHeapBits(_ptr_runtime_mspan);
// __int64 runtime__ptr_mspan_heapBits(void); weak
__int64 __golang runtime__ptr_mspan_heapBitsSmallForAddr(_QWORD *a1, __int64 a2);
__int64 __golang runtime__ptr_mspan_writeHeapBitsSmall(__int64 a1, __int64 a2, __int64 (*a3)(void), __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime__ptr_mspan_refillAllocCache(_QWORD, _QWORD); weak
// __int64 __golang runtime__ptr_mspan_nextFreeIndex(_QWORD); weak
void __golang __noreturn runtime_badPointer(__int64 a1, __int64 a2, unsigned __int64 a3, __int64 a4);
__int64 __golang runtime_bulkBarrierBitmap(__int64 result, __int64 a2, unsigned __int64 a3, unsigned __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, _QWORD *a9);
void __golang runtime_typeBitsBulkBarrier(__int64 a1, __int64 a2, __int64 (*a3)(void), __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
unsigned __int64 __golang runtime_progToPointerMask(char *a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
unsigned __int64 __golang runtime_runGCProg(char *a1, _BYTE *a2);
__int64 *__golang runtime_allocmcache(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang runtime_allocmcache_func1(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 *__golang runtime__ptr_mcache_refill(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
_ptr_runtime_mspan __golang runtime__ptr_mcache_allocLarge(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang runtime__ptr_mcache_releaseAll(_ptr_runtime_mcache);
void __golang runtime__ptr_mcache_prepareForSweep(_ptr_runtime_mcache);
runtime_mspan *__golang runtime__ptr_mcentral_cacheSpan(_BYTE *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime__ptr_mcentral_uncacheSpan(_QWORD); weak
runtime_mspan *__golang runtime__ptr_mcentral_grow(_BYTE *a1, __int64 a2);
// retval_1016040 __golang runtime_sysAlloc(_QWORD, _QWORD); weak
// __int64 __golang runtime_sysFree(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
// __int64 __golang runtime_sysFault(_QWORD); weak
// __int64 __golang runtime_sysReserve(_QWORD); weak
// __int64 __golang runtime_sysMap(_QWORD, _QWORD, _QWORD); weak
// __int64 __golang runtime_initMetrics(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
// retval_1017C00 __golang runtime_queuefinalizer(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
// retval_1017E60 __golang runtime_createfing(); weak
void __golang __noreturn runtime_runfinq(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
MODULEDATA120 *__golang runtime_SetFinalizer(MODULEDATA120 *result, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime_SetFinalizer_func2(); weak
// __int64 __golang runtime_SetFinalizer_func1(); weak
void __golang runtime__ptr_fixalloc_init(unsigned __int64 *a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
_OWORD *__golang runtime__ptr_fixalloc_alloc(__int64 a1, double a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10);
// retval_1018E80 __golang runtime_gcinit(_QWORD); weak
// retval_1018F00 __golang runtime_gcenable(); weak
void __golang __noreturn runtime_gcenable_gowrap2(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, char a10);
void __golang __noreturn runtime_gcenable_gowrap1(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, char a10);
bool __golang runtime_pollFractionalWorkerExit(__int64 a1);
// retval_1019140 __golang runtime_gcTrigger_test(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
__int64 __golang runtime_gcStart(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, _QWORD *a9);
__int64 __golang runtime_gcStart_func4(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, char *a7, char *a8, __int64 a9);
__int64 __golang runtime_gcStart_func2(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang runtime_gcStart_func1();
__int64 runtime_gcMarkDone(void); // weak
__int64 __golang runtime_gcMarkDone_func4(); // weak
__int64 __golang runtime_gcMarkDone_func3(__int64 a1, __int64 a2, __int64 a3, int a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_gcMarkDone_func2(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime_gcMarkDone_forEachP_func5(); weak
__int64 __golang runtime_gcMarkTermination(unsigned __int8 a1, __int64 (*a2)(void), __int64 a3, __int64 a4);
// __int64 __golang runtime_gcMarkTermination_forEachP_func6(); weak
__int64 __golang runtime_gcMarkTermination_func3(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, char *a7, char *a8, __int64 a9);
// __int64 __golang runtime_gcMarkTermination_func2(); weak
// __int64 __golang runtime_gcMarkTermination_func1(); weak
void __golang runtime_gcBgMarkStartWorkers(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang __noreturn runtime_gcBgMarkStartWorkers_gowrap1(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, char a10);
void __golang __noreturn runtime_gcBgMarkWorker(__int64 a1);
signed __int64 __golang runtime_gcBgMarkWorker_func2(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_gcMark(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, _QWORD *a9);
__int64 __golang runtime_gcSweep(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang runtime_clearpools(__int64 a1, int r1, __int64 a3, __int64 r3, volatile __int64 *r4, __int64 r5, __int64 r6, __int64 r7, __int64 r8);
retval_101C120 __golang runtime_fmtNSAsMS(_BYTE *a1, unsigned __int64 a2, __int64 a3, unsigned __int64 a4);
__int64 __golang runtime__ptr_gcCPULimiterState_startGCTransition(__int64 a1, char a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime__ptr_gcCPULimiterState_finishGCTransition(__int64 result, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime__ptr_gcCPULimiterState_update(volatile signed __int32 *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime__ptr_gcCPULimiterState_updateLocked(__int64 result, __int64 a2);
// __int64 __golang runtime__ptr_gcCPULimiterState_accumulate(_QWORD, _QWORD, _QWORD); weak
__int64 __golang runtime__ptr_gcCPULimiterState_resetCapacity(volatile signed __int32 *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_101C8C0 __golang runtime__ptr_limiterEvent_consume(volatile signed __int64 *a1, __int64 a2);
// __int64 __golang runtime__ptr_limiterEvent_stop(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64); weak
__int64 runtime_gcMarkRootPrepare(void); // weak
__int64 __golang runtime_gcMarkRootCheck(__int64 a1);
// __int64 __golang runtime_gcMarkRootCheck_func1(); weak
unsigned __int64 __golang runtime_markroot(__int64 (*a1)(void), __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
signed __int64 __golang runtime_markroot_func1(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime_markrootBlock(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
__int64 __golang runtime_markrootSpans(__int64 result, __int64 a2, __int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
void __golang runtime_gcAssistAlloc(__int64 a1, unsigned __int64 r1, __int64 a3, void (__golang *a4)(), __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 *a9);
// __int64 __golang runtime_gcAssistAlloc_func2(); weak
void __golang runtime_gcAssistAlloc_func1();
void __golang runtime_gcAssistAlloc1(__int64 a1, int64 a2);
// __int64 __golang runtime_gcWakeAllAssists(_QWORD); weak
// __int64 runtime_gcParkAssist(void); weak
void __golang runtime_gcFlushBgCredit(unsigned __int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
unsigned __int64 __golang runtime_scanstack(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, unsigned int *a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, __int64 a11);
// __int64 __golang runtime_scanframeworker(_QWORD, _QWORD, _QWORD); weak
// retval_101EFE0 __golang runtime_gcDrain(_QWORD, _QWORD); weak
int64 __golang runtime_gcDrainN(runtime_gcWork *a1, int64 a2, __int64 heapScanWork, __int64 a4, __int64 a5, unsigned __int64 nobj, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime_scanblock(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
__int64 __golang runtime_scanobject(char *a1, _QWORD *a2, __int64 (*a3)(void), __int64 a4, int a5, unsigned __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime_scanConservative(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
__int64 __golang runtime_shade(__int64 a1);
// __int64 __fastcall runtime_greyobject(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
unsigned __int64 __golang runtime_gcDumpObject(__int64 a1, __int64 a2, unsigned __int64 a3, __int64 a4);
__int64 __golang runtime_gcmarknewobject(__int64 result, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_gcMarkTinyAllocs(_QWORD); // weak
__int64 __golang runtime__ptr_gcControllerState_startCycle(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, int a8, int a9);
__int64 __golang runtime__ptr_gcControllerState_revise(__int64 a1);
// __int64 __golang runtime__ptr_gcControllerState_endCycle(_QWORD, _QWORD, _QWORD, _QWORD); weak
__int64 __golang runtime__ptr_gcControllerState_enlistWorker(__int64 result, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_1021140 __golang runtime__ptr_gcControllerState_findRunnableGCWorker(__int64 a1, _QWORD *a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime__ptr_gcControllerState_resetLive(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 *__golang runtime__ptr_gcControllerState_update(__int64 *result, unsigned __int64 a2, unsigned __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// retval_1021780 __golang runtime__ptr_gcControllerState_heapGoalInternal(_QWORD, _QWORD, _QWORD); weak
// retval_10218C0 __golang runtime__ptr_gcControllerState_trigger(_QWORD); weak
// __int64 __golang runtime__ptr_gcControllerState_commit(_QWORD, _QWORD); weak
__int64 __golang runtime__ptr_gcControllerState_addIdleMarkWorker(__int64 a1);
signed __int64 __golang runtime__ptr_gcControllerState_removeIdleMarkWorker(__int64 a1);
// __int64 __golang runtime__ptr_gcControllerState_setMaxIdleMarkWorkers(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
__int64 __golang runtime_gcControllerCommit(__int64 a1, __int64 a2);
// __int64 __golang runtime_gcPaceScavenger(_QWORD, _QWORD, _QWORD); weak
void __golang runtime__ptr_scavengerState_init(_ptr_runtime_scavengerState);
void __golang runtime__ptr_scavengerState_park(_ptr_runtime_scavengerState);
void __golang runtime__ptr_scavengerState_wake(_ptr_runtime_scavengerState);
void __golang runtime__ptr_scavengerState_sleep(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, double a10);
void __golang runtime__ptr_scavengerState_controllerFailed(_ptr_runtime_scavengerState);
// void __golang __noreturn runtime_bgscavenge(_QWORD); weak
unsigned __int64 __golang runtime__ptr_pageAlloc_scavenge(__int64 (*a1)(void), __int64 (*a2)(void), __int64 (**a3)(void), unsigned int a4);
// __int64 __golang runtime__ptr_pageAlloc_scavenge_func1(); weak
__int64 __golang runtime__ptr_pageAlloc_scavengeOne(__int64 a1, unsigned __int64 a2, __int64 a3, unsigned __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// retval_10232C0 __golang runtime__ptr_pallocData_findScavengeCandidate(_QWORD, _QWORD, _QWORD, _QWORD); weak
// __int64 __golang runtime__ptr_scavengeIndex_init(_QWORD, _QWORD, _QWORD); weak
// __int64 __golang runtime__ptr_scavengeIndex_grow(_QWORD, _QWORD, _QWORD, _QWORD); weak
// retval_1023780 __golang runtime__ptr_scavengeIndex_find(_QWORD, _QWORD); weak
// __int64 __golang runtime__ptr_scavengeIndex_alloc(_QWORD, _QWORD, _QWORD); weak
// __int64 __golang runtime__ptr_scavengeIndex_free(_QWORD, _QWORD, _QWORD, _QWORD); weak
// retval_1023C00 __golang runtime__ptr_scavengeIndex_nextGen(_QWORD); weak
// retval_1023C40 __golang runtime__ptr_scavengeIndex_setEmpty(_QWORD, _QWORD, _QWORD, _QWORD); weak
retval_1023EE0 __golang runtime__ptr_piController_next(double *a1, double a2, double a3, double a4);
// __int64 __golang runtime__ptr_stackScanState_putPtr(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// __int64 __golang runtime__ptr_stackScanState_getPtr(_QWORD); weak
// __int64 __golang runtime_binarySearchTree(_QWORD, _QWORD, _QWORD); weak
__int64 __golang runtime__ptr_mheap_nextSpanForSweep(__int64 a1, __int64 a2, __int64 a3, int a4, __int64 a5, int a6, int a7, int a8, int a9);
// __int64 __golang runtime__ptr_activeSweep_end(_QWORD, _QWORD, _QWORD); weak
__int64 __golang runtime_finishsweep_m(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5);
// void __golang __noreturn runtime_bgsweep(_QWORD); weak
// retval_1024A60 __golang runtime__ptr_sweepLocker_tryAcquire(_QWORD, _QWORD); weak
// __int64 __golang runtime_sweepone(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
// void __golang runtime__ptr_mspan_ensureSwept(_ptr_runtime_mspan);
__int64 __golang runtime__ptr_sweepLocked_sweep(runtime_mspan **a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime__ptr_sweepLocked_sweep__ptr_mheap_freeSpan_func3(); // weak
__int64 __golang runtime__ptr_sweepLocked_sweep__ptr_mheap_freeSpan_func2(); // weak
// __int64 __golang runtime__ptr_sweepLocked_sweep_func1(); weak
void __golang runtime__ptr_mspan_reportZombies(_ptr_runtime_mspan);
__int64 __golang runtime_deductSweepCredit(__int64 result, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_gcPaceSweeper(__int64 result);
// void __golang runtime__ptr_gcWork_init(_ptr_runtime_gcWork);
// __int64 __golang runtime__ptr_gcWork_put(_QWORD, _QWORD); weak
retval_1026760 __golang runtime__ptr_gcWork_putBatch(runtime_gcWork *a1, const __m128i *a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, _ptr_runtime_gcWork a10);
// uintptr __golang runtime__ptr_gcWork_tryGet(_ptr_runtime_gcWork);
// void __golang runtime__ptr_gcWork_dispose(_ptr_runtime_gcWork);
// void __golang runtime__ptr_gcWork_balance(_ptr_runtime_gcWork);
signed __int64 *__golang runtime_getempty(__int64 a1, __int64 a2, signed __int64 *a3, __int64 a4, __int64 *a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime_getempty_func1(); weak
__int64 __golang runtime_putempty(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_putfull(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
signed __int64 *__golang runtime_trygetfull(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
signed __int64 *__golang runtime_handoff(__int64 a1, __int64 a2, signed __int64 *a3, __int64 a4, __int64 *a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// retval_1027000 __golang runtime_prepareFreeWorkbufs(); weak
bool __golang runtime_freeSomeWbufs(char a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime_freeSomeWbufs_func1(); weak
__int64 __golang runtime_recordspan(_QWORD *a1, __int64 a2, __int64 a3, int a4, __int64 a5, int a6, int r0, __int64 r7, __int64 r8);
// __int64 __golang runtime_spanOfHeap(_QWORD); weak
__int64 __golang runtime__ptr_mheap_init(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime__ptr_mheap_reclaim(__int64 result, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, unsigned __int64 a9);
// __int64 __golang runtime__ptr_mheap_reclaimChunk(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
// __int64 __golang runtime__ptr_mheap_alloc(_QWORD, _QWORD); weak
// retval_1027F60 __golang runtime__ptr_mheap_allocManual(_QWORD, _QWORD, _QWORD); weak
__int64 __golang runtime__ptr_mheap_setSpans(__int64 result, unsigned __int64 a2, unsigned __int64 a3, __int64 a4, __int64 a5, int a6, int a7, int a8, __int64 a9);
_OWORD *__golang runtime__ptr_mheap_allocMSpanLocked(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, double a10);
__int64 __golang runtime__ptr_mheap_allocSpan(volatile signed __int8 *a1, unsigned __int64 r1, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime__ptr_mheap_initSpan(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
retval_1028C00 __golang runtime__ptr_mheap_grow(_QWORD *a1, __int64 a2);
void __golang runtime__ptr_mheap_freeManual(volatile signed __int8 *a1, __int64 a2, __int64 a3, __int64 a4, __int64 r0, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime__ptr_mheap_freeSpanLocked(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
_BYTE *__golang runtime__ptr_mspan_init(__int64 a1, __int64 a2, __int64 a3);
_QWORD *__golang runtime__ptr_mSpanList_remove(_QWORD *result, _QWORD *a2);
__int64 *__golang runtime__ptr_mSpanList_insert(__int64 *result, __int64 *a2);
__int64 __golang runtime_addspecial(__int64 a1, __int64 a2, unsigned __int8 a3);
__int64 __golang runtime_addfinalizer(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// retval_1029D80 __golang runtime_gcWakeAllStrongFromWeak(_QWORD); weak
__int64 __golang runtime_setprofilebucket(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang runtime_freeSpecial(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime_newMarkBits(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
// __int64 runtime_nextMarkBitArenaEpoch(void); weak
__int64 __golang runtime__ptr_pageAlloc_init(__int64 a1, __int64 a2, __int64 (*a3)(void), __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 (**a9)(void));
__int64 __golang runtime__ptr_pageAlloc_grow(__int64 *a1, __int64 a2, unsigned __int64 a3, __int64 a4, __int64 a5, unsigned __int64 a6, unsigned __int64 a7, unsigned __int64 a8, int a9);
// retval_102AA00 __golang runtime__ptr_pageAlloc_enableChunkHugePages(_QWORD); weak
__int64 __golang runtime__ptr_pageAlloc_update(_QWORD *a1, __int64 a2, __int64 a3, char a4, unsigned __int8 a5);
__int64 __golang runtime__ptr_pageAlloc_allocRange(_QWORD *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, int a9);
// __int64 __golang runtime__ptr_pageAlloc_findMappedAddr(_QWORD, _QWORD); weak
retval_102B5C0 __golang runtime__ptr_pageAlloc_find(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, unsigned __int64 a6, int a7, int a8, int a9);
// __int64 __golang runtime__ptr_pageAlloc_find_func1(int, int, int, int, int, int, int, int, int, __int64); weak
retval_102C2C0 __golang runtime__ptr_pageAlloc_alloc(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, int a7, int a8, int a9);
__int64 __golang runtime__ptr_pageAlloc_free(_QWORD *a1, __int64 a2, __int64 a3, int a4, double a5, __int64 a6, __int64 a7, int a8, int a9, int a10);
// __int64 __golang runtime_mergeSummaries(_QWORD, _QWORD, _QWORD); weak
__int64 __golang runtime__ptr_pageAlloc_sysInit(__int64 result);
__int64 __golang runtime__ptr_pageAlloc_sysGrow(__int64 *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, unsigned __int64 a6, unsigned __int64 a7, unsigned __int64 a8, int a9);
__int64 __golang runtime__ptr_scavengeIndex_sysGrow(_QWORD *a1, __int64 a2, __int64 a3, __int64 a4);
__int64 __golang runtime__ptr_scavengeIndex_sysInit(__int64 *a1);
retval_102D540 __golang runtime__ptr_pageCache_alloc(_QWORD *a1, __int64 a2);
// __int64 runtime__ptr_pageCache_allocN(void); weak
__int64 *__golang runtime__ptr_pageCache_flush(__int64 *result, _QWORD *a2, __int64 a3, int a4);
retval_102D960 __golang runtime__ptr_pageAlloc_allocToCache(_QWORD *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, int a7, int a8, int a9);
// __int64 __golang runtime__ptr_pageBits_setRange(_QWORD, _QWORD, _QWORD); weak
__int64 __golang runtime__ptr_pageBits_clearRange(__int64 result, unsigned __int64 a2, unsigned __int64 a3, int a4, int a5, int a6, int a7, int a8, int a9, double a10);
// __int64 __golang runtime__ptr_pageBits_popcntRange(_QWORD, _QWORD); weak
// __int64 __golang runtime__ptr_pallocBits_summarize(_QWORD); weak
// retval_102E300 __golang runtime__ptr_pallocBits_find(_QWORD, _QWORD, _QWORD, _QWORD); weak
retval_102E4A0 __golang runtime__ptr_pallocBits_findLargeN(__int64 a1, unsigned __int64 a2, unsigned __int64 a3);
// __int64 __golang runtime__ptr_pallocData_allocRange(_QWORD, _QWORD, _QWORD); weak
retval_102E6E0 __golang runtime__ptr_bucket_stk(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// retval_102E740 __golang runtime__ptr_bucket_mp(); weak
// __int64 __golang runtime_stkbucket(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
void __golang runtime_mProf_Flush(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// retval_102ECE0 __golang runtime_mProf_FlushLocked(_QWORD); weak
unsigned __int64 __golang runtime_mProf_Malloc(unsigned __int64 result, __int64 (*a2)(void), __int64 a3, int a4, __int64 a5, __int64 a6, int a7, int a8, int a9);
// __int64 __golang runtime_mProf_Malloc_func1(); weak
// retval_102EFC0 __golang runtime_mProf_Free(_QWORD, _QWORD); weak
_BOOL8 __golang runtime_blocksampled(__int64 a1, __int64 a2);
__int64 __golang runtime_saveblockevent(__int64 result, __int64 a2, __int64 a3, __int64 a4, int a5, __int64 a6, int a7, unsigned __int64 a8, __int64 a9);
int64 __golang runtime_fpTracebackPartialExpand(__int64 a1, _QWORD *a2, __int64 a3, signed __int64 a4, __int64 a5, __int64 a6, __int64 a7, unsigned __int64 a8, __int64 a9);
__int64 __golang runtime__ptr_lockTimer_begin(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8);
// __int64 __golang runtime__ptr_lockTimer_end(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
unsigned __int64 __golang runtime__ptr_mLockProfile_recordLock(unsigned __int64 result, __int64 a2, __int64 a3);
void __golang runtime__ptr_mLockProfile_recordUnlock(runtime_mLockProfile *a1, __int64 a2);
void __golang runtime__ptr_mLockProfile_captureStack(_ptr_runtime_mLockProfile);
signed __int64 __golang runtime__ptr_mLockProfile_captureStack_func1(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, unsigned __int64 a8, __int64 a9);
void __golang runtime__ptr_mLockProfile_store(_ptr_runtime_mLockProfile);
// __int64 __golang runtime_saveBlockEventStack(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
void __golang runtime_tryRecordGoroutineProfileWB(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, unsigned __int64 a8, __int64 a9);
void __golang runtime_tryRecordGoroutineProfile(__int64 a1, __int64 (*a2)(void), __int64 a3, __int64 a4, void (**a5)(void), __int64 a6, __int64 a7, unsigned __int64 a8, __int64 a9);
void __golang runtime_doRecordGoroutineProfile(__int64 a1, __int64 (*a2)(void), __int64 a3, __int64 a4, __int64 a5, unsigned int *a6, unsigned int *a7, unsigned __int64 a8, __int64 a9);
char __golang runtime_doRecordGoroutineProfile_func1(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
char __golang runtime_saveg(__int64 a1, _QWORD *a2, unsigned __int64 *a3, __m128i **a4, const __m128i *a5, signed __int64 a6, unsigned int *a7, unsigned __int64 a8, __int64 a9);
// retval_1030560 __golang runtime_makeAddrRange(_QWORD, _QWORD); weak
retval_10305E0 __golang runtime_addrRange_subtract(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 (*__golang runtime__ptr_addrRanges_init(__int64 *a1, __int64 (*a2)(void), __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9))(void);
int64 __golang runtime__ptr_addrRanges_findSucc(__int64 *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, unsigned __int64 a6, unsigned __int64 a7, unsigned __int64 a8, int a9);
// __int64 __golang runtime__ptr_addrRanges_add(_QWORD, _QWORD, _QWORD); weak
char __golang runtime__ptr_addrRanges_cloneInto(const __m128i **a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
volatile __int64 *__golang runtime__ptr_spanSet_push(__int64 a1, __int64 a2);
// __int64 __golang runtime__ptr_spanSet_pop(_QWORD); weak
// __int64 __golang runtime__ptr_spanSet_reset(_QWORD); weak
// retval_1031340 __golang runtime__ptr_spanSetBlockAlloc_alloc(_QWORD); weak
// __int64 __golang runtime__ptr_atomicHeadTailIndex_incTail(_QWORD); weak
// __int64 __golang runtime__ptr_sysMemStat_add(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
__int64 __golang runtime__ptr_consistentHeapStats_acquire(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang runtime__ptr_consistentHeapStats_release(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime__ptr_cpuStats_accumulate(_QWORD, _QWORD, _QWORD); weak
// void __golang runtime__ptr_wbBuf_reset(_ptr_runtime_wbBuf);
unsigned __int64 __golang runtime_wbBufFlush(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang runtime_wbBufFlush1(__int64 a1, __int64 a2, __int64 a3, int a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang runtime__ptr_pollDesc_publishInfo(_ptr_runtime_pollDesc);
// __int64 __golang runtime__ptr_pollDesc_setEventErr(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
// __int64 runtime_netpollGenericInit(void); weak
void __golang runtime__ptr_pollCache_free(__int64 a1, runtime_pollDesc *a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_netpollready(signed __int64 *a1, __int64 a2, int a3);
bool __golang runtime_netpollblockcommit(signed __int64 a1, volatile signed __int64 *a2);
unsigned __int64 __golang runtime_netpollgoready(__int64 (*a1)(void), __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime_netpollgoready_goready_func1(); weak
// __int64 __golang runtime_netpollblock(_QWORD, _QWORD, _QWORD); weak
__int64 *__golang runtime__ptr_pollCache_alloc(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 runtime_netpollinit(); // weak
__int64 __golang runtime_netpollopen(__int64 a1, __int64 a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9);
retval_1032340 __golang runtime_netpoll(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, int a6, char *a7, char *a8, int a9);
__int64 __golang runtime_addWakeupEvent(char a1, int a2, __int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
__int64 __golang runtime_wakeNetpoll(char a1, int a2, __int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
__int64 __golang runtime_semacreate(__int64 result, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9);
// __int64 __golang runtime_semasleep(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
__int64 __golang runtime_semawakeup(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 runtime_osinit(void); weak
__int64 __golang runtime_newosproc(retval_104817A (__golang *a1)(), int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9);
// __int64 __golang runtime_newosproc_func1(); weak
// __int64 __golang runtime_minit(_QWORD); weak
__int64 __golang runtime_setsig(char a1, __int64 (__golang *a2)(__int64 result, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, unsigned int *a7, _QWORD *a8, __int64 a9), __int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
__int64 __golang runtime_setsigstack(char a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9);
void __golang runtime_sysargs(int a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime_panicCheck1(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// retval_1033440 __golang runtime_panicCheck2(_QWORD, _QWORD); weak
void __golang __noreturn runtime_goPanicIndex(int64 a1, signed __int64 a2, __int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
void __golang __noreturn runtime_goPanicIndexU(int64 a1, signed __int64 a2, __int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
void __golang __noreturn runtime_goPanicSliceAlen(int64 a1, signed __int64 a2, __int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
void __golang __noreturn runtime_goPanicSliceAlenU(int64 a1, signed __int64 a2, __int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
void __golang __noreturn runtime_goPanicSliceAcap(int64 a1, signed __int64 a2, __int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
void __golang __noreturn runtime_goPanicSliceAcapU(int64 a1, signed __int64 a2, __int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
void __golang __noreturn runtime_goPanicSliceB(int64 a1, signed __int64 a2, __int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
void __golang __noreturn runtime_goPanicSliceBU(int64 a1, signed __int64 a2, __int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
void __golang __noreturn runtime_goPanicSlice3Alen(int64 a1, signed __int64 a2, __int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
void __golang __noreturn runtime_goPanicSlice3C(int64 a1, signed __int64 a2, __int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
// void __golang __noreturn runtime_panicshift(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
// void __golang __noreturn runtime_panicdivide(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
void __golang runtime_deferconvert(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_deferprocStack(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, char a10);
void __golang runtime_popDefer(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 *a9);
// __int64 __golang runtime_deferreturn(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// retval_10341E0 __golang runtime_printpanics(_QWORD, _QWORD, _QWORD); weak
retval_1034480 __golang runtime__ptr__panic_nextDefer(runtime__panic *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 *a9);
bool __golang runtime__ptr__panic_nextFrame(_ptr_runtime__panic);
// __int64 __golang runtime__ptr__panic_nextFrame_func1(); weak
__int64 __golang runtime__ptr__panic_initOpenCodedDefers(__int64 a1, unsigned int *a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime_gorecover(_QWORD); weak
__int64 __golang runtime_throw_func1(); // weak
void __golang runtime_fatal(__int64 (*a1)(void), __int64 (*a2)(void));
__int64 __golang runtime_fatal_func1(); // weak
__int64 __golang runtime_fatalthrow(int a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, char a10);
// __int64 __golang runtime_fatalthrow_func1(); weak
__int64 __golang runtime_fatalpanic(__int64 (*a1)(void), __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, char a10);
__int64 __golang runtime_fatalpanic_func1(); // weak
// __int64 __golang runtime_startpanic_m(_QWORD); weak
__int64 __golang runtime_dopanic_m(_QWORD *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 runtime_canpanic(void); // weak
// __int64 __golang runtime_shouldPushSigpanic(_QWORD, _QWORD, _QWORD); weak
// __int64 __golang runtime_isAbortPC(_QWORD); weak
void __golang runtime__ptr_Pinner_Pin(unsigned __int64 *a1, __int64 a2, __int64 a3);
void __golang runtime__ptr_Pinner_Unpin(_ptr_runtime_Pinner);
void __golang runtime__ptr_pinner_unpin(_ptr_runtime_pinner);
// __int64 __golang runtime_pinnerGetPtr(_QWORD); weak
__int64 __golang runtime_setPinned(__int64 a1, char a2);
__int64 __golang runtime_setPinned_func2(__int64 a1, __int64 a2, __int64 a3, unsigned __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime_setPinned_func1(); weak
// void __golang runtime__ptr_mspan_refreshPinnerBits(_ptr_runtime_mspan);
__int64 __golang runtime__ptr_mspan_incPinCounter(__int64 result, unsigned __int64 a2, __int64 a3, __int64 a4, unsigned __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime__ptr_mspan_decPinCounter(__int64 a1, unsigned __int64 a2, __int64 a3, unsigned __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_suspendG(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_1036A00 __golang runtime_resumeG(__int64 a1, char a2, char a3);
void __golang __noreturn runtime_asyncPreempt2(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_1036CE0 __golang runtime_isAsyncSafePoint(unsigned __int64 *a1, char *a2, unsigned __int64 a3, __int64 a4, __int64 a5, unsigned int *a6, unsigned int *a7, unsigned __int64 a8, __int64 a9);
int64 __golang runtime_recordForPanic(__int64 a1, signed __int64 a2, __int64 a3);
// __int64 __golang runtime_printlock(_QWORD); weak
// __int64 __golang runtime_printunlock(_QWORD); weak
void __golang runtime_gwrite(const __m128i *a1, signed __int64 a2, __int64 a3);
// __int64 __golang runtime_printsp(_QWORD); weak
// __int64 __golang runtime_printnl(_QWORD); weak
// __int64 __golang runtime_printbool(_QWORD); weak
void __golang runtime_printfloat(double a1);
// __int64 __golang runtime_printcomplex(_QWORD, double, double); weak
// __int64 __golang runtime_printuint(_QWORD); weak
// __int64 __golang runtime_printint(_QWORD); weak
// __int64 __golang runtime_printhex(_QWORD); weak
__int64 __golang runtime_printpointer(__int64 a1);
__int64 __golang runtime_printuintptr(__int64 a1);
// __int64 __golang runtime_printstring(_QWORD, _QWORD); weak
// __int64 __golang runtime_printslice(_QWORD, _QWORD, _QWORD); weak
__int64 __golang runtime_hexdumpWords(__int64 a1, unsigned __int64 a2, __int64 (__golang **a3)(char **));
__int64 __golang runtime_main(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime_main_func2(); weak
__int64 (__golang **runtime_init_6())();
void __golang runtime_goschedIfBusy(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_acquireSudog(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, _QWORD *a9);
__int64 __golang runtime_releaseSudog(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 *a9);
// void __golang __noreturn runtime_badmcall(_QWORD); weak
// void __golang __noreturn runtime_badmcall2(_QWORD); weak
// void __noreturn runtime_badreflectcall(void); weak
void __golang __noreturn runtime_badmorestackg0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, int a6, int a7, int a8, int a9);
void __golang __noreturn runtime_badmorestackg0_func1(); // weak
__int64 runtime_badmorestackgsignal(void); // weak
void __golang __noreturn runtime_switchToCrashStack(__int64 (__fastcall **a1)(__int64, __int64, _QWORD), __int64 a2, __int64 a3, __int64 a4, __int64 a5, int a6, int a7, int a8, int a9);
void __golang runtime_allgadd(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang runtime_forEachG(void (__golang **a1)(_QWORD), int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime_forEachGRace(_QWORD); weak
retval_1039000 __golang runtime_getGodebugEarly(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang runtime_schedinit();
// retval_10395E0 __golang runtime_mReserveID(_QWORD, _QWORD, _QWORD); weak
void __golang runtime_mcommoninit(_QWORD *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_ready(__int64 a1, __int64 a2, char a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_casfrom_Gscanstatus(__int64 a1, unsigned __int32 a2, unsigned __int32 a3);
bool __golang runtime_castogscanstatus(__int64 a1, unsigned __int32 a2, unsigned __int32 a3);
signed __int64 __golang runtime_casgstatus(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang runtime_casgstatus_func3(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang __noreturn runtime_casgstatus_func1(); // weak
signed __int64 __golang runtime_casGToWaitingForSuspendG(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_casGToPreemptScan(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_casGFromPreempted(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_103A800 __golang runtime_stopTheWorld(unsigned __int8 a1);
__int64 __golang runtime_stopTheWorld_func1(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_startTheWorld(unsigned __int8 a1, __int64 (*a2)(void), __int64 (*a3)(void), __int64 (*a4)(void), __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_startTheWorld_func1(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, char *a7, char *a8, __int64 a9);
retval_103AAA0 __golang runtime_stopTheWorldGC(unsigned __int8 a1);
__int64 __golang runtime_startTheWorldGC(unsigned __int8 a1, __int64 (*a2)(void), __int64 (*a3)(void), __int64 (*a4)(void), __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_103AB60 __golang runtime_stopTheWorldWithSema(unsigned __int8 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_startTheWorldWithSema(__int64 a1, char a2, __int64 r1_low, __int64 a4, __int64 a5, __int64 a6, char *a7, char *a8, __int64 a9);
// __int64 runtime_mstart0(void); weak
__int64 __golang runtime_mexit(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang runtime_forEachPInternal(void (__golang **a1)(__int64), int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang runtime_runSafePointFn();
runtime_m *__golang runtime_allocm(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime_allocm_func1(); weak
__int64 __golang runtime_needm(unsigned __int8 a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9);
__int64 __golang runtime_oneNewExtraM(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_dropm(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// retval_103C6A0 __golang runtime_getExtraM(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
// __int64 __golang runtime_addExtraM(_QWORD, _QWORD, _QWORD); weak
// __int64 __golang runtime_newm(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
__int64 __golang runtime_newm1(retval_104817A (__golang *a1)(), __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// retval_103CA00 __golang runtime_startTemplateThread(_QWORD); weak
// __int64 __golang runtime_stopm(_QWORD); weak
__int64 __golang runtime_startm(__int64 r0, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang runtime_handoffp(retval_1053980 *a1, int a2, _BOOL8 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_stoplockedm(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_startlockedm(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_gcstopm(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_execute(__int64 a1, char a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, unsigned __int64 a8, __int64 *a9);
_QWORD *__golang runtime_findRunnable(__int64 a1, int *a2, __int64 a3, __int64 r3, int *r4, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_pollWork(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, int a6, char *a7, char *a8, int a9);
retval_103EBE0 __golang runtime_stealWork(__int64 a1);
__int64 __golang runtime_checkRunqsNoP(__int64 a1, __int64 a2, __int64 a3, __int64 a4, unsigned __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_checkTimersNoP(__int64 a1, __int64 a2, __int64 a3, __int64 a4, unsigned __int64 a5, __int64 a6, __int64 a7);
// retval_103F1C0 __golang runtime_checkIdleGCNoP(); weak
__int64 __golang runtime_wakeNetPoller(__int64 result, int a2, __int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
// __int64 runtime_resetspinning(void); weak
__int64 *__golang runtime_injectglist(__int64 *result, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_schedule(__int64 a1, int *a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_park_m(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_goschedImpl(__int64 a1, char a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_goschedguarded_m(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_preemptPark(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, unsigned int *a6, unsigned int *a7, unsigned __int64 a8, __int64 a9);
__int64 __golang runtime_goyield_m(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang __noreturn runtime_goexit1(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang runtime_gdestroy(_QWORD *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_save(__int64 result, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
unsigned __int64 __golang runtime_reentersyscall(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_reentersyscall_func3(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang __noreturn runtime_reentersyscall_func2(); // weak
void __golang __noreturn runtime_reentersyscall_func1(); // weak
void __golang runtime_entersyscall_gcwait(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang __noreturn runtime_entersyscallblock_func3(); // weak
void __golang __noreturn runtime_entersyscallblock_func2(); // weak
void __golang __noreturn runtime_entersyscallblock_func1(); // weak
void __golang runtime_entersyscallblock_handoff(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime_exitsyscall_func2(); weak
// __int64 __golang runtime_exitsyscall_func1(); weak
__int64 __golang runtime_exitsyscallfast(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime_exitsyscallfast_func1(); weak
retval_1041760 __golang runtime_exitsyscallfast_reacquired(__int64 (*a1)(void), __int64 (*a2)(void), __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_exitsyscallfast_reacquired_func1(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7);
__int64 __golang runtime_exitsyscall0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 (*__golang runtime_malg(int a1))(void);
// __int64 __golang runtime_malg_func1(); weak
unsigned __int64 __golang runtime_newproc(__int64 (*a1)(void), __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
signed __int64 __golang runtime_newproc_func1(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_newproc1(_QWORD *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 runtime_saveAncestors(void); weak
void __golang runtime_gfput(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
_QWORD *__golang runtime_gfget(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime_gfget_func2(); weak
// __int64 __golang runtime_gfget_func1(); weak
void __golang runtime_gfpurge(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime_unlockOSThread(_QWORD); weak
// __int64 __golang runtime__System(); weak
// __int64 __golang runtime__ExternalCode(); weak
// __int64 __golang runtime__LostExternalCode(); weak
// __int64 __golang runtime__GC(); weak
// __int64 __golang runtime__LostSIGPROFDuringAtomic64(); weak
// __int64 __golang runtime__LostContendedRuntimeLock(); weak
__int64 __golang runtime_sigprof(__int64 result, _QWORD *a2, __int64 a3, unsigned __int64 *a4, __int64 a5, int a6, __int64 a7, _QWORD *a8, __int64 a9);
volatile signed __int32 *__golang runtime__ptr_p_init(__int64 a1, int a2);
void __golang runtime__ptr_p_destroy(_ptr_runtime_p);
// __int64 __golang runtime__ptr_p_destroy_freemcache_func2(); weak
void __golang runtime__ptr_p_destroy_func1(__int64 a1, _QWORD *a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_procresize(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_acquirep(__int64 a1);
// retval_1044080 __golang runtime_wirep(_QWORD); weak
void __golang __noreturn runtime_wirep_func2(); // weak
__int64 __golang runtime_releasep(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_releasepNoTrace(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// retval_1044420 __golang runtime_incidlelocked(_QWORD); weak
// retval_1044480 __golang runtime_checkdead(_QWORD); weak
__int64 __golang runtime_retake(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime_preemptall(_QWORD, _QWORD, _QWORD); weak
__int64 __golang runtime_preemptone(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang runtime_schedtrace(__int64 a1);
// __int64 __golang runtime_schedEnableUser(_QWORD); weak
// retval_1045BA0 __golang runtime_globrunqget(_QWORD, _QWORD); weak
__int64 __golang runtime_pidleput(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_1045EC0 __golang runtime_pidleget(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, int a8, int a9);
// retval_1046040 __golang runtime_pidlegetSpinning(_QWORD); weak
signed __int64 __golang runtime_runqput(signed __int64 result, signed __int64 a2, char a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_runqputslow(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang runtime_runqputbatch(__int64 a1, __int64 *a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_1046460 __golang runtime_runqdrain(__int64 a1);
__int64 __golang runtime_runqgrab(__int64 a1, __int64 a2, int a3, char a4, __int64 a5, __int64 a6, int a7, __int64 a8, int a9);
__int64 __golang runtime_runqsteal(__int64 a1, __int64 a2, char a3, __int64 a4, __int64 a5, __int64 a6, int a7, __int64 a8, int a9);
unsigned int *__golang runtime_doInit1(unsigned int *result, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime__ptr_profBuf_canWriteRecord(_QWORD, _QWORD); weak
// __int64 __golang runtime__ptr_profBuf_canWriteTwoRecords(_QWORD, _QWORD, _QWORD); weak
void __golang runtime__ptr_profBuf_write(_QWORD *a1, _QWORD *a2, __int64 a3, const __m128i *a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, double a10);
// retval_1047460 __golang runtime__ptr_profBuf_close(_QWORD, _QWORD); weak
// __int64 __golang runtime__ptr_profBuf_wakeupExtra(_QWORD); weak
retval_1047520 __golang runtime__ptr_profBuf_read(volatile __int64 *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, double a8);
void __golang runtime_randinit(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_readTimeRandom(__int64 a1, __int64 a2, __int64 a3);
// __int64 runtime_bootstrapRand(void); weak
// __int64 runtime_bootstrapRandReseed(void); weak
__int64 __golang runtime_mrandinit(__int64 a1);
int __golang runtime_retryOnEAGAIN(retval_104817A (__golang **a1)());
// __int64 __golang runtime__ptr_ticksType_init(_QWORD); weak
__int64 __golang runtime__ptr_godebugInc_IncNonDefault(__int64 result);
// __int64 __golang runtime_godebugNotify(_QWORD, _QWORD); weak
__int64 __golang runtime_writeErrData(__int64 a1, unsigned int a2);
// __int64 __golang runtime_args(_QWORD, _QWORD); weak
__int64 runtime_goargs(void); // weak
__int64 __golang runtime_goenvs_unix(_QWORD); // weak
// __int64 runtime_testAtomic64(void); weak
void __golang __noreturn runtime_check(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_parsedebugvars(_QWORD); // weak
char ***__golang runtime_reparsedebugvars(__int64 a1, __int64 a2);
// __int64 __golang runtime_parsegodebug(_QWORD, _QWORD, _QWORD); weak
string __golang runtime_waitReason_String(runtime_waitReason);
retval_1049480 __golang runtime_getcallerfp(); // weak
unsigned __int64 __golang runtime__ptr_rwmutex_rlock(unsigned __int64 result, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang runtime__ptr_rwmutex_rlock_func1(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime__ptr_rwmutex_runlock(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime_secure(_QWORD); weak
unsigned __int64 __golang runtime_readyWithTime(retval_106D280 *a1, __int64 (*a2)(void), __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime_readyWithTime_goready_func1(); weak
// retval_1049920 __golang runtime_semacquire1(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
// __int64 __golang runtime_semrelease1(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
void __golang runtime__ptr_semaRoot_queue(__int64 a1, unsigned __int64 a2, __int64 a3, char a4);
// __int64 __golang runtime__ptr_semaRoot_rotateLeft(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
// __int64 __golang runtime__ptr_semaRoot_rotateRight(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
__int64 __golang runtime_dumpregs(__int64 a1);
void (__noreturn *__golang runtime__ptr_sigctxt_preparePanic(__int64 a1, int a2, __int64 a3))();
// retval_104B080 __golang runtime__ptr_sigctxt_fixsigcode(_QWORD); weak
__int64 __golang runtime_doSigPreempt(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, unsigned int *a6, unsigned int *a7, unsigned __int64 a8, __int64 a9);
__int64 __golang runtime_preemptM(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang runtime_sigtrampgo(unsigned int a1, __int64 a2, __int64 a3);
// __int64 __golang runtime_sigprofNonGo(_QWORD, _QWORD, _QWORD); weak
__int64 __golang runtime_sigprofNonGoPC(__int64 result, __int64 a2, __int64 a3, __int64 a4, int a5, int a6, int a7, int a8, int a9);
retval_104B8A0 __golang runtime_adjustSignalStack(int a1, __int64 a2, __int64 a3, int a4, __int64 a5, int a6, int a7, int a8, int a9);
void __golang runtime_adjustSignalStack2(unsigned int a1, __int64 a2, __int64 a3, char a4);
__int64 __golang runtime_sighandler(__int64 result, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, unsigned int *a7, _QWORD *a8, __int64 a9);
__int64 __golang runtime_fatalsignal(__int64 a1, _QWORD *a2, __int64 a3, __int64 a4);
// retval_104C580 __golang runtime_dieFromSignal(_QWORD); weak
__int64 __golang runtime_raisebadsignal(__int64 result, __int64 a2, __int64 a3, int a4, __int64 *a5, int a6, int a7, int a8, int a9);
// void __golang __noreturn runtime_sigNotOnStack(_QWORD, _QWORD, _QWORD); weak
__int64 __golang runtime_badsignal(__int64 a1, __int64 a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9);
// __int64 runtime_sigfwdgo(void); weak
// retval_104CBA0 __golang runtime_sigblock(_QWORD); weak
__int64 __golang runtime_unblocksig(int a1, int a2, __int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
__int64 __golang runtime_minitSignalStack(__int64 a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9);
__int64 __golang runtime_minitSignalMask(__int64 a1, __int64 *a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9);
__int64 __golang runtime_unminitSignals(__int64 a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9);
// __int64 runtime_signalstack(void); weak
// __int64 __golang runtime_sigsend(_QWORD); weak
// void __noreturn runtime_panicmakeslicelen(void); weak
__int64 (*__golang runtime_makeslicecopy(unsigned __int64 *a1, signed __int64 a2, unsigned __int64 a3, const __m128i *a4))(void);
// __int64 __golang runtime_stackpoolalloc(_QWORD); weak
// __int64 __golang runtime_stackpoolfree(_QWORD, _QWORD); weak
void __golang runtime_stackcacherefill(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime_stackcacherelease(_QWORD, _QWORD, _QWORD); weak
__int64 __golang runtime_stackcache_clear(__int64 result, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_104D920 __golang runtime_stackalloc(unsigned int a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 r7, __int64 r8, unsigned int a10);
void __golang runtime_stackfree(unsigned __int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
unsigned __int64 __golang runtime_adjustpointers(unsigned __int64 result, int *a2, unsigned __int64 *a3, __int64 a4, __int64 a5);
unsigned int **__golang runtime_adjustframe(unsigned int **result, unsigned __int64 *a2);
__int64 __golang runtime_syncadjustsudogs(__int64 a1, __int64 a2, unsigned __int64 *a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime_copystack(_QWORD, _QWORD); weak
__int64 __golang runtime_newstack(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, unsigned int *a6, unsigned int *a7, unsigned __int64 a8, __int64 a9);
__int64 runtime_nilfunc(); // weak
// __int64 __golang runtime_gostartcallfn(_QWORD, _QWORD); weak
__int64 __golang runtime_shrinkstack(__int64 result, __int64 a2, __int64 a3, __int64 a4, __int64 a5, unsigned int *a6, unsigned int *a7, unsigned __int64 a8, __int64 a9);
// retval_104FAE0 __golang runtime_gcComputeStartingStackSize(_QWORD); weak
retval_104FC00 __golang runtime__ptr_stkframe_argMapInternal(_QWORD *a1);
retval_104FEE0 __golang runtime__ptr_stkframe_getStackMap(unsigned int **a1);
__int64 __golang runtime_stkobjinit(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_1050660 __golang runtime_concatstrings(__int64 a1, __int64 a2, unsigned __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// retval_1050860 __golang runtime_concatstring2(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
// retval_1050900 __golang runtime_concatstring3(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
// retval_10509C0 __golang runtime_concatstring4(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
// __int64 __golang runtime_concatstring5(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64, __int64); weak
// retval_1050BE0 __golang runtime_slicebytetostring(_QWORD, _QWORD, _QWORD); weak
// retval_1050CE0 __golang runtime_rawstringtmp(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
// retval_1050DA0 __golang runtime_stringtoslicebyte(_QWORD, _QWORD, _QWORD); weak
// retval_1050E60 __golang runtime_intstring(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
__int64 *__golang runtime_rawbyteslice(unsigned __int64 a1, __int64 a2, double a3, __int64 a4, void (__golang *a5)(), char *a6, __int64 a7, __int64 a8, __int64 a9, __int64 *a10);
// retval_10510A0 __golang runtime_atoi64(_QWORD, _QWORD); weak
retval_1051180 __golang runtime_parseByteCount(__int64 a1, __int64 a2);
__int64 __golang runtime_findnull(const __m128i *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 runtime_badsystemstack(void); // weak
bool __golang runtime__ptr_Frames_Next(void ***a1, __int64 *a2, __int64 a3, __int64 a4, __int64 a5, unsigned int *a6, unsigned int *r6, unsigned __int64 r7, __int64 *r8, __int128 a10, __int64 a11, __int64 a12, __int64 a13, __int64 a14, __int64 r2_low, __int64 a16, __int64 a17, unsigned int *a18, _QWORD *a19);
retval_1051CA0 __golang runtime_expandCgoFrames(__int64 a1);
// __int64 runtime_modulesinit(void); weak
// __int64 __golang runtime__ptr_moduledata_textAddr(_QWORD, _QWORD); weak
// retval_1052260 __golang runtime__ptr_moduledata_funcName(_QWORD, _QWORD); weak
uintptr __golang runtime__ptr_Func_Entry(_ptr_runtime_Func);
retval_1052360 __golang runtime_pcvalue(unsigned int *a1, _QWORD *a2, unsigned int a3, unsigned __int64 a4, char a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, __int64 a11, unsigned int a12, __int64 a13, char a14);
// retval_1052A40 __golang runtime_funcpkgpath(_QWORD, _QWORD); weak
// __int64 __golang runtime_funcfile(_QWORD); weak
__int64 __golang runtime_funcMaxSPDelta(unsigned int *a1, _QWORD *a2, __int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
__int64 __golang runtime_pcdatavalue(unsigned int *a1, _QWORD *a2, unsigned int a3, unsigned __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_pcdatavalue1(unsigned int *a1, _QWORD *a2, unsigned int a3, unsigned __int64 a4, char a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_1052E40 __golang runtime_pcdatavalue2(unsigned int *a1, _QWORD *a2, unsigned int a3, unsigned __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// retval_1052EC0 __golang runtime_step(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
retval_1053060 __golang runtime__ptr_inlineUnwinder_next(unsigned int **a1, __int64 a2, int a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8);
void __golang runtime__ptr_synctestGroup_changegstatus(__int64 a1, __int64 a2, int a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime__ptr_synctestGroup_changegstatus_goready_func1(); weak
void __golang runtime__ptr_synctestGroup_incActive(_ptr_runtime_synctestGroup);
void __golang runtime__ptr_synctestGroup_decActive(_ptr_runtime_synctestGroup);
// __int64 __golang runtime__ptr_synctestGroup_decActive_goready_func1(); weak
// __int64 __golang runtime_pthread_attr_init(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64); weak
// __int64 __golang runtime_pthread_attr_getstacksize(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64, __int64); weak
// __int64 __golang runtime_pthread_attr_setdetachstate(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64, __int64); weak
// __int64 __golang runtime_raise(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, char); weak
// __int64 __golang runtime_pthread_kill(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, char); weak
// retval_1053760 __golang runtime_mmap(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
// __int64 __golang runtime_munmap(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64); weak
// __int64 __golang runtime_madvise(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64); weak
// __int64 __golang runtime_usleep(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, char); weak
// __int64 __golang runtime_usleep_no_g(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, char); weak
// retval_1053980 __golang runtime_nanotime1(_QWORD); weak
// __int64 __golang runtime_sigaction(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, char); weak
// __int64 __golang runtime_sigprocmask(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, char); weak
// __int64 __golang runtime_sigaltstack(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64); weak
// __int64 __golang runtime_raiseproc(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, char); weak
// retval_1053BA0 __golang runtime_kqueue(); weak
// __int64 __golang runtime_kevent(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, char, __int64, __int64, __int64, __int64, __int64); weak
// __int64 __golang runtime_pthread_mutex_init(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64, __int64); weak
// __int64 __golang runtime_pthread_mutex_lock(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64); weak
// __int64 __golang runtime_pthread_mutex_unlock(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64); weak
// __int64 __golang runtime_pthread_cond_init(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64, __int64); weak
// __int64 __golang runtime_pthread_cond_signal(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64); weak
// __int64 __golang runtime_arc4random_buf(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64); weak
__int64 __golang runtime_libcCall(__int64 (__fastcall *a1)(__int64), __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, char a10);
bool __golang runtime__ptr_timer_updateHeap(_ptr_runtime_timer);
_QWORD *__golang runtime__ptr_timers_addHeap(_QWORD *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 *a9);
void __golang runtime__ptr_timer_maybeRunAsync(_ptr_runtime_timer);
volatile signed __int8 *__golang runtime__ptr_timer_maybeRunAsync_func1(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
bool __golang runtime__ptr_timer_stop(_ptr_runtime_timer);
void __golang runtime__ptr_timers_deleteMin(_ptr_runtime_timers);
__int64 __golang runtime__ptr_timer_modify(_ptr_runtime_timer a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang runtime__ptr_timer_maybeAdd(_ptr_runtime_timer);
void __golang runtime__ptr_timers_cleanHead(_ptr_runtime_timers);
retval_1054DC0 __golang runtime__ptr_timers_take(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 *a9);
runtime_timers *__golang runtime__ptr_timers_adjust(runtime_timers *result, int64 a2, char a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_10551E0 __golang runtime__ptr_timers_check(_ptr_runtime_timers a1, int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
int64 __golang runtime__ptr_timers_run(_ptr_runtime_timers, int64);
volatile signed __int8 *__golang runtime__ptr_timer_unlockAndRun(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_timeSleepUntil(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime__ptr_timers_siftUp(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
_QWORD *__golang runtime__ptr_timers_siftDown(_QWORD *result, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, _QWORD *a9);
void __golang runtime__ptr_timers_initHeap(_ptr_runtime_timers);
void __golang runtime__ptr_timer_maybeRunChan(_ptr_runtime_timer);
volatile signed __int8 *__golang runtime__ptr_timer_maybeRunChan_func1(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang runtime_blockTimerChan(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang runtime_unblockTimerChan(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang runtime_traceAdvance_func6(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime_traceAdvance_forEachP_func7(); weak
void __golang runtime_traceAdvance_func4(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang runtime_traceAdvance_func3(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, _QWORD *a9);
void __golang runtime_traceAdvance_func1(__int64 (*a1)(void), __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
signed __int64 __golang runtime_traceAdvance_func1_1(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 (*__golang runtime_traceRegisterLabelsAndReasons(__int64 (*result)(void)))(void);
// __int64 __golang runtime_traceReader(_QWORD, _QWORD, _QWORD); weak
void __golang runtime__ptr_traceAdvancerState_stop(__int64 *a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang runtime__ptr_wakeableSleep_wake(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang runtime__ptr_wakeableSleep_close(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_SpanAlloc(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_SpanFree(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_HeapObjectAlloc(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_HeapObjectFree(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_GoroutineStackAlloc(__int64 a1, unsigned __int64 a2, __int64 a3, unsigned __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_GoroutineStackFree(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
_BYTE *__golang runtime__ptr_unwinder_initAt(_BYTE *a1, __int64 a2, _QWORD *a3, __int64 a4, unsigned __int64 *a5, unsigned int *a6, unsigned int *a7, unsigned __int64 a8, __int64 a9);
_BYTE *__golang runtime__ptr_unwinder_resolveInternal(_BYTE *result, __int64 a2, char a3, __int64 a4, __int64 a5);
// __int64 __golang runtime__ptr_unwinder_next(_QWORD); weak
__int64 __golang runtime__ptr_unwinder_finishInternal(__int64 result);
unsigned int *__golang runtime__ptr_unwinder_symPC(unsigned int **a1);
__int64 __golang runtime__ptr_unwinder_cgoCallers(_QWORD *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8);
signed __int64 __golang runtime_tracebackPCs(unsigned int **a1, __int64 a2, __int64 a3, unsigned __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8);
__int64 __golang runtime_printArgs(__int64 result, _QWORD *a2, __int64 a3, unsigned __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_1058380 __golang runtime_funcNamePiecesForPrint(const __m128i *a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime_printFuncName(_QWORD, _QWORD); weak
__int64 __golang runtime_printcreatedby(_QWORD *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, unsigned int *a6, unsigned int *a7, unsigned __int64 a8, __int64 a9);
// __int64 __fastcall runtime_printcreatedby1(_QWORD, _QWORD, _QWORD, _QWORD); weak
__int64 __golang runtime_tracebacktrap(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
// __int64 __golang runtime_traceback1(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
retval_1058C20 __golang runtime_traceback1_func1(unsigned __int8 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, unsigned int *a7, unsigned __int64 a8, __int64 a9);
retval_1058DC0 __golang runtime_traceback2(__int64 a1, unsigned __int8 a2, __int64 a3, __int64 a4);
// __int64 __golang runtime_traceback2_func1(); weak
signed __int64 __golang runtime_callers_func1(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, unsigned __int64 a8, __int64 a9);
signed __int64 __golang runtime_gcallers(unsigned __int64 *a1, __int64 a2, __int64 a3, unsigned __int64 a4, __int64 a5, __int64 a6, unsigned int *a7, unsigned __int64 a8, __int64 a9);
// __int64 __golang runtime_showframe(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
__int64 __golang runtime_showfuncinfo(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_isExportedRuntime(_QWORD *a1, __int64 a2, __int64 a3, int a4, __int64 a5, int a6, int a7, int a8, int a9);
__int64 __golang runtime_goroutineheader(_QWORD *a1);
__int64 __golang runtime_tracebackothers(_QWORD *a1);
__int64 __golang runtime_tracebackothers_func1(__int64 result, __int64 a2, __int64 a3, __int64 a4, __int64 a5, unsigned int *a6, unsigned int *a7, unsigned __int64 a8, __int64 a9);
__int64 __golang runtime_tracebackHexdump(unsigned __int64 a1, unsigned __int64 a2, __int64 a3, __int64 (__golang *a4)(char **));
// __int64 __golang runtime_tracebackHexdump_func1(); weak
bool __golang runtime_isSystemGoroutine(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, unsigned int *a6, unsigned int *a7, unsigned __int64 a8, __int64 a9);
// __int64 __golang runtime_printOneCgoTraceback(_QWORD, _QWORD, _QWORD); weak
// __int64 __golang runtime_callCgoSymbolizer(_QWORD); weak
// __int64 __golang runtime_cgoContextPCs(_QWORD); weak
retval_105AD60 __golang runtime_traceWriter_event(__int64 a1, __int64 a2, __int64 a3, __int64 a4, char a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceWriter_ensure(__int64 result, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_105AFE0 __golang runtime_traceWriter_flush(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang runtime_traceWriter_flush_func1(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_105B0C0 __golang runtime_traceWriter_refill(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime_traceWriter_refill_func1(); weak
__int64 __golang runtime__ptr_traceBuf_varintAt(__int64 result, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
char __golang runtime_traceBufFlush(_QWORD *a1, char a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang runtime_traceStopReadCPU(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceReadCPU(__int64 a1, double a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8);
__int64 (*__golang runtime_traceCPUFlush(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9))(void);
void __golang runtime_traceCPUFlush_func1(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
signed __int64 __golang runtime_traceCPUSample(signed __int64 result, __int64 a2, int *a3, __int64 a4, __int64 a5, __int64 a6);
retval_105C160 __golang runtime_traceLocker_eventWriter(__int64 a1, unsigned __int64 a2, unsigned __int8 a3, unsigned __int8 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceEventWriter_event(__int64 a1, __int64 a2, char a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_startPC(__int64 a1, __int64 a2, void *a3, __int64 a4, __int64 a5, unsigned int *a6, unsigned int *a7, unsigned __int64 a8, __int64 a9);
retval_105C620 __golang runtime__ptr_traceMap_put(volatile signed __int64 *a1, const __m128i *a2, unsigned __int64 a3);
_QWORD *__golang runtime__ptr_traceMap_newTraceMapNode(__int64 a1, const __m128i *a2, unsigned __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime__ptr_traceMap_reset(volatile __int64 *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime__ptr_traceRegionAlloc_alloc(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime__ptr_traceRegionAlloc_drop(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_105CB60 __golang runtime_traceLockInit(); // weak
__int64 runtime_traceAllocFreeEnabled(void); // weak
retval_105CBA0 runtime_traceAcquire();
retval_105CBC0 __golang runtime_traceAcquireEnabled();
retval_105CC60 __golang runtime_traceLocker_ok(__int64 a1, __int64 a2);
__int64 __golang runtime_traceRelease(__int64 result);
__int64 __golang runtime_traceLocker_Gomaxprocs(__int64 a1, unsigned __int64 a2, int a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_ProcStart(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_ProcStop(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_GCActive(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_GCStart(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_GCDone(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_STWStart(__int64 a1, unsigned __int64 a2, unsigned __int8 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_STWDone(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_105D220 __golang runtime_traceLocker_GCSweepStart(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_GCSweepSpan(__int64 result, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_GCSweepDone(__int64 result, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_GCMarkAssistStart(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_GCMarkAssistDone(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_GoCreate(__int64 a1, unsigned __int64 a2, __int64 a3, void *a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_GoStart(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_GoEnd(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_GoStop(__int64 a1, unsigned __int64 a2, unsigned __int8 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_GoPark(__int64 a1, unsigned __int64 a2, unsigned __int8 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_GoUnpark(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4);
unsigned __int64 __golang runtime_traceLocker_emitUnblockStatus(__int64 a1, __int64 a2, __int64 a3, unsigned __int64 a4);
__int64 __golang runtime_traceLocker_GoSysCall(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_GoSysExit(__int64 a1, unsigned __int64 a2, char a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_ProcSteal(__int64 a1, unsigned __int64 a2, int *a3, char a4, __int64 a5, __int64 a6, __int64 a7);
__int64 __golang runtime_traceLocker_HeapAlloc(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_HeapGoal(__int64 a1, unsigned __int64 a2, __int64 a3);
__int64 __golang runtime_traceLocker_GoCreateSyscall(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceLocker_GoDestroySyscall(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
signed __int64 __golang runtime_traceThreadDestroy(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang runtime_traceThreadDestroy_func1(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceStack(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, unsigned __int64 a8, __int64 a9);
// __int64 __golang runtime__ptr_traceStackTable_put(_QWORD, _QWORD, _QWORD, _QWORD); weak
__int64 __golang runtime__ptr_traceStackTable_dump(__int64 *a1, __int64 (*a2)(void));
__int64 __golang runtime_dumpStacksRec(__int64 a1, __int64 a2, __int64 (*a3)(void), __int64 a4, __int64 a5, __m128i *a6, __int64 a7, unsigned __int64 a8, int a9);
retval_105F120 __golang runtime_makeTraceFrames(__int64 (*a1)(void), uintptr *a2, size_t a3, size_t a4);
retval_105F3C0 __golang runtime_makeTraceFrame(__int64 (*a1)(void), __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, __int64 a11, const __m128i *a12, __int64 a13, const __m128i *a14, __int64 a15, __int64 a16);
__int64 __golang runtime_fpunwindExpand(__m128i *a1, __int64 a2, __int64 a3, unsigned __int64 *a4, __int64 a5, __int64 a6, __int64 a7, unsigned __int64 a8, __int64 a9);
__int64 __golang runtime_startPCForTrace(void *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, unsigned int *a6, unsigned int *a7, unsigned __int64 a8, __int64 a9);
retval_105F880 __golang runtime_traceWriter_writeGoStatus(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, unsigned __int8 a7, char a8, __int64 a9);
retval_105F9A0 __golang runtime_traceWriter_writeProcStatusForP(__int64 r0, unsigned __int64 r1, __int64 r2, __int64 a4, int *a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_105FB00 __golang runtime_traceWriter_writeProcStatus(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, unsigned __int8 a6, char a7, __int64 a8, __int64 a9);
__int64 __golang runtime_goStatusToTraceGoStatus(int a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime__ptr_traceStringTable_put(__int64 a1, __int64 (*a2)(void), const __m128i *a3, unsigned __int64 a4);
// __int64 __golang runtime__ptr_traceStringTable_put_func1(); weak
void __golang runtime__ptr_traceStringTable_writeString(__int64 a1, __int64 a2, unsigned __int64 a3, const __m128i *a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime__ptr_traceStringTable_reset(__int64 a1, __int64 (*a2)(void), __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang runtime__ptr_traceStringTable_reset_func1(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
unsigned __int64 __golang runtime_traceFrequency(__int64 (*a1)(void), __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang runtime_traceFrequency_func1(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_1060340 __golang runtime__ptr_traceTypeTable_put(volatile signed __int64 *a1, __int64 r1);
__int64 __golang runtime__ptr_traceTypeTable_dump(__int64 *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_dumpTypesRec(__int64 a1, __int64 a2, __int64 a3, unsigned __int8 a4, __int64 a5, int a6, int a7, int a8, int a9);
// retval_1060920 __golang runtime_rtype_string(_QWORD); weak
__int64 (*__golang runtime_getGCMaskOnDemand(__int64 (*a1)(void), int a2, __int64 (*a3)(void), __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9))(void);
unsigned __int64 *__golang runtime_getGCMaskOnDemand_func1(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, unsigned __int64 *a7, unsigned __int64 a8, unsigned __int64 a9);
_BYTE *__golang runtime_bitCursor_write(__int64 a1, unsigned __int64 a2, unsigned __int8 *a3, unsigned __int64 a4);
unsigned __int64 *__golang runtime_buildGCMask(unsigned __int64 *result, __int64 a2, unsigned __int64 a3, __int64 a4, __int64 a5, __int64 a6, unsigned __int64 *a7, unsigned __int64 a8, unsigned __int64 a9);
// __int64 __golang runtime_resolveNameOff(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// __int64 __golang runtime_resolveTypeOff(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64); weak
// __int64 __golang runtime_rtype_textOff(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
retval_1061580 __golang runtime_pkgPath(_BYTE *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, int a8, int a9);
void runtime_typelinksinit();
__int64 __golang runtime_typesEqual(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// void __golang __noreturn runtime_panicunsafestringlen(_QWORD); weak
// void __noreturn runtime_panicunsafestringnilptr(void); weak
// void __golang __noreturn runtime_panicunsafeslicelen(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
// void __golang __noreturn runtime_panicunsafeslicenilptr(_QWORD, _QWORD, _QWORD); weak
// retval_1062A40 __golang runtime_decoderune(_QWORD, _QWORD); weak
retval_1062D60 runtime_printCgoTraceback_func1();
void __golang runtime_traceAdvance_func2(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_traceAdvance_func5(int *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_schedtrace_func1(__int64 a1);
// __int64 __golang runtime_injectglist_func1(_QWORD); weak
void __golang __noreturn runtime_casgstatus_func2(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_init_6_func1(); // weak
__int64 runtime__ptr_scavengerState_init_func4(); // weak
__int64 __golang runtime_gcResetMarkState_func1(__int64 result);
__int64 __golang runtime_gcBgMarkWorker_func1(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6);
void __golang runtime_gcMarkTermination_func4(__int64 a1);
// __int64 __golang runtime_gcMarkTermination_func4_1(); weak
void __golang runtime_gcMarkDone_func1(runtime_gcWork *a1, __int64 a2, __int64 a3, int a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_debugCallWrap1_func1(_QWORD *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_debugCallWrap_func2(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime_nilinterhash(_QWORD, _QWORD); weak
__int64 __golang runtime_typehash(__int64 a1, __m128i *a2, unsigned __int64 a3);
__int64 __golang runtime_atomicwb(_QWORD *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_1064E00 __golang internal_runtime_atomic_storePointer(volatile __int64 *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
bool __golang internal_runtime_atomic_casPointer(volatile signed __int64 *a1, signed __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_1064EA0 __golang sync_atomic_StorePointer(volatile __int64 *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang sync_atomic_SwapPointer(volatile __int64 *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
bool __golang sync_atomic_CompareAndSwapPointer(volatile signed __int64 *a1, signed __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_cgocall(__int64 (__fastcall *a1)(__int64), __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang reflect_chanlen(_QWORD *a1);
__int64 __golang runtime_getitab(__int64 a1, abi_Type *a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime_convT64(_QWORD, _QWORD); weak
// __int64 __golang runtime_convTstring(_QWORD); weak
// __int64 __golang runtime_convTslice(_QWORD, _QWORD, _QWORD); weak
__int64 *runtime_getStaticuint64s();
__int64 *__golang runtime_mallocgc(__int64 (*a1)(void), unsigned __int64 a2, __int64 a3, void (__golang *a4)(), __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 *a9, double a10);
// __int64 __golang internal_runtime_maps_newobject(_QWORD); weak
// __int64 reflect_unsafe_New(void); weak
// __int64 runtime_newarray(void); weak
__int64 __golang internal_runtime_maps_newarray(_QWORD, _QWORD); // weak
retval_1065820 __golang internal_runtime_maps_mapKeyError(__int64 a1, _QWORD *a2);
// __int64 __golang runtime_makemap_small(_QWORD); weak
_QWORD *__golang runtime_makemap(__int64 a1, signed __int64 a2, _QWORD *a3);
__int64 __golang reflect_maplen(__int64 a1);
// __int64 __golang runtime_typedmemmove(_QWORD, _QWORD, _QWORD); weak
__int64 __golang reflect_typedmemmove(__int64 a1, __int64 a2, __int64 a3);
__int64 __golang internal_runtime_maps_typedmemmove(_QWORD, _QWORD, _QWORD); // weak
// __int64 __golang runtime_typedslicecopy(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
__int64 __golang reflect_typedmemclr(__int64 a1, __int64 a2);
__int64 __golang runtime_memclrHasPointers(_OWORD *a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, _QWORD *a9);
// retval_1065B60 __golang runtime_findObject(_QWORD, _QWORD, _QWORD); weak
// __int64 __golang reflect_verifyNotInHeapPtr(_QWORD); weak
__int64 __golang internal_godebug_registerMetric(const __m128i *a1, unsigned __int64 a2, __int64 a3);
__int64 __golang runtime_blockevent(__int64 a1, __int64 a2);
__int64 __golang sync_event(__int64 result, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 internal_poll_runtime_pollServerInit(); // weak
retval_1066080 __golang internal_poll_runtime_pollOpen(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang internal_poll_runtime_pollClose(runtime_pollDesc *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang internal_poll_runtime_pollReset(__int64 a1, __int64 a2);
__int64 __golang internal_poll_runtime_pollWait(__int64 a1, __int64 a2);
__int64 __golang internal_poll_runtime_pollUnblock(runtime_pollDesc *a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// retval_10665E0 __golang runtime_gopanic(_QWORD, _QWORD); weak
void __golang sync_fatal(__int64 (*a1)(void), __int64 (*a2)(void));
void __golang internal_runtime_maps_fatal(__int64 (*a1)(void), __int64 (*a2)(void));
void __golang __noreturn internal_sync_throw(__int64 (*a1)(void), __int64 (*a2)(void), __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang internal_sync_fatal(__int64 (*a1)(void), __int64 (*a2)(void));
__int64 __golang runtime_throw(__int64 (*a1)(void), __int64 (*a2)(void), __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang __noreturn runtime_gopark(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, _QWORD *a9);
// __int64 __golang runtime_wakep(_QWORD); weak
unsigned __int64 __golang runtime_entersyscall(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, char a10);
__int64 __golang runtime_entersyscallblock(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, char a10);
bool __golang runtime_exitsyscall(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, char a10);
__int64 __golang sync_runtime_procUnpin(); // weak
_BOOL8 __golang internal_sync_runtime_canSpin(__int64 a1);
__int64 __golang internal_sync_runtime_doSpin(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_rand(_QWORD, _QWORD); // weak
__int64 internal_runtime_maps_rand(void); // weak
retval_1067380 __golang syscall_runtime_envs(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, int a7, int a8, int a9);
retval_1067440 __golang os_runtime_args(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, int a7, int a8, int a9);
__int64 __golang internal_godebug_setUpdate(__int64 a1);
retval_1067580 __golang internal_godebug_setNewIncNonDefault(__int64 a1);
__int64 __golang runtime_debug_SetTraceback(__int64 a1, __int64 a2);
// __int64 __golang reflect_resolveNameOff(_QWORD, _QWORD); weak
// __int64 __golang reflect_resolveTypeOff(_QWORD, _QWORD); weak
__int64 __golang reflect_resolveTextOff(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9);
__int64 __golang reflect_addReflectOff(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_1067980 __golang internal_poll_runtime_Semacquire(__int64 a1);
__int64 __golang sync_runtime_Semrelease(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9);
retval_1067A00 __golang internal_sync_runtime_SemacquireMutex(__int64 a1, __int64 a2, __int64 a3);
retval_1067A60 __golang sync_runtime_SemacquireRWMutexR(__int64 a1, __int64 a2, __int64 a3);
__int64 __golang internal_poll_runtime_Semrelease(int a1, __int64 a2, __int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
__int64 __golang internal_sync_runtime_Semrelease(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9);
__int64 __golang sync_runtime_notifyListCheck(__int64 result);
__int64 __golang internal_sync_runtime_nanotime(__int64 a1);
unsigned __int64 __golang os_sigpipe(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __noreturn runtime_sigpanic(void); // weak
// __int64 __golang runtime_makeslice(_QWORD, _QWORD); weak
// retval_1068120 __golang runtime_growslice(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
void __golang runtime_morestackc(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_10688E0 __golang runtime_gostring(const __m128i *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
char __golang reflect_memmove(__m128i *a1, const __m128i *a2, unsigned __int64 a3);
char __golang runtime_moduledataverify1(unsigned int **a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, unsigned int a6, unsigned int *a7, int a8, int a9);
retval_1069200 __golang runtime_findfunc(void *a1, __int64 j, __int64 a3, __int64 a4, __int64 a5, unsigned int *textsectionmap, unsigned int *a7, unsigned __int64 a8, __int64 a9);
retval_10693A0 __golang runtime_funcline1(unsigned int *a1, _QWORD *a2, unsigned __int64 a3, char a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_10694A0 __golang runtime_newInlineUnwinder(__int64 a1, _QWORD *a2, unsigned __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_1069560 __golang syscall_syscall(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_1069600 __golang syscall_syscallX(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_10696A0 __golang syscall_syscall6(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_1069760 __golang syscall_syscall6X(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_1069820 __golang syscall_syscallPtr(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_10698C0 __golang syscall_rawSyscall(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __golang runtime_exit(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, char); weak
// retval_1069980 __golang runtime_walltime(); weak
// __int64 __golang runtime_fcntl(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD); weak
retval_1069A60 __golang time_runtimeNow();
__int64 __golang time_runtimeNano(__int64 a1);
// __int64 __golang runtime_write(_QWORD, _QWORD, _QWORD); weak
retval_1069B80 time_now();
__int64 __golang runtime_traceAdvance(unsigned __int8 a1);
// __int64 __golang runtime_callers(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
__int64 __golang runtime_mapinitnoop(_QWORD); // weak
__int64 __golang gogo(__int64 a1, __int64 a2);
__int64 __golang callRet(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, int a6, int a7, int a8, int a9);
void __golang gosave_systemstack_switch(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, char a10);
void __golang setg_gcc(__int64 a1, __int64 a2, __int64 a3, unsigned __int64 a4);
unsigned __int64 __golang aeshashbody(const __m128i *a1, unsigned __int64 a2, unsigned __int64 a3);
// unsigned __int64 __usercall __spoils<rdx,rcx,rbx,rdi,rsi,r8,r9,r10,r12,r13,xmm0,xmm1,xmm2,xmm3,xmm4,xmm5,xmm6,xmm7,xmm8,xmm9,xmm10,xmm11,xmm12,xmm13,xmm14> gcWriteBarrier@<r11>();
void __gostk debugCall32(char a1);
void __gostk debugCall64(char a1);
void __gostk debugCall128(char a1);
void __gostk debugCall256(char a1);
void __gostk debugCall512(char a1);
void __gostk debugCall1024(char a1);
void __gostk debugCall2048(char a1);
void __gostk debugCall4096(char a1);
void __gostk debugCall8192(char a1);
void __gostk debugCall16384(char a1);
void __gostk debugCall32768(char a1);
void __gostk debugCall65536(char a1);
__int64 runtime_asminit(void); // weak
__int64 runtime_mstart(void); // weak
__int64 __golang runtime_gogo(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10);
void __golang __noreturn runtime_mcall(void (__golang **rax0)(_QWORD *), __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a1);
void __noreturn runtime_systemstack_switch(); // weak
unsigned __int64 __golang runtime_systemstack(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 (**a10)(void));
void __golang __noreturn runtime_switchToCrashStack0(__int64 (__fastcall **a1)(__int64, __int64, _QWORD), __int64 a2, __int64 a3, __int64 a4, __int64 a5);
void __golang __noreturn runtime_morestack(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, unsigned int *a6, unsigned int *a7, unsigned __int64 a8, __int64 a9, __int64 a10, char a11);
void __golang __noreturn runtime_morestack_noctxt(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, unsigned int *a6, unsigned int *a7, unsigned __int64 a8, __int64 a9);
__int64 __golang runtime_spillArgs(__int64 result, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, double a17, double a18, double a19, double a20, double a21, double a22, double a23, double a24);
retval_106B760 __golang runtime_unspillArgs();
__int64 __golang runtime_reflectcall(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, retval_106BA60 (__golang **a11)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double), const void *a12, __int64 a13, __int64 a14, __int64 a15);
__int64 __golang runtime_call16(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, retval_106BA60 (__golang **a11)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double), const void *a12, unsigned int a13, unsigned int a14);
__int64 __golang runtime_call32(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, retval_106BB00 (__golang **a11)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double), const void *a12, unsigned int a13, unsigned int a14);
__int64 __golang runtime_call64(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, retval_106BBA0 (__golang **a11)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double), const void *a12, unsigned int a13, unsigned int a14);
__int64 __golang runtime_call128(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, retval_106BC55 (__golang **a11)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double), const void *a12, unsigned int a13, unsigned int a14);
__int64 __golang runtime_call256(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, retval_106BD1B (__golang **a11)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double), const void *a12, unsigned int a13, unsigned int a14);
__int64 __golang runtime_call512(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, retval_106BDFB (__golang **a11)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double), const void *a12, unsigned int a13, unsigned int a14);
__int64 __golang runtime_call1024(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, retval_106BEDB (__golang **a11)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double), const void *a12, unsigned int a13, unsigned int a14);
__int64 __golang runtime_call2048(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, retval_106BFBB (__golang **a11)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double), const void *a12, unsigned int a13, unsigned int a14);
__int64 __golang runtime_call4096(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, retval_106C0A3 (__golang **a11)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double), const void *a12, unsigned int a13, unsigned int a14);
__int64 __golang runtime_call8192(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, retval_106C183 (__golang **a11)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double), const void *a12, unsigned int a13, unsigned int a14);
__int64 __golang runtime_call16384(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, retval_106C263 (__golang **a11)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double), const void *a12, unsigned int a13, unsigned int a14);
__int64 __golang runtime_call32768(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, retval_106C343 (__golang **a11)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double), const void *a12, unsigned int a13, unsigned int a14);
__int64 __golang runtime_call65536(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, retval_106C423 (__golang **a11)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double), const void *a12, unsigned int a13, unsigned int a14);
__int64 __golang runtime_call131072(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, retval_106C503 (__golang **a11)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double), const void *a12, unsigned int a13, unsigned int a14);
__int64 __golang runtime_call262144(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, retval_106C5E3 (__golang **a11)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double), const void *a12, unsigned int a13, unsigned int a14);
__int64 __golang runtime_call524288(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, retval_106C6C3 (__golang **a11)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double), const void *a12, unsigned int a13, unsigned int a14);
__int64 __golang runtime_call1048576(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64, __int64, __int64, _DWORD, _DWORD, __int64, __int64); // weak
__int64 __golang runtime_call2097152(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64, __int64, __int64, _DWORD, _DWORD, __int64, __int64); // weak
__int64 __golang runtime_call4194304(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64, __int64, __int64, _DWORD, _DWORD, __int64, __int64); // weak
__int64 __golang runtime_call8388608(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64, __int64, __int64, _DWORD, _DWORD, __int64, __int64); // weak
__int64 __golang runtime_call16777216(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64, __int64, __int64, _DWORD, _DWORD, __int64, __int64); // weak
__int64 __golang runtime_call33554432(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64, __int64, __int64, _DWORD, _DWORD, __int64, __int64); // weak
__int64 __golang runtime_call67108864(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64, __int64, __int64, _DWORD, _DWORD, __int64, __int64); // weak
__int64 __golang runtime_call134217728(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64, __int64, __int64, _DWORD, _DWORD, __int64, __int64); // weak
__int64 __golang runtime_call268435456(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64, __int64, __int64, _DWORD, _DWORD, __int64, __int64); // weak
__int64 __golang runtime_call536870912(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64, __int64, __int64, _DWORD, _DWORD, __int64, __int64); // weak
__int64 __golang runtime_call1073741824(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64, __int64, __int64, _DWORD, _DWORD, __int64, __int64); // weak
__int64 __golang runtime_procyield(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, int a10);
__int64 __golang runtime_publicationBarrier(_QWORD); // weak
__int64 __golang runtime_asmcgocall_no_g(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 (__fastcall *a10)(__int64, __int64, _QWORD *, __int64), __int64 a11);
__int64 __golang runtime_asmcgocall_landingpad(__int64 (__fastcall *a1)(__int64), __int64 a2);
retval_106D180 __golang runtime_asmcgocall(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 (__fastcall *a10)(__int64), __int64 a11);
void __gostk runtime_setg(unsigned __int64 a1);
void __golang __noreturn runtime_abort(_QWORD); // weak
retval_106D280 __golang runtime_cputicks(unsigned __int64 a1);
unsigned __int64 __golang runtime_memhash(const __m128i *a1, unsigned __int64 a2, unsigned __int64 a3);
unsigned __int64 __golang runtime_strhash(__int64 a1, unsigned __int64 a2);
__int64 __golang runtime_memhash32(unsigned int *a1, __int64 a2);
__int64 __golang runtime_memhash64(signed __int64 *a1, unsigned __int64 a2);
bool __gostk runtime_checkASM();
__int64 runtime_return0(void); // weak
void __golang __noreturn runtime_goexit(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __noreturn runtime_sigpanic0(); // weak
void runtime_gcWriteBarrier1();
void runtime_gcWriteBarrier2();
void runtime_gcWriteBarrier3();
void runtime_gcWriteBarrier4();
void runtime_gcWriteBarrier5();
void runtime_gcWriteBarrier6();
void runtime_gcWriteBarrier7();
void runtime_gcWriteBarrier8();
retval_106D500 __golang runtime_debugCallV2(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_debugCallPanicked(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, __int64 a11);
void __golang __noreturn runtime_panicIndex(int64 a1, _QWORD a2, signed __int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
void __golang __noreturn runtime_panicIndexU(int64 a1, __int64 a2, signed __int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
void __golang __noreturn runtime_panicSliceAlen(__int64 a1, __int64 a2, int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
void __golang __noreturn runtime_panicSliceAlenU(__int64 a1, __int64 a2, int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
void __golang __noreturn runtime_panicSliceAcap(__int64 a1, __int64 a2, int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
void __golang __noreturn runtime_panicSliceAcapU(__int64 a1, __int64 a2, int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
void __golang __noreturn runtime_panicSliceB(int64 a1, __int64 a2, signed __int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
void __golang __noreturn runtime_panicSliceBU(int64 a1, __int64 a2, signed __int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
void __golang __noreturn runtime_panicSlice3Alen(__int64 a1, signed __int64 a2, __int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
void __golang __noreturn runtime_panicSlice3C(int64 a1, __int64 a2, signed __int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
__int64 runtime_getfp(void); // weak
// _OWORD *__usercall runtime_duffzero@<rdi>();
retval_106DAA0 __golang runtime_duffcopy(__int64 a1, __int64 a2, __int64 a3, _OWORD *a4, __int128 *a5);
__int64 __golang runtime_memclrNoHeapPointers(_OWORD *a1, unsigned __int64 _RBX, double _XMM0_8);
char __golang runtime_memmove(__m128i *a1, const __m128i *a2, unsigned __int64 a3);
void __golang __noreturn runtime_asyncPreempt(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_106EA20 __golang runtime_sigprofNonGoWrapper(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __golang __noreturn runtime_exit_trampoline(__int64 a1, __int64 a2, __int64 a3, int *a4);
int __golang runtime_open_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
ssize_t __golang runtime_write_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
int __golang runtime_madvise_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
uint64_t runtime_nanotime_trampoline();
int __fastcall runtime_walltime_trampoline(timespec *__tp);
int __golang runtime_sigaction_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
int __golang runtime_sigprocmask_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
int __golang runtime_sigaltstack_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
int runtime_raiseproc_trampoline();
__int64 __golang runtime_sigfwd(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 (__fastcall *a10)(_QWORD, __int64, __int64), unsigned int a11, __int64 a12, __int64 a13);
void __golang runtime_sigtramp(__int64 a1, __int64 a2, __int64 a3, unsigned int a4, __int64 a5);
void __golang runtime_cgoSigtramp(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5);
void *__golang runtime_mmap_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
int __golang runtime_munmap_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
int __golang runtime_usleep_trampoline(__int64 a1, __int64 a2, __int64 a3, useconds_t *a4);
void runtime_settls();
int __golang runtime_sysctl_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
int runtime_kqueue_trampoline();
int __golang runtime_kevent_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
int __golang runtime_fcntl_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
retval_106EFC0 __golang runtime_mstart_stub(__int64 a1, __int64 a2, __int64 a3, unsigned __int64 *a4);
int __golang runtime_pthread_attr_init_trampoline(__int64 a1, __int64 a2, __int64 a3, pthread_attr_t **a4);
int __golang runtime_pthread_attr_getstacksize_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
int __golang runtime_pthread_attr_setdetachstate_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
int __golang runtime_pthread_create_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
int __golang runtime_raise_trampoline(__int64 a1, __int64 a2, __int64 a3, int *a4);
int __golang runtime_pthread_mutex_init_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
int __golang runtime_pthread_mutex_lock_trampoline(__int64 a1, __int64 a2, __int64 a3, pthread_mutex_t **a4);
int __golang runtime_pthread_mutex_unlock_trampoline(__int64 a1, __int64 a2, __int64 a3, pthread_mutex_t **a4);
int __golang runtime_pthread_cond_init_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
int __golang runtime_pthread_cond_wait_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
int __golang runtime_pthread_cond_timedwait_relative_np_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
int __golang runtime_pthread_cond_signal_trampoline(__int64 a1, __int64 a2, __int64 a3, pthread_cond_t **a4);
pthread_t runtime_pthread_self_trampoline();
int __golang runtime_pthread_kill_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
xpc_object_t runtime_osinit_hack_trampoline();
void __golang runtime_arc4random_buf_trampoline(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
__int64 __golang runtime_syscall(__int64 a1, __int64 a2, __int64 a3, _QWORD *a4);
__int64 __golang runtime_syscallX(__int64 a1, __int64 a2, __int64 a3, _QWORD *a4);
__int64 __golang runtime_syscallPtr(__int64 a1, __int64 a2, __int64 a3, _QWORD *a4);
__int64 __golang runtime_syscall6(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
__int64 __golang runtime_syscall6X(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
int runtime_issetugid_trampoline();
string __golang runtime__ptr_lockRank_String(_ptr_runtime_lockRank);
string __golang runtime__ptr_plainError_Error(_ptr_runtime_plainError);
string __golang runtime__ptr_waitReason_String(_ptr_runtime_waitReason);
string __golang runtime__ptr_errorString_Error(_ptr_runtime_errorString);
string __golang runtime__ptr_errorAddressString_Error(_ptr_runtime_errorAddressString);
string __golang runtime__ptr_boundsError_Error(_ptr_runtime_boundsError);
__int64 __golang runtime_metricReader_compute_fm(__int64 a1, _QWORD *a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10);
__int64 __golang runtime__ptr_itabTableType_add_fm(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10);
unsigned __int128 __golang runtime_debugCallCheck_0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10);
void __golang __noreturn runtime_debugCallWrap_0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 (*a10)(void));
__int64 __golang runtime_reflectcallmove_0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, int a6, int a7, int a8, int a9, __int64 a10, __int64 a11, __int64 a12, __int64 a13, __int64 a14);
unsigned __int64 __golang runtime_wbBufFlush_0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 runtime_osinit_0(); // weak
void __golang __noreturn runtime_asyncPreempt2_0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
void __gostk __noreturn runtime_badmcall_0(__int64 a1);
void __gostk __noreturn runtime_badmcall2_0(__int64 a1);
void __noreturn runtime_badreflectcall_0(void); // weak
void __golang __noreturn runtime_badmorestackg0_0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, int a6, int a7, int a8, int a9);
__int64 runtime_badmorestackgsignal_0(void); // weak
void runtime_schedinit_0();
__int64 runtime_mstart0_0(void); // weak
void __golang __noreturn runtime_goexit1_0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
unsigned __int64 __golang runtime_newproc_0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 (*a10)(void));
__int64 __golang runtime_args_0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, unsigned int a10, __int64 a11);
void __golang __noreturn runtime_check_0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_sigprofNonGo_0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, unsigned int a10, __int64 a11, __int64 a12);
__int64 __golang runtime_newstack_0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, unsigned int *a6, unsigned int *a7, unsigned __int64 a8, __int64 a9);
void __golang __noreturn runtime_morestackc_0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __golang runtime_badsystemstack_0(_QWORD, _QWORD, _QWORD, _QWORD); // weak
__int64 __golang runtime_reflectcall_0(__int64 a1, retval_106BA60 (__golang **a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double), const void *a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, char a10);
__int64 __golang runtime_asmcgocall_0(__int64 (__fastcall *a1)(__int64), __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_106FC20 __golang runtime_fcntl_0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9);
unsigned int __gostk runtime_write_0(__int64 a1, __int64 a2, unsigned int a3);
bool __golang type__eq_runtime_Frame(__int64 a1, __int64 a2);
bool __golang type__eq_runtime_modulehash(__int64 a1, __int64 a2);
bool __golang type__eq_runtime_bitvector(__int64 a1, __int64 a2);
bool __golang type__eq_runtime__func(const __m128i *a1, const __m128i *a2);
__int64 type__eq_runtime_PanicNilError(); // weak
bool __golang type__eq_runtime_boundsError(__int64 a1, __int64 a2);
bool __golang type__eq_runtime__panic(__int64 a1, __int64 a2);
bool __golang type__eq_runtime_mcache(const __m128i *a1, const __m128i *a2);
bool __golang type__eq_runtime_mspan(__int64 a1, __int64 a2);
bool __golang type__eq_runtime_mSpanList(_QWORD *a1, _QWORD *a2);
bool __golang type__eq_runtime_gcBits(_BYTE *a1, _BYTE *a2);
bool __golang type__eq_runtime_special(__int64 a1, __int64 a2);
bool __golang type__eq_struct__runtime_gList_runtime_n_int32_(__int64 a1, __int64 a2);
bool __golang type__eq_runtime_hchan(__int64 a1, __int64 a2);
bool __golang type__eq_runtime_pTraceState(const __m128i *a1, const __m128i *a2);
__int64 __golang type__eq_runtime_traceSchedResourceState(const __m128i *a1, const __m128i *a2);
__int64 type__eq_runtime_notInHeap(); // weak
bool __golang type__eq_runtime_limiterEvent(_QWORD *a1, _QWORD *a2);
bool __golang type__eq_runtime_gcWork(const __m128i *a1, const __m128i *a2);
bool __golang type__eq_runtime_workbuf(const __m128i *a1, const __m128i *a2);
bool __golang type__eq_runtime_mTraceState(const __m128i *a1, const __m128i *a2);
bool __golang type__eq_runtime_traceBuf(const __m128i *a1, const __m128i *a2);
bool __golang type__eq_runtime_mOS(__int64 a1, __int64 a2);
__int64 __golang type__eq_runtime_gTraceState(const __m128i *a1, const __m128i *a2);
bool __golang type__eq_runtime_errorAddressString(__int64 a1, __int64 a2);
bool __golang type__eq_runtime_untracedG_4(const __m128i *a1, const __m128i *a2);
bool __golang type__eq_runtime_TypeAssertionError(__int64 a1, __int64 a2);
bool __golang type__eq_runtime_piController(__int64 a1, __int64 a2);
bool __golang type__eq__2_runtime_Frame(__int64 a1, __int64 a2);
retval_1070820 __golang sync_atomic__ptr_Uint32_Store(volatile __int32 *a1, __int32 a2);
__int64 __golang sync_atomic_SwapUintptr(volatile __int64 *a1, __int64 a2);
bool __golang sync_atomic_CompareAndSwapUintptr(volatile signed __int64 *a1, signed __int64 a2, signed __int64 a3);
retval_1070880 __golang sync_atomic_StoreUintptr(volatile __int64 *a1, __int64 a2);
bool __golang type__eq_sync_atomic_Bool(_DWORD *a1, _DWORD *a2);
bool __golang type__eq_sync_atomic_Uint32(_DWORD *a1, _DWORD *a2);
bool __golang type__eq_sync_atomic_Uint64(_QWORD *a1, _QWORD *a2);
// string __golang internal_reflectlite_rtype_String(reflectlite_rtype);
// string __golang internal_reflectlite_rtype_Name(reflectlite_rtype);
uintptr __golang internal_reflectlite_elem(reflectlite_rtype a1);
// reflectlite_Type __golang internal_reflectlite_rtype_Elem(reflectlite_rtype);
signed __int64 __golang internal_reflectlite_rtype_Len(reflectlite_rtype);
bool __golang internal_reflectlite_rtype_Comparable(reflectlite_rtype);
bool __golang internal_reflectlite__ptr_rtype_Comparable(_ptr_reflectlite_rtype);
reflectlite_Type __golang internal_reflectlite__ptr_rtype_Elem(_ptr_reflectlite_rtype);
signed __int64 __golang internal_reflectlite__ptr_rtype_Len(_ptr_reflectlite_rtype);
string __golang internal_reflectlite__ptr_rtype_Name(_ptr_reflectlite_rtype);
string __golang internal_reflectlite__ptr_rtype_String(_ptr_reflectlite_rtype);
string __golang errors__ptr_errorString_Error(_ptr_errors_errorString);
__int64 __golang errors_Is(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
__int64 __golang errors_is(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, double a6);
retval_1071260 __golang unicode_utf8_DecodeRune(unsigned __int8 *a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, int a8, int a9);
retval_1071400 __golang unicode_utf8_DecodeRuneInString(unsigned __int8 *a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, int a8, int a9);
retval_10715A0 __golang unicode_utf8_encodeRuneNonASCII(__int64 a1, unsigned __int64 a2, __int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
__int64 __golang unicode_utf8_appendRuneNonASCII(__int64 result, __int64 a2, unsigned __int64 a3, int a4);
// __int64 __golang strconv__ptr_decimal_Assign(_QWORD, _QWORD); weak
// __int64 __golang strconv__ptr_decimal_Shift(_QWORD, _QWORD); weak
// __int64 __golang strconv__ptr_decimal_Round(_QWORD, _QWORD); weak
retval_1071FC0 __golang strconv_genericFtoa(__int64 r0, __int64 a2, unsigned __int64 r2, unsigned __int8 a4, __int64 a5, __int64 a6, double a7);
__int64 __golang strconv_bigFtoa(int a1, int a2, int a3, __int64 a4, unsigned __int8 a5, unsigned __int8 a6, __int64 a7, __int64 a8, _QWORD *a9);
// __int64 __golang strconv_formatDigits(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64, __int64, __int64, __int64, __int64); weak
// __int64 __golang strconv_roundShortest(_QWORD, _QWORD, _QWORD, _QWORD); weak
__int64 __golang strconv_fmtE(__int64 result, __int64 r1, unsigned __int64 r2, char a4, char *a5, __int64 a6, unsigned __int64 a7, __int64 a8, __int64 a9, __int64 a10, char a11);
__int64 __golang strconv_fmtF(__int64 result, __int64 r1, unsigned __int64 r2, unsigned __int64 a4, const __m128i *a5, unsigned __int64 a6, unsigned __int64 a7, __int64 a8, __int64 a9, __int64 a10);
// __int64 __fastcall strconv_fmtB(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
__int64 __golang strconv_fmtX(__int64 r0, __int64 r1, unsigned __int64 r2, __int64 a4, unsigned __int8 a5, char a6, __int64 a7, __int64 a8, _QWORD *a9);
unsigned __int64 __golang strconv_ryuFtoaFixed32(unsigned __int64 result, unsigned int a2, __int64 a3, signed __int64 a4);
unsigned __int64 __golang strconv_ryuFtoaFixed64(unsigned __int64 result, unsigned __int64 a2, __int64 a3, signed __int64 a4);
unsigned __int64 __golang strconv_formatDecimal(char *a1, unsigned __int64 a2, char a3, char *a4, unsigned __int64 a5, int a6, unsigned __int64 a7, const char *a8, int a9);
// __int64 __golang strconv_ryuFtoaShortest(_QWORD, _QWORD, _QWORD, _QWORD); weak
__int64 *__golang strconv_ryuDigits32(__int64 *result, unsigned int a2, unsigned int a3, unsigned int a4, bool a5, __int64 a6, __int64 a7, __int64 a8, int a9);
// retval_10752C0 __golang strconv_mult64bitPow10(_QWORD, _QWORD, _QWORD); weak
// retval_10753A0 __golang strconv_mult128bitPow10(_QWORD, _QWORD, _QWORD); weak
retval_10754C0 __golang strconv_FormatInt(__int64 a1, unsigned __int64 a2, __int64 a3, int a4, int a5, int a6, int a7, int a8, int a9);
retval_10755A0 __golang strconv_formatBits(unsigned __int64 r0, __int64 a2, unsigned __int64 r2, unsigned __int64 a4, unsigned __int64 a5, char a6, char a7);
__m128i *__golang strconv_appendQuotedWith(__m128i *result, unsigned __int64 a2, unsigned __int64 a3, unsigned __int8 *a4, unsigned __int64 a5, __int64 a6, __int64 a7, unsigned int a8);
// __int64 __fastcall strconv_appendEscapedRune(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
// __int64 __golang strconv_IsPrint(_QWORD); weak
// void __golang internal_sync__ptr_Mutex_lockSlow(_ptr_sync_Mutex_0);
// __int64 __golang internal_sync__ptr_Mutex_unlockSlow(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
__int64 __golang sync__ptr_Once_doSlow(__int64 a1, void (**a2)(void));
// __int64 __golang sync__ptr_Once_doSlow_deferwrap2(int, int, int, int, int, int, int, int, int, char); weak
// __int64 __golang sync__ptr_Once_doSlow_deferwrap1(int, int, int, int, int, int, int, int, int, char); weak
// __int64 __golang sync__ptr_Pool_Put(_QWORD, _QWORD, _QWORD); weak
// interface_ __golang sync__ptr_Pool_Get(_ptr_sync_Pool);
retval_1077140 __golang sync__ptr_Pool_getSlow(__int64 *a1, unsigned __int64 a2);
// __int64 __golang sync__ptr_poolDequeue_pushHead(_QWORD); weak
// retval_1077760 __golang sync__ptr_poolDequeue_popHead(_QWORD); weak
__int64 __golang sync__ptr_poolChain_pushHead(sync_poolChainElt **a1);
retval_1077BA0 __golang sync__ptr_poolChain_popHead(__int64 *a1);
// __int64 __golang sync__ptr_poolChain_popTail(_QWORD); weak
__int64 __golang internal_sync__ptr_HashTrieMap_go_shape_interface__comma_go_shape_interface___iter(__int64 a1, __int64 a2, __int64 a3, unsigned __int8 (__golang **a4)(_QWORD, _QWORD, _QWORD, _QWORD));
__int64 __golang internal_sync__ptr_HashTrieMap_go_shape_interface__comma_go_shape_interface___Range(__int64 a1, __int64 a2, unsigned __int8 (__golang **a3)(_QWORD, _QWORD, _QWORD, _QWORD));
retval_10780E0 __golang internal_sync__ptr_HashTrieMap_go_shape_interface__comma_go_shape_interface___expand(__int64 a1, __int64 a2, __int64 a3, __int64 a4, unsigned __int64 a5, __int64 a6, sync_indirect_go_shape_interface__comma_go_shape_interface__ *a7);
retval_1078320 __golang internal_sync__ptr_HashTrieMap_go_shape_interface__comma_go_shape_interface___LoadOrStore(__int64 a1, __int64 a2, void *a3, void *a4, __int64 a5, __int64 a6);
// __int64 __golang internal_sync__ptr_HashTrieMap_go_shape_interface__comma_go_shape_interface___LoadOrStore_deferwrap1(int, int, int, int, int, int, int, int, int, char); weak
retval_1078A20 __golang internal_sync__ptr_HashTrieMap_go_shape_interface__comma_go_shape_interface___Load(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
__int64 __golang internal_sync__ptr_HashTrieMap_go_shape_interface__comma_go_shape_interface___initSlow(__int64 a1, __int64 a2);
// __int64 __golang internal_sync__ptr_HashTrieMap_go_shape_interface__comma_go_shape_interface___initSlow_deferwrap1(int, int, int, int, int, int, int, int, int, char); weak
__int64 __golang type__eq_sync_Mutex(_DWORD *a1, _DWORD *a2);
bool __golang type__eq_sync_atomic_Pointer_sync_poolChainElt_(_QWORD *a1, _QWORD *a2);
bool __golang type__eq_sync_poolLocal(const __m128i *a1, const __m128i *a2);
__int64 __golang type__eq_sync_poolLocalInternal(_QWORD *a1, _QWORD *a2);
bool __golang type__eq_sync_poolChain(_QWORD *a1, _QWORD *a2);
bool __golang type__eq_sync_atomic_Pointer_internal_sync_indirect_interface__comma_interface___(_QWORD *a1, _QWORD *a2);
__int64 __golang type__eq_internal_sync_indirect_interface__comma_interface__(__int64 a1, __int64 a2);
__int64 __golang type__eq_internal_sync_entry_interface__comma_interface__(__int64 a1, __int64 a2);
bool __golang type__eq_sync_atomic_Pointer_internal_sync_entry_interface__comma_interface___(_QWORD *a1, _QWORD *a2);
__int64 __golang type__eq__16_sync_atomic_Pointer_internal_sync_node_interface__comma_interface___(__int64 a1, __int64 a2);
bool __golang type__eq_sync_atomic_Pointer_internal_sync_node_interface__comma_interface___(_QWORD *a1, _QWORD *a2);
__int64 __golang type__eq_sync_Once(_DWORD *a1, _DWORD *a2);
__int64 __golang type__eq_internal_sync_entry_go_shape_interface__comma_go_shape_interface__(__int64 a1, __int64 a2);
bool __golang type__eq_sync_atomic_Pointer_internal_sync_entry_go_shape_interface__comma_go_shape_interface___(_QWORD *a1, _QWORD *a2);
__int64 __golang type__eq_internal_sync_indirect_go_shape_interface__comma_go_shape_interface__(__int64 a1, __int64 a2);
__int64 __golang type__eq__16_sync_atomic_Pointer_go_shape_struct__internal_sync_isEntry_bool__(__int64 a1, __int64 a2);
bool __golang type__eq_sync_atomic_Pointer_go_shape_struct__internal_sync_isEntry_bool__(_QWORD *a1, _QWORD *a2);
void unicode_init();
// retval_10795C0 __golang internal_itoa_Itoa(_QWORD, _QWORD, _QWORD); weak
void reflect_init();
__int64 __golang reflect__ptr_abiSeq_addArg(__int64 *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, int a8, _QWORD *a9);
// retval_1079B60 __golang reflect__ptr_abiSeq_addRcvr(_QWORD); weak
__int64 __golang reflect__ptr_abiSeq_regAssign(_QWORD *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, int a7, int a8, int a9);
__int64 __golang reflect__ptr_abiSeq_assignIntN(_QWORD *a1, __int64 a2, __int64 a3, unsigned __int64 a4, unsigned __int8 a5);
retval_107A620 __golang reflect_newAbiDesc(__int64 a1, __int64 a2);
// __int64 __fastcall reflect_intFromReg(_QWORD, _QWORD, _QWORD, _QWORD); weak
// __int64 __golang reflect_intToReg(_QWORD, _QWORD, _QWORD, _QWORD); weak
// __int64 __golang reflect_moveMakeFuncArgPtrs(_QWORD, _QWORD); weak
void __golang reflect_mapIterStart(__int64 a1, _QWORD *a2, __int64 *a3);
void __golang reflect_mapIterNext(__int64 *a1);
__int64 __golang reflect__ptr_MapIter_Key(_QWORD *a1);
__int64 __golang reflect__ptr_MapIter_Value(_QWORD *a1);
bool __golang reflect__ptr_MapIter_Next(__int64 *a1);
// void __golang reflect_flag_panicNotMap(reflect_flag);
retval_107B7C0 __golang reflect__ptr_rtype_exportedMethods(__int64 a1);
uintptr __golang reflect_elem(reflect_rtype *a1);
// string __golang reflect_ChanDir_String(reflect_ChanDir);
__int64 *__golang reflect__ptr_structType_Field(abi_Name *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, size_t len);
retval_107BBC0 __golang reflect_funcLayout(reflect_rtype *a1, reflect_rtype *a2);
// __int64 __golang reflect_funcLayout_func1(); weak
int *__golang reflect_addTypeBits(int *result, unsigned __int64 a2, __int64 a3, int a4, int a5, int a6, __int64 a7, int a8, _QWORD *a9);
__int64 __golang reflect_packEface(__int64 result, __int64 a2, __int16 a3);
// void __golang reflect_Value_panicNotBool(reflect_Value);
retval_107CD80 __golang reflect_Value_bytesSlow(__int64 a1, __int64 a2, __int16 a3, __int64 r3, __int64 a5, __int64 r5, __int64 r6, __int64 r7);
retval_107CF80 __golang reflect_methodReceiver(__int64 a1, __int64 a2, __int64 a3, __int64 *a4, __int64 a5, unsigned __int64 a6);
__int64 __golang reflect_callMethod(unsigned __int64 *a1, __int64 a2, _BYTE *a3, _QWORD *a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, unsigned __int64 *a10);
retval_107E2A0 __golang reflect_Value_Elem(abi_Type *a1, _QWORD *a2, char a3);
__int64 __golang reflect_Value_Field(__int64 a1, __int64 a2, char a3, unsigned __int64 a4);
// retval_107E580 __golang reflect_Value_Index(_QWORD, _QWORD, _QWORD); weak
signed __int64 __golang reflect_Value_lenNonSlice(reflect_Value);
// __int64 __golang reflect_copyVal(_QWORD, _QWORD); weak
// signed __int64 __golang reflect_Value_NumField(reflect_Value);
uintptr __golang reflect_Value_Pointer(reflect_Value);
string __golang reflect_Value_stringNonString(reflect_Value);
reflect_Type __golang reflect_Value_typeSlow(reflect_Value);
_ptr_abi_Type __golang reflect_Value_abiTypeSlow(reflect_Value);
retval_107F0A0 __golang reflect_Value_UnsafePointer(_QWORD *a1, _QWORD *a2, __int16 a3);
bool __golang reflect_Value_Comparable(reflect_Value);
// string __golang reflect__ptr_rtype_String(_ptr_reflect_rtype);
reflect_Kind __golang reflect__ptr_rtype_Kind(_ptr_reflect_rtype);
bool __golang reflect__ptr_rtype_Comparable(_ptr_reflect_rtype);
// __int64 __golang reflect_valueInterface(_QWORD, _QWORD, _QWORD, _QWORD); weak
retval_107FA40 __golang reflect_methodValueCall(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, double a17, double a18, double a19, double a20, double a21, double a22, double a23, double a24, char a25);
__int64 __golang type__eq_reflect_Method(__int64 a1, __int64 a2);
string __golang reflect__ptr_Kind_String(_ptr_reflect_Kind);
string __golang reflect__ptr_ChanDir_String(_ptr_reflect_ChanDir);
bool __golang reflect__ptr_Value_Comparable(_ptr_reflect_Value);
reflect_Kind __golang reflect__ptr_Value_Kind(_ptr_reflect_Value);
signed __int64 __golang reflect__ptr_Value_Len(_ptr_reflect_Value);
string __golang reflect__ptr_Value_String(_ptr_reflect_Value);
__int64 __golang reflect_moveMakeFuncArgPtrs_0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, __int64 a11);
__int64 __golang reflect_callMethod_0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, unsigned __int64 *a10, __int64 a11, _BYTE *a12, _QWORD *a13);
bool __golang type__eq_reflect_ValueError(__int64 a1, __int64 a2);
bool __golang type__eq_reflect_makeFuncCtxt(__int64 a1, __int64 a2);
__int64 __golang type__eq_reflect_methodValue(__int64 a1, __int64 a2);
retval_1080040 __golang internal_fmtsort_Sort(abi_Type *data, void *a2, reflect_flag a3);
__int64 __golang internal_fmtsort_compare(abi_Type *data, double *a2, reflect_flag a3, abi_Type *a4, double *a5, reflect_flag a6);
// retval_1081160 __golang internal_fmtsort_nilCompare(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
__int64 __golang internal_fmtsort_Sort_func1(abi_Type *a1, double *a2, reflect_flag a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, abi_Type *a10, double *a11, reflect_flag a12);
__int64 __golang slices_stableCmpFunc_go_shape_struct__Key_reflect_Value_Value_reflect_Value__(__int64 result, __int64 a2, unsigned __int64 a3, __int128 *a4, __int64 a5, _QWORD *a6);
unsigned __int64 __golang slices_symMergeCmpFunc_go_shape_struct__Key_reflect_Value_Value_reflect_Value__(unsigned __int64 result, __int64 a2, unsigned __int64 a3, _OWORD *a4, int64 a5, char *a6, char *a7, _QWORD *a8);
__int64 __golang slices_rotateCmpFunc_go_shape_struct__Key_reflect_Value_Value_reflect_Value__(__int64 a1, __int64 a2, unsigned __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, _OWORD *i, __int64 a9);
retval_1082C60 __golang internal_bisect_New(const char *a1, unsigned __int64 a2);
// __int64 __golang internal_bisect__ptr_Matcher_stack(_QWORD, _QWORD, _QWORD); weak
retval_1083A20 __golang internal_bisect_printStack(__int64 a1, __int64 a2, unsigned __int64 a3, uintptr *a4, size_t a5, size_t a6);
__int64 __golang internal_bisect_Hash(__int64 a1, __int64 r1);
string __golang internal_bisect__ptr_parseError_Error(_ptr_bisect_parseError);
bool __golang type__eq_internal_bisect_cond(__int64 a1, __int64 a2);
bool __golang type__eq_sync_atomic_Pointer_internal_bisect_dedup_(_QWORD *a1, _QWORD *a2);
void __golang internal_godebug__ptr_Setting_IncNonDefault(_ptr_godebug_Setting);
void __golang internal_godebug__ptr_Setting_register(_ptr_godebug_Setting);
string __golang internal_godebug__ptr_Setting_Value(_ptr_godebug_Setting);
// __int64 __golang internal_godebug__ptr_Setting_Value_func1(); weak
godebug_setting *__golang internal_godebug_lookup(const __m128i *a1, char *a2);
__int64 __golang internal_godebug_update(__int64 a1, unsigned __int64 a2, __int64 a3, unsigned __int64 a4);
// __int64 __golang internal_godebug_update_func1(); weak
// __int64 __golang internal_godebug_update_deferwrap1(int, int, int, int, int, int, int, int, int, char); weak
__int64 __golang internal_godebug_parse(__int64 result, __int64 a2, unsigned __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, int a8, int a9);
void __golang internal_godebug__ptr_Setting_IncNonDefault_fm(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, char a10);
__int64 __golang sync_atomic__ptr_Uint64_Load_fm(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, char a10);
void __golang internal_godebug__ptr_Setting_register_fm(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, char a10);
bool __golang type__eq_internal_godebug_setting(__int64 a1, __int64 a2);
bool __golang type__eq_sync_atomic_Pointer_internal_godebug_value_(_QWORD *a1, _QWORD *a2);
bool __golang type__eq_internal_godebug_value(__int64 a1, __int64 a2);
bool __golang type__eq_internal_godebug_Setting(__int64 a1, __int64 a2);
// retval_1085DA0 __golang syscall_Getenv(_QWORD, _QWORD); weak
retval_1086040 __golang syscall_SetNonblock(__int64 a1, char a2);
__int64 syscall_init_0(); // weak
__int64 __golang syscall_adjustFileLimit(_QWORD *a1);
// retval_10861E0 __golang syscall_ByteSliceFromString(_QWORD, _QWORD); weak
// retval_10862A0 __golang syscall_Getwd(); weak
// retval_10863C0 __golang syscall_SysctlUint32(_QWORD, _QWORD); weak
retval_1086480 __golang syscall_nametomib(__int64 a1, __int64 a2);
// string __golang syscall_Errno_Error(syscall_Errno);
bool __golang syscall_Errno_Is(syscall_Errno, error);
// __int64 __golang syscall_Close(_QWORD); weak
// retval_10868C0 __golang syscall_Dup(); weak
retval_1086980 __golang syscall_Getrlimit(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// __int64 __fastcall syscall_Open(_QWORD, _QWORD, _QWORD, _QWORD); weak
// retval_1086B80 __golang syscall_read(_QWORD, _QWORD, _QWORD, _QWORD); weak
// retval_1086C80 __golang syscall_Seek(_QWORD, _QWORD, _QWORD); weak
retval_1086D60 __golang syscall_setrlimit(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// retval_1086E20 __golang syscall_write(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
retval_10871A0 __golang syscall_Fstat(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
// retval_10875A0 __golang syscall_fcntl(_QWORD, _QWORD, _QWORD); weak
// __int64 __golang syscall_closedir(_QWORD); weak
retval_1087740 __golang syscall_readdir_r(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_10878C0 __golang syscall_sysctl(__int64 *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
int __cdecl syscall_libc_getrlimit_trampoline(int, rlimit *);
int __cdecl syscall_libc_readdir_r_trampoline(DIR *, dirent *, dirent **);
int __cdecl syscall_libc_setrlimit_trampoline(int, const rlimit *);
int __cdecl syscall_libc_sysctl_trampoline(int *, u_int, void *, size_t *, void *, size_t);
int __cdecl syscall_libc_fstat64_trampoline(int, stat64 *);
string __golang syscall__ptr_Errno_Error(_ptr_syscall_Errno);
bool __golang syscall__ptr_Errno_Is(_ptr_syscall_Errno, error);
retval_1087EC0 __golang time_appendInt(__int64 r0, __int64 r1, unsigned __int64 r2, unsigned __int64 a4, __int64 a5, double a6, __int64 a7, __int64 a8, int a9, int a10);
// retval_10882A0 __golang time_appendNano(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
string __golang time_Time_String(time_Time);
string __golang time_Time_GoString(time_Time);
retval_1088C60 __golang time_Time_Format(__int64 a1, __int64 a2, __int64 a3, const __m128i *a4, unsigned __int64 a5);
__int64 __golang time_Time_AppendFormat(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, unsigned __int64 a6, const __m128i *a7, unsigned __int64 a8);
retval_1088FA0 __golang time_Time_appendFormat(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, unsigned __int64 a6, __int64 a7, unsigned __int64 a8);
retval_108B440 __golang time_quote(__int64 a1, signed __int64 a2);
__int64 __golang time_Time_appendFormatRFC3339(int a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, unsigned __int64 a6, char a7);
retval_108BD60 __golang time_preadn(__int64 a1, __int64 a2, unsigned __int64 a3, __int64 a4, __int64 a5);
retval_108BEC0 __golang time_absDays_date(__int64 a1);
retval_108BF80 __golang time_absDays_yearYday(__int64 a1);
// __int64 __golang time_Time_absSec(_QWORD, _QWORD); weak
// retval_108C180 __golang time_Time_locabs(); weak
retval_108C6E0 __golang time_tzset(_BYTE *a1, __int64 a2, __int64 a3, __int64 a4, int a5, __int64 a6, __int64 a7, int a8, int a9);
retval_108CC80 __golang time_tzsetName(_BYTE *a1, __int64 a2, __int64 a3, int a4, int a5, __int64 a6, __int64 a7, int a8, int a9);
// retval_108CE60 __golang time_tzsetOffset(_QWORD, _QWORD); weak
// retval_108D3A0 __golang time_tzsetRule(_QWORD); weak
__int64 __golang time_tzruleTime(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7);
// retval_108E0E0 __golang time__ptr_dataIO_big8(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
retval_108E260 __golang time_LoadLocationFromTZData(__int64 a1, size_t a2, signed __int64 a3, signed __int64 a4, __int64 a5, __int64 a6, int a7, signed __int64 a8);
retval_108F740 __golang time_loadTzinfoFromZip(__int64 a1, __int64 a2, const __m128i *a3, __int64 a4, __int64 a5);
__int64 __golang time_loadTzinfoFromZip_deferwrap1(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, char a10);
// retval_1090320 __golang time_loadTzinfo(_QWORD, _QWORD, _QWORD, _QWORD); weak
retval_10903E0 __golang time_loadLocation(__int64 a1, size_t a2, _QWORD *a3, __int64 a4);
__int64 __golang time_readFile_deferwrap1(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, char a10);
const char *time_initLocal();
retval_1091000 __golang time_nextStdChunk(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, int a5, __int64 a6, __int64 a7, int a8, int a9);
string __golang time__ptr_Time_GoString(_ptr_time_Time);
string __golang time__ptr_Time_String(_ptr_time_Time);
string __golang time__ptr_fileSizeError_Error(_ptr_time_fileSizeError);
bool __golang type__eq_time_zone(__int64 a1, __int64 a2);
bool __golang type__eq_time_zoneTrans(__int64 a1, __int64 a2);
retval_1092260 __golang io_fs_FormatDirEntry(__int64 a1, __int64 a2);
// string __golang io_fs_FileMode_String(fs_FileMode);
bool __golang io_fs_FileMode_IsDir(fs_FileMode);
__int64 __golang io_fs_FileMode_Type(int a1);
string __golang io_fs__ptr_PathError_Error(_ptr_fs_PathError);
error __golang io_fs__ptr_PathError_Unwrap(_ptr_fs_PathError);
__int64 __golang type__eq_io_fs_PathError(__int64 a1, __int64 a2);
bool __golang io_fs__ptr_FileMode_IsDir(_ptr_fs_FileMode);
string __golang io_fs__ptr_FileMode_String(_ptr_fs_FileMode);
__int64 __golang io_fs__ptr_FileMode_Type(_DWORD *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, char a10);
// retval_10928C0 __golang internal_filepathlite_Base(_QWORD, _QWORD); weak
__int64 __golang internal_testlog_Getenv(__int64 result, __int64 a2);
__int64 __golang internal_testlog_Stat(__int64 result, __int64 a2);
// retval_1092A60 __golang internal_syscall_unix_Fcntl(_QWORD, _QWORD, _QWORD); weak
string __golang internal_poll__ptr_DeadlineExceededError_Error(_ptr_poll_DeadlineExceededError);
// __int64 __golang internal_poll__ptr_fdMutex_rwlock(_QWORD, _QWORD); weak
// error __golang internal_poll__ptr_FD_decref(_ptr_poll_FD);
// void __golang internal_poll__ptr_FD_writeUnlock(_ptr_poll_FD);
// retval_1092F80 __golang internal_poll__ptr_FD_OpenDir(); weak
// __int64 __golang internal_poll__ptr_pollDesc_prepare(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// __int64 __golang internal_poll__ptr_pollDesc_wait(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, __int64, __int64); weak
// __int64 __golang internal_poll__ptr_FD_Init(_QWORD, _QWORD, _QWORD, _QWORD); weak
// error __golang internal_poll__ptr_FD_Close(_ptr_poll_FD);
retval_10D43A0 __golang internal_poll__ptr_FD_Write(_ptr_poll_FD, _slice_uint8);
void __golang internal_poll__ptr_FD_Write_deferwrap1(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, char a10);
retval_1093BE0 __golang internal_poll__ptr_FD_Fstat(volatile signed __int64 *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
retval_1093D80 __golang internal_poll__ptr_FD_Fstat_deferwrap1(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, char a10);
// retval_1093DE0 __golang internal_poll_DupCloseOnExec(_QWORD); weak
retval_1093F00 __golang internal_poll__ptr_FD_Dup(volatile signed __int64 *a1);
retval_10940A0 __golang internal_poll__ptr_FD_Dup_deferwrap1(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, char a10);
retval_1094100 internal_poll_dupCloseOnExecOld();
// __int64 __golang internal_poll_dupCloseOnExecOld_deferwrap1(int, int, int, int, int, int, int, int, int, char); weak
string __golang internal_poll__ptr_errNetClosing_Error(_ptr_poll_errNetClosing);
bool __golang type__eq_internal_poll_FD(const __m128i *a1, const __m128i *a2);
// retval_1094640 __golang os__ptr_File_Readdirnames(_QWORD, _QWORD, _QWORD); weak
retval_10946E0 __golang os__ptr_File_readdir(__int64 a1, __int64 a2, __int64 a3);
// retval_10952A0 __golang os_Getenv(_QWORD, _QWORD); weak
string __golang os__ptr_SyscallError_Error(_ptr_os_SyscallError);
error __golang os__ptr_SyscallError_Unwrap(_ptr_os_SyscallError);
__int64 __golang os_underlyingErrorIs(__int64 a1, _QWORD *a2, RTYPE **a3, __int64 a4);
retval_10D43A0 __golang os__ptr_File_Write(_ptr_os_File, _slice_uint8);
retval_10957E0 __golang os__ptr_File_wrapErr(__int64 a1, char *a2, size_t a3, RTYPE **a4, __int64 a5);
os_File *__golang os_NewFile(signed __int64 a1, char *a2, size_t a3);
os_File *__golang os_newFile(signed __int64 a1, char *a2, size_t a3, __int64 a4, char a5);
retval_1095E20 __golang os_openDirNolog(char *a1, size_t a2, __int64 a3, __int64 a4, __int64 a5);
error __golang os__ptr_file_close(_ptr_os_file);
string __golang os__ptr_unixDirent_Name(_ptr_os_unixDirent);
bool __golang os__ptr_unixDirent_IsDir(_ptr_os_unixDirent);
fs_FileMode __golang os__ptr_unixDirent_Type(_ptr_os_unixDirent);
string __golang os__ptr_unixDirent_String(_ptr_os_unixDirent);
retval_10961A0 __golang os_newUnixDirent(char *a1, size_t a2, char *a3, size_t a4, fs_FileMode a5);
retval_1096340 os_Getwd();
__int64 __golang os_fillFileStatFromSys(__int64 a1, __int64 a2, __int64 a3);
retval_10D24E0 __golang os__ptr_File_Stat(_ptr_os_File);
// retval_10970C0 __golang os_statNolog(_QWORD, _QWORD); weak
// __int64 __golang os_lstatNolog(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
string __golang os__ptr_fileStat_Name(_ptr_os_fileStat);
fs_FileMode __golang os__ptr_fileStat_Mode(_ptr_os_fileStat);
bool __golang type__eq_os_fileStat(__int64 a1, __int64 a2);
bool __golang type__eq_os_file(__int64 a1, __int64 a2);
bool __golang type__eq_sync_atomic_Pointer_os_dirInfo_(_QWORD *a1, _QWORD *a2);
__int64 __golang type__eq_os_unixDirent(__int64 a1, __int64 a2);
__int64 __golang type__eq_os_LinkError(__int64 a1, __int64 a2);
__int64 __golang type__eq_os_SyscallError(__int64 a1, __int64 a2);
void __golang fmt__ptr_fmt_writePadding(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, int a7, int a8, int a9);
void __golang fmt__ptr_fmt_pad(__int64 a1, const __m128i *a2, signed __int64 a3, __int64 a4, __int64 a5, __int64 a6, int a7, int a8, int a9);
void __golang fmt__ptr_fmt_padString(__int64 **a1, const __m128i *a2, signed __int64 a3, __int64 a4, __int64 a5, __int64 a6, int a7, int a8, int a9);
void __golang fmt__ptr_fmt_fmtUnicode(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, int a7, __int64 a8, int a9);
// __int64 __golang fmt__ptr_fmt_fmtInteger(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
retval_1098900 __golang fmt__ptr_fmt_truncate(__int64 a1, __int64 a2, signed __int64 a3, unsigned __int64 a4, __int64 a5, __int64 a6, __int64 a7, int a8, int a9);
// __int64 __golang fmt__ptr_fmt_fmtS(_QWORD, _QWORD, _QWORD); weak
// __int64 __golang fmt__ptr_fmt_fmtBs(_QWORD); weak
void __golang fmt__ptr_fmt_fmtSbx(__int64 a1, __int64 a2, unsigned __int64 a3, __int64 a4, unsigned __int64 a5, __int64 a6, __int64 a7, unsigned __int64 a8, int a9);
// __int64 __golang fmt__ptr_fmt_fmtQ(_QWORD, _QWORD, _QWORD); weak
void __golang fmt__ptr_fmt_fmtC(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, int a7, int a8, int a9);
void __golang fmt__ptr_fmt_fmtFloat(__int64 a1, __int64 a2, int a3, __int64 a4, double a5);
// __int64 __golang fmt_Fprintln(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
// retval_1099FA0 __golang fmt_getField(_QWORD, _QWORD, _QWORD); weak
// __int64 fmt__ptr_pp_unknownType(void); weak
// __int64 __golang fmt__ptr_pp_badVerb(_QWORD, _QWORD); weak
// __int64 __golang fmt__ptr_pp_fmtBool(_QWORD, _QWORD, _QWORD); weak
__int64 __golang fmt__ptr_pp_fmt0x64(__int64 a1, __int64 a2, char a3);
// __int64 __fastcall fmt__ptr_pp_fmtInteger(_QWORD, _QWORD, _QWORD, _QWORD); weak
// __int64 __golang fmt__ptr_pp_fmtFloat(double); weak
// __int64 __golang fmt__ptr_pp_fmtComplex(double, double); weak
// __int64 __fastcall fmt__ptr_pp_fmtString(_QWORD, _QWORD, _QWORD, _QWORD); weak
void __golang fmt__ptr_pp_fmtBytes(_QWORD *a1, __int64 a2, signed __int64 a3, __int64 a4, __int64 a5, const __m128i *a6, unsigned __int64 a7, __int64 a8, int a9);
// __int64 __golang fmt__ptr_pp_fmtPointer(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
void __golang fmt__ptr_pp_catchPanic(__int64 *a1, __int64 a2, _QWORD *a3, unsigned int a4, const __m128i *a5, unsigned __int64 a6);
// __int64 __golang fmt__ptr_pp_handleMethods(_QWORD, _QWORD); weak
void __golang fmt__ptr_pp_printArg(_QWORD *a1, reflect_rtype *a2, unsigned __int8 *a3, __int64 a4, __int64 a5, __int64 a6, int a7, int a8, _QWORD *a9);
void __golang fmt__ptr_pp_printValue(_QWORD *a1, abi_Type *data, _QWORD *a3, reflect_flag a4, __int64 a5, __int64 a6);
bool __golang type__eq_fmt_fmt(__int64 a1, __int64 a2);
void __fastcall main_main();
__int64 go_textfipsstart(); // weak
void go_textfipsend();
void __cdecl __noreturn _exit(int);
// int open(const char *, int, ...);
// ssize_t __cdecl write(int __fd, const void *__buf, size_t __nbyte);
// int *__error(void);
// int __cdecl madvise(void *, size_t, int);
// uint64_t mach_absolute_time(void);
// kern_return_t __cdecl mach_timebase_info(mach_timebase_info_t info);
// int __cdecl clock_gettime(clockid_t __clock_id, timespec *__tp);
// int __cdecl sigaction(int, const sigaction *, sigaction *);
// int __cdecl pthread_sigmask(int, const sigset_t *, sigset_t *);
// int __cdecl sigaltstack(const stack_t *, stack_t *);
// pid_t getpid(void);
// int __cdecl kill(pid_t, int);
// void *__cdecl mmap(void *, size_t, int, int, int, off_t);
// int __cdecl munmap(void *, size_t);
// int __cdecl usleep(useconds_t);
// int __cdecl sysctl(int *, u_int, void *, size_t *, void *, size_t);
// int kqueue(void);
// int __cdecl kevent(int kq, const kevent *changelist, int nchanges, kevent *eventlist, int nevents, const timespec *timeout);
// int fcntl(int, int, ...);
// int __cdecl pthread_attr_init(pthread_attr_t *);
// int __cdecl pthread_attr_getstacksize(const pthread_attr_t *, size_t *);
// int __cdecl pthread_attr_setdetachstate(pthread_attr_t *, int);
// int __cdecl pthread_create(pthread_t *, const pthread_attr_t *, void *(__cdecl *)(void *), void *);
// int __cdecl raise(int);
// int __cdecl pthread_mutex_init(pthread_mutex_t *, const pthread_mutexattr_t *);
// int __cdecl pthread_mutex_lock(pthread_mutex_t *);
// int __cdecl pthread_mutex_unlock(pthread_mutex_t *);
// int __cdecl pthread_cond_init(pthread_cond_t *, const pthread_condattr_t *);
// int __cdecl pthread_cond_wait(pthread_cond_t *, pthread_mutex_t *);
// int __cdecl pthread_cond_timedwait_relative_np(pthread_cond_t *, pthread_mutex_t *, const timespec *);
// int __cdecl pthread_cond_signal(pthread_cond_t *);
// pthread_t pthread_self(void);
// int __cdecl pthread_kill(pthread_t, int);
// bool __cdecl notify_is_valid_token(int val);
// xpc_object_t xpc_date_create_from_current(void);
// void __cdecl arc4random_buf(void *__buf, size_t __nbytes);
// int issetugid(void);

//-------------------------------------------------------------------------
// Data declarations

int dword_1000000 = -17958193; // weak
_UNKNOWN loc_106B506; // weak
_UNKNOWN loc_106D3C1; // weak
char a0123456789abcd[16] = "0123456789abcdef"; // weak
char a0123456789abcd_1[17] = "0123456789ABCDEFX"; // weak
char a0123456789abcd_3[36] = "0123456789abcdefghijklmnopqrstuvwxyz"; // weak
char a00010203040506[201] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899"; // weak
__int64 qword_10C5090 = 2LL; // weak
__int64 qword_10C5098 = 9LL; // weak
__int64 qword_10C50F0 = 4LL; // weak
__int64 qword_10C52A0[4] = { 58LL, 136LL, 341LL, 16LL }; // weak

==================================================

// function name: runtime_saveblockevent

// 102F0B2: variable 'v2' is possibly undefined

//----- (000000000102F160) ----------------------------------------------------
// runtime.saveblockevent
__int64 __golang runtime_saveblockevent(
        __int64 result,
        __int64 a2,
        __int64 a3,
        __int64 a4,
        int a5,
        __int64 a6,
        int a7,
        unsigned __int64 a8,
        __int64 a9)
{
  __int64 v9; // r14
  __int64 v10; // rdx
  unsigned __int64 *v11; // r8
  unsigned __int64 v12; // rax
  __int64 v13; // rbx
  int v14; // edi
  int v15; // esi
  int v16; // r8d
  int v17; // r10d
  int v18; // r11d
  __int64 v19; // r8
  _QWORD *v20; // r10
  __int64 v21; // r8
  int64 v22; // rdx
  _QWORD *v23; // rax
  __int64 v24; // r9
  unsigned __int64 v25; // r10
  __int64 v26; // r11
  __int64 v27; // rcx
  int v28; // r9d
  __int64 v29; // rax
  __int64 v30; // rcx
  __int64 v31; // rdi
  __int64 v32; // rsi
  __int64 v33; // r8
  __int64 v34; // r9
  __int64 v35; // r10
  __int64 v36; // r11
  __int64 v37; // [rsp+28h] [rbp-18h]
  __int64 v38; // [rsp+48h] [rbp+8h]

  if ( dword_119653C )
  {
    if ( a3 > 6 )
    {
      runtime_printlock(result);
      runtime_printstring("requested skip=", 15);
      v29 = runtime_printint(a3);
      runtime_printunlock(v29);
      runtime_throw((__int64 (*)(void))"invalid skip value", (__int64 (*)(void))0x12, v30, v31, v32, v33, v34, v35, v36);
    }
    v38 = result;
    ++*(_DWORD *)(*(_QWORD *)(v9 + 48) + 264LL);
    v10 = *(_QWORD *)(v9 + 48);
    v37 = v10;
    if ( dword_1196530 || *(int *)(v10 + 304) > 0 || *(_BYTE *)(v10 + 281) )
    {
      v11 = *(unsigned __int64 **)(v10 + 192);
      if ( !v11 || (a7 = v9, (unsigned __int64 *)v9 == v11) )
        v12 = runtime_callers(
                a3,
                *(_QWORD *)(v10 + 688),
                *(_QWORD *)(v10 + 696),
                *(_QWORD *)(v10 + 704),
                *(_QWORD *)(v10 + 696),
                (_DWORD)v11,
                a7,
                a8,
                a9);
      else
        v12 = runtime_gcallers(
                v11,
                a3,
                *(_QWORD *)(v10 + 688),
                *(_QWORD *)(v10 + 696),
                *(_QWORD *)(v10 + 704),
                (__int64)v11,
                (unsigned int *)v9,
                a8,
                a9);
    }
    else
    {
      v19 = *(_QWORD *)(v10 + 192);
      if ( !v19 || v9 == v19 )
      {
        v23 = (_QWORD *)runtime_getfp();
        v27 = a3;
        if ( a3 > 0 )
          v27 = a3 - 1;
        v22 = runtime_fpTracebackPartialExpand(
                v27,
                v23,
                *(_QWORD *)(v37 + 688),
                *(_QWORD *)(v37 + 696),
                *(_QWORD *)(v37 + 704),
                *(_QWORD *)(v37 + 704),
                v24,
                v25,
                v26);
      }
      else
      {
        if ( !*(_QWORD *)(v10 + 696) )
          runtime_panicIndex(0, a2, 0, a4, a5, v19, v9, a8, a9);
        v20 = *(_QWORD **)(v10 + 688);
        *v20 = *(_QWORD *)(v19 + 64);
        v21 = *(_QWORD *)(v10 + 696);
        if ( !v21 )
          runtime_panicSliceB(1, a2, 0, a4, a5, 0, v9, (int)v20, a9);
        v22 = runtime_fpTracebackPartialExpand(
                a3,
                *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v9 + 48) + 192LL) + 104LL),
                *(_QWORD *)(v10 + 688) + (((1LL - *(_QWORD *)(v10 + 704)) >> 63) & 8),
                v21 - 1,
                *(_QWORD *)(v10 + 704) - 1LL,
                v21,
                *(_QWORD *)(v10 + 688),
                (unsigned __int64)v20,
                a9)
            + 1;
      }
      v12 = v22;
    }
    if ( v12 > *(_QWORD *)(v37 + 704) )
      runtime_panicSliceAcap(v12, v13, v12, v14, v15, v16, v37, v17, v18);
    result = runtime_saveBlockEventStack(v38, a2, *(_QWORD *)(v37 + 688), v12, *(_QWORD *)(v37 + 704), a4);
    v28 = *(_DWORD *)(v37 + 264);
    *(_DWORD *)(v37 + 264) = v28 - 1;
    if ( v28 == 1 )
    {
      if ( *(_BYTE *)(v9 + 185) )
        *(_QWORD *)(v9 + 16) = -1314;
    }
  }
  return result;
}

==================================================

// function name: runtime_memclrNoHeapPointersChunked

// 1012AAE: variable 'v9' is possibly undefined

//----- (0000000001012B00) ----------------------------------------------------
// runtime.memclrNoHeapPointersChunked
__int64 __golang runtime_memclrNoHeapPointersChunked(
        __int64 result,
        _OWORD *a2,
        double a3,
        __int64 a4,
        __int64 a5,
        __int64 a6,
        __int64 a7,
        __int64 a8,
        __int64 a9,
        __int64 a10)
{
  __int64 v10; // r14
  unsigned __int64 v11; // rcx
  unsigned __int64 v12; // rcx
  __int64 v13; // [rsp-10h] [rbp-28h]
  char *v14; // [rsp+0h] [rbp-18h]
  _OWORD *v15; // [rsp+8h] [rbp-10h]

  v11 = (unsigned __int64)a2 + result;
  v14 = (char *)a2 + result;
  while ( (unsigned __int64)a2 < v11 )
  {
    if ( *(_BYTE *)(v10 + 185) )
      runtime_mcall((void (__golang **)(_QWORD *))off_10EAAD0, (__int64)a2, v11, a5, a6, a7, a8, a9, a10, v13);
    v12 = v11 - (_QWORD)a2;
    v15 = a2 + 0x4000;
    if ( v12 > 0x40000 )
      v12 = 0x40000;
    result = runtime_memclrNoHeapPointers(a2, v12, a3);
    v11 = (unsigned __int64)v14;
    a2 = v15;
  }
  return result;
}

==================================================

// function name: runtime_badPointer

//----- (0000000001014400) ----------------------------------------------------
// runtime.badPointer
void __golang __noreturn runtime_badPointer(__int64 a1, __int64 a2, unsigned __int64 a3, __int64 a4)
{
  __int64 v4; // r14
  __int64 v5; // rax
  __int64 v6; // rax
  __int64 v7; // rax
  __int64 v8; // rax
  __int64 v9; // rax
  __int64 v10; // rax
  __int64 v11; // rax
  __int64 v12; // rdi
  __int64 v13; // rsi
  __int64 v14; // r8
  __int64 v15; // r9
  __int64 v16; // r10
  __int64 v17; // r11
  __int64 v18; // rax
  __int64 v19; // rcx
  __int64 v20; // rax
  unsigned __int8 v21; // [rsp+1h] [rbp-21h]
  __int64 v22; // [rsp+2h] [rbp-20h]
  __int64 v23; // [rsp+Ah] [rbp-18h]

  v5 = runtime_printlock(a1);
  runtime_printlock(v5);
  runtime_printstring("runtime: pointer ", 17);
  v6 = runtime_printhex(a2);
  runtime_printunlock(v6);
  v7 = a1;
  if ( a1 )
  {
    v21 = *(_BYTE *)(a1 + 99);
    runtime_printlock(a1);
    if ( v21 == 1 )
      v8 = runtime_printstring(" to unused region of span", 25);
    else
      v8 = runtime_printstring(" to unallocated span", 20);
    runtime_printunlock(v8);
    v23 = *(_QWORD *)(a1 + 112);
    v22 = *(_QWORD *)(a1 + 24);
    runtime_printlock(v22);
    runtime_printstring(" span.base()=", 13);
    runtime_printhex(v22);
    runtime_printstring(" span.limit=", 12);
    runtime_printhex(v23);
    runtime_printstring(" span.state=", 12);
    v9 = runtime_printuint(v21);
    v7 = runtime_printunlock(v9);
  }
  v10 = runtime_printlock(v7);
  v11 = runtime_printnl(v10);
  runtime_printunlock(v11);
  v18 = a3;
  if ( a3 )
    goto LABEL_7;
  while ( 1 )
  {
    v19 = *(_QWORD *)(v4 + 48);
    *(_BYTE *)(v19 + 290) = 2;
    v18 = runtime_throw(
            (__int64 (*)(void))"found bad pointer in Go heap (incorrect use of unsafe or cgo?)",
            (__int64 (*)(void))0x3E,
            v19,
            v12,
            v13,
            v14,
            v15,
            v16,
            v17);
LABEL_7:
    runtime_printlock(v18);
    runtime_printstring("runtime: found in object at *(", 30);
    runtime_printhex(a3);
    runtime_printstring("+", 1);
    runtime_printhex(a4);
    v20 = runtime_printstring(")\n", 2);
    runtime_printunlock(v20);
    runtime_gcDumpObject((__int64)"object", 6, a3, a4);
  }
}

==================================================

// function name: runtime_typeAssert

//----- (000000000100F280) ----------------------------------------------------
// runtime.typeAssert
__int64 __golang runtime_typeAssert(
        volatile signed __int64 *a1,
        abi_Type *a2,
        double a3,
        __int64 a4,
        __int64 a5,
        __int64 a6,
        __int64 a7,
        __int64 a8,
        __int64 a9,
        __int64 *a10)
{
  __int64 v10; // r14
  __int64 v11; // rcx
  __int64 v12; // rax
  __int64 v13; // rsi
  volatile signed __int64 *v14; // r9
  __int64 v15; // rsi
  __int64 v16; // rax
  _QWORD *v17; // r8
  __int64 *v18; // rax
  __int64 v19; // rcx
  __int64 v20; // rdi
  __int64 v21; // rsi
  __int64 v22; // r8
  __int64 v23; // r9
  __int64 v24; // r10
  __int64 v25; // r11
  runtime_TypeAssertionError *p_TypeAssertionError; // rax
  abi_Type *v28; // rcx
  abi_Type **v29; // r11
  __int64 v30; // [rsp+0h] [rbp-20h]
  __int64 *v31; // [rsp+8h] [rbp-18h]
  signed __int64 v32; // [rsp+10h] [rbp-10h]
  volatile signed __int64 *v33; // [rsp+28h] [rbp+8h]
  abi_Type *v34; // [rsp+30h] [rbp+10h]

  v33 = a1;
  if ( a2 )
  {
    v34 = a2;
    v12 = runtime_getitab(*((_QWORD *)a1 + 1), a2, *((unsigned __int8 *)a1 + 16), a5, a6, a7, a8, a9, (__int64)a10);
    a2 = v34;
    v11 = v12;
    a1 = v33;
  }
  else
  {
    if ( !*((_BYTE *)a1 + 16) )
    {
      p_TypeAssertionError = (runtime_TypeAssertionError *)runtime_newobject(&RTYPE_runtime_TypeAssertionError);
      v28 = (abi_Type *)*((_QWORD *)v33 + 1);
      if ( runtime_writeBarrier )
        goto LABEL_14;
      while ( 1 )
      {
        p_TypeAssertionError->asserted = v28;
        p_TypeAssertionError->missingMethod = 0;
        runtime_gopanic(&RTYPE__ptr_runtime_TypeAssertionError, p_TypeAssertionError);
LABEL_14:
        runtime_gcWriteBarrier1();
        *v29 = v28;
      }
    }
    v11 = 0;
  }
  v13 = *(_QWORD *)(*(_QWORD *)(v10 + 48) + 1728LL) - 0x5F89E29B87429BD1LL;
  v14 = a1;
  *(_QWORD *)(*(_QWORD *)(v10 + 48) + 1728LL) = v13;
  if ( (((unsigned int)(((v13 ^ 0xE7037ED1A0B428DBLL) * (unsigned __int128)(unsigned __int64)v13) >> 64)
       ^ (((unsigned int)v13 ^ 0xA0B428DB) * (_DWORD)v13))
      & 0x3FF) != 0 )
    return v11;
  v15 = *(_QWORD *)(v10 + 48);
  v16 = *(_QWORD *)(v15 + 1728) - 0x5F89E29B87429BD1LL;
  v17 = (_QWORD *)*v14;
  *(_QWORD *)(v15 + 1728) = v16;
  if ( (((unsigned int)(((v16 ^ 0xE7037ED1A0B428DBLL) * (unsigned __int128)(unsigned __int64)v16) >> 64)
       ^ (((unsigned int)v16 ^ 0xA0B428DB) * (_DWORD)v16))
      & (unsigned int)*v17) != 0 )
    return v11;
  v32 = (signed __int64)v17;
  v30 = v11;
  v18 = runtime_buildTypeAssertCache(
          v17,
          (__int64)a2,
          v11,
          (void (__golang *)())(v16 ^ 0xE7037ED1A0B428DBLL),
          v15,
          (__int64)v17,
          (__int64)v14,
          v16,
          a10,
          a3);
  if ( (_BYTE)runtime_writeBarrier )
  {
    v31 = v18;
    runtime_atomicwb(v33, (__int64)v18, v19, v20, v21, v22, v23, v24, v25);
    v18 = v31;
  }
  _InterlockedCompareExchange64(v33, (signed __int64)v18, v32);
  return v30;
}

==================================================

// function name: runtime_memequal16

//----- (00000000010094E0) ----------------------------------------------------
// runtime.memequal16
bool __golang runtime_memequal16(_WORD *a1, _WORD *a2)
{
  return *a2 == *a1;
}

==================================================

// function name: runtime_mapaccess2_fast32

// 1197140: using guessed type __int64 runtime_zeroVal[128];

//----- (0000000001005D00) ----------------------------------------------------
// runtime.mapaccess2_fast32
retval_1005D00 __golang runtime_mapaccess2_fast32(__int64 a1, __int64 a2, int a3)
{
  unsigned __int64 *v3; // rdx
  unsigned __int64 v4; // rsi
  _DWORD *v5; // rdx
  unsigned __int64 v6; // rax
  __int64 v7; // rcx
  unsigned __int64 v8; // rdx
  __int64 v9; // rcx
  __int64 v10; // rdx
  unsigned __int64 v11; // rsi
  unsigned __int64 v12; // rax
  __int64 v13; // rbx
  __int64 v16; // rax
  unsigned __int64 *v17; // r8
  unsigned __int64 v18; // r10
  __m128i v19; // xmm1
  unsigned __int64 i; // rsi
  unsigned __int64 v21; // r12
  unsigned __int64 v22; // r11
  __int64 v23; // r11
  int v24[3]; // [rsp+0h] [rbp-Ch] BYREF
  retval_1005D00 result; // 0:rax.8,8:rbx.8

  if ( a2 && *(_QWORD *)a2 )
  {
    if ( *(_BYTE *)(a2 + 34) )
    {
      internal_runtime_maps_fatal((__int64 (*)(void))"concurrent map read and map write", (__int64 (*)(void))0x21);
      result._r0 = 0;
      result._r1 = 0;
    }
    else if ( *(_QWORD *)(a2 + 24) )
    {
      v24[0] = a3;
      v6 = (**(__int64 (__golang ***)(int *, _QWORD))(a1 + 72))(v24, *(_QWORD *)(a2 + 8));
      v7 = a2;
      if ( *(_QWORD *)(a2 + 24) == 1 )
      {
        v8 = 0;
      }
      else
      {
        v7 = a2;
        v8 = v6 >> *(_BYTE *)(a2 + 33);
      }
      v9 = *(_QWORD *)(*(_QWORD *)(v7 + 16) + 8 * v8);
      v10 = *(_QWORD *)(v9 + 24);
      v11 = v6;
      v12 = v10 & (v6 >> 7);
      v13 = 0;
      while ( 2 )
      {
        v17 = (unsigned __int64 *)(*(_QWORD *)(v9 + 16) + v12 * *(_QWORD *)(a1 + 80));
        v18 = v11;
        v19 = (__m128i)*v17;
        for ( i = (unsigned __int8)_mm_movemask_epi8(
                                     _mm_cmpeq_epi8(
                                       _mm_shufflelo_epi16(
                                         _mm_unpacklo_epi8((__m128i)(v11 & 0x7F), (__m128i)(v11 & 0x7F)),
                                         0),
                                       v19)); i; i &= i - 1 )
        {
          _BitScanForward64(&v21, i);
          v22 = v21 * *(_QWORD *)(a1 + 88);
          LODWORD(v21) = *(_DWORD *)((char *)v17 + v22 + 8);
          v23 = (__int64)v17 + v22 + 8;
          if ( (_DWORD)v21 == a3 )
          {
            result._r0 = v23 + *(_QWORD *)(a1 + 96);
            result._r1 = 1;
            return result;
          }
        }
        if ( !(unsigned __int8)_mm_movemask_epi8(_mm_cmpeq_epi8((__m128i)0x8080808080808080LL, v19)) )
        {
          v16 = v13 + v12 + 1;
          ++v13;
          v12 = v10 & v16;
          v11 = v18;
          continue;
        }
        break;
      }
      result._r0 = runtime_zeroVal;
      result._r1 = 0;
    }
    else
    {
      v3 = *(unsigned __int64 **)(a2 + 16);
      v4 = (unsigned __int8)~_mm_movemask_epi8((__m128i)*v3);
      v5 = v3 + 1;
      while ( v4 )
      {
        if ( *v5 == a3 && (v4 & 1) != 0 )
        {
          result._r0 = (char *)v5 + *(_QWORD *)(a1 + 96);
          result._r1 = 1;
          return result;
        }
        v5 = (_DWORD *)((char *)v5 + *(_QWORD *)(a1 + 88));
        v4 >>= 1;
      }
      result._r0 = runtime_zeroVal;
      result._r1 = 0;
    }
  }
  else
  {
    result._r0 = runtime_zeroVal;
    result._r1 = 0;
  }
  return result;
}

==================================================

// function name: runtime_memequal64

//----- (0000000001009520) ----------------------------------------------------
// runtime.memequal64
bool __golang runtime_memequal64(_QWORD *a1, _QWORD *a2)
{
  return *a2 == *a1;
}

==================================================

// function name: runtime_timeHistogramMetricsBuckets

//----- (000000000100E7C0) ----------------------------------------------------
// runtime.timeHistogramMetricsBuckets
_QWORD *runtime_timeHistogramMetricsBuckets()
{
  _QWORD *result; // rax
  __int64 i; // rcx
  __int64 j; // rcx
  __int64 k; // rdx

  result = (_QWORD *)runtime_makeslice(&RTYPE_float64, 163);
  *result = 0xFFF0000000000000LL;
  for ( i = 0; i < 4; ++i )
    *(double *)&result[i + 1] = (double)(int)((_DWORD)i << 6) / 1000000000.0;
  for ( j = 9; j < 48; ++j )
  {
    for ( k = 0; k < 4; ++k )
      *(double *)&result[4 * j - 31 + k] = (double)(((_DWORD)k << (j - 3)) | (1 << (j - 1))) / 1000000000.0;
  }
  result[161] = 0x41012E0BE826D695LL;
  result[162] = 0x7FF0000000000000LL;
  return result;
}

==================================================

// function name: uint64_t runtime_nanotime_trampoline

return madvise(*(void **)a4, *(_QWORD *)(a4 + 8), *(_DWORD *)(a4 + 16));

//----- (000000000106EB40) ----------------------------------------------------
// runtime.nanotime_trampoline
uint64_t runtime_nanotime_trampoline()
{
  uint64_t result; // rax
  __int64 v1; // rbx
  uint32_t numer; // esi
  uint32_t denom; // edi
  mach_timebase_info v4; // [rsp+0h] [rbp-10h] BYREF

  result = mach_absolute_time();
  *(_QWORD *)v1 = result;
  numer = timebase;
  denom = dword_11960FC;
  if ( !dword_11960FC )
  {
    mach_timebase_info(&v4);
    numer = v4.numer;
    denom = v4.denom;
    timebase = v4.numer;
    result = (unsigned int)_InterlockedExchange(&dword_11960FC, v4.denom);
  }
  *(_DWORD *)(v1 + 8) = numer;
  *(_DWORD *)(v1 + 12) = denom;
  return result;
}

==================================================

// function name: pthread_t runtime_pthread_self_trampoline

//----- (000000000106F1C0) ----------------------------------------------------
// runtime.pthread_self_trampoline
pthread_t runtime_pthread_self_trampoline()
{
  pthread_t result; // rax
  pthread_t *v1; // rbx

  result = pthread_self();
  *v1 = result;
  return result;
}

==================================================

// function name: xpc_object_t runtime_osinit_hack_trampoline

//----- (000000000106F200) ----------------------------------------------------
// runtime.osinit_hack_trampoline
xpc_object_t runtime_osinit_hack_trampoline()
{
  notify_is_valid_token(0);
  return xpc_date_create_from_current();
}

==================================================

// function name: return runtime_memequal

//----- (0000000001070160) ----------------------------------------------------
// type:.eq.runtime.pTraceState
  return runtime_memequal(a1, a2, 0xCu)
      && a2[1].i64[0] == a1[1].i64[0]
      && a2[1].i64[1] == a1[1].i64[1]
      && a2[2].i64[0] == a1[2].i64[0]
      && a2[2].i8[8] == a1[2].i8[8]
      && a2[2].i8[9] == a1[2].i8[9]
      && a2[3].i64[0] == a1[3].i64[0]
      && a2[3].i64[1] == a1[3].i64[1];
}

//----- (0000000001070220) ----------------------------------------------------
// type:.eq.runtime.traceSchedResourceState
__int64 __golang type__eq_runtime_traceSchedResourceState(const __m128i *a1, const __m128i *a2)
{
  __int64 v2; // rcx

  if ( !runtime_memequal(a1, a2, 0xCu) )
    return 0;
  if ( a2[1].i64[0] == a1[1].i64[0] )
  {
    v2 = a1[1].i64[1];
    LOBYTE(v2) = a2[1].i64[1] == v2;
  }

==================================================

